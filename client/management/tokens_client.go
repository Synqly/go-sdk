// This file was auto-generated by Fern from our API Definition.

package management

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	io "io"
	http "net/http"

	core "github.com/synqly/go-sdk/client/management/core"
)

type TokensClient interface {
	ListTokens(ctx context.Context) (*ListTokensResponse, error)
	GetToken(ctx context.Context, tokenId TokenId) (*GetTokenResponse, error)
	ResetToken(ctx context.Context, tokenId TokenId) (*ResetTokenResponse, error)
	RefreshToken(ctx context.Context, tokenId TokenId) (*RefreshTokenResponse, error)
	RemoveSecondaryToken(ctx context.Context, tokenId TokenId) error
}

func NewTokensClient(opts ...core.ClientOption) TokensClient {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &tokensClient{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type tokensClient struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

// List all refresh tokens for bearer token Owner
func (t *tokensClient) ListTokens(ctx context.Context) (*ListTokensResponse, error) {
	baseURL := ""
	if t.baseURL != "" {
		baseURL = t.baseURL
	}
	endpointURL := baseURL + "/" + "v1/tokens"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(ListTokensResponse)
	if err := core.DoRequest(
		ctx,
		t.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		t.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Retrieve a specific RefreshToken by ID
func (t *tokensClient) GetToken(ctx context.Context, tokenId TokenId) (*GetTokenResponse, error) {
	baseURL := ""
	if t.baseURL != "" {
		baseURL = t.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/tokens/%v/info", tokenId)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(GetTokenResponse)
	if err := core.DoRequest(
		ctx,
		t.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		t.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Resets the token value, clears the secondary, and resets the token expiration time.  (Will require 2FA)
func (t *tokensClient) ResetToken(ctx context.Context, tokenId TokenId) (*ResetTokenResponse, error) {
	baseURL := ""
	if t.baseURL != "" {
		baseURL = t.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/tokens/%v/reset", tokenId)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(ResetTokenResponse)
	if err := core.DoRequest(
		ctx,
		t.httpClient,
		endpointURL,
		http.MethodPut,
		nil,
		&response,
		t.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Create new primary TokenPair and move old one to secondary. Invoke RemoveSecondaryToken after propagating the new bearer tokens.
func (t *tokensClient) RefreshToken(ctx context.Context, tokenId TokenId) (*RefreshTokenResponse, error) {
	baseURL := ""
	if t.baseURL != "" {
		baseURL = t.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/tokens/%v/refresh", tokenId)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(RefreshTokenResponse)
	if err := core.DoRequest(
		ctx,
		t.httpClient,
		endpointURL,
		http.MethodPut,
		nil,
		&response,
		t.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Remove secondary TokenPair
func (t *tokensClient) RemoveSecondaryToken(ctx context.Context, tokenId TokenId) error {
	baseURL := ""
	if t.baseURL != "" {
		baseURL = t.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/tokens/%v/secondary", tokenId)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	if err := core.DoRequest(
		ctx,
		t.httpClient,
		endpointURL,
		http.MethodDelete,
		nil,
		nil,
		t.header,
		errorDecoder,
	); err != nil {
		return err
	}
	return nil
}
