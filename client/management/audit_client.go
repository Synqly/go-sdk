// This file was auto-generated by Fern from our API Definition.

package management

import (
	context "context"
	http "net/http"

	core "github.com/synqly/go-sdk/client/management/core"
)

type AuditClient interface {
	ListAuditAccounts(ctx context.Context) (*ListAuditResponse, error)
	ListAuditIntegrators(ctx context.Context) (*ListAuditResponse, error)
}

func NewAuditClient(opts ...core.ClientOption) AuditClient {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &auditClient{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type auditClient struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

// List all audit events for an Account.
func (a *auditClient) ListAuditAccounts(ctx context.Context) (*ListAuditResponse, error) {
	baseURL := ""
	if a.baseURL != "" {
		baseURL = a.baseURL
	}
	endpointURL := baseURL + "/" + "v1/audit/accounts"

	response := new(ListAuditResponse)
	if err := core.DoRequest(
		ctx,
		a.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		a.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// List all audit events for an Integrator.
func (a *auditClient) ListAuditIntegrators(ctx context.Context) (*ListAuditResponse, error) {
	baseURL := ""
	if a.baseURL != "" {
		baseURL = a.baseURL
	}
	endpointURL := baseURL + "/" + "v1/audit/integrators"

	response := new(ListAuditResponse)
	if err := core.DoRequest(
		ctx,
		a.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		a.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}
