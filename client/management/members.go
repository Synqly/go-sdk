// This file was auto-generated by Fern from our API Definition.

package management

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/synqly/go-sdk/client/management/core"
)

type ListMembersRequest struct {
	// Number of `Member` objects to return in this page. Defaults to 100.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Return `Member` objects starting after this `name`.
	StartAfter *string `json:"-" url:"start_after,omitempty"`
	// Select a field to order the results by. Defaults to `name`. To control the direction of the sorting, append
	// `[asc]` or `[desc]` to the field name. For example, `name[desc]` will sort the results by `name` in descending order.
	// The ordering defaults to `asc` if not specified. May be used multiple times to order by multiple fields, and the
	// ordering is applied in the order the fields are specified.
	Order []*string `json:"-" url:"order,omitempty"`
	// Filter results by this query. For more information on filtering, refer to our Filtering Guide. Defaults to no filter.
	// If used more than once, the queries are ANDed together.
	Filter []*string `json:"-" url:"filter,omitempty"`
}

type CreateMemberRequest struct {
	// Email name to use for this Member. Also used for duplicate detection and default sort order.
	Name string `json:"name" url:"name"`
	// User's full display name. Defaults to the same value as the 'name' field if not specified.
	Fullname *string `json:"fullname,omitempty" url:"fullname,omitempty"`
	// User's nickname
	Nickname *string `json:"nickname,omitempty" url:"nickname,omitempty"`
	// Url of user's picture
	Picture *string `json:"picture,omitempty" url:"picture,omitempty"`
	// Member secret used to logon. Must be at least 8 characters long and fewer than 72 characters. There are no restrictions on the characters used; however, the secret must be sufficiently complex. It cannot be a common word, previously leaked password, or easily guessed sequences like `qwerty` or `12345`.
	Secret string `json:"secret" url:"secret"`
	// Roles granted to this member. Tokens inherit this access. Defaults to `member`.
	RoleBinding []RoleName     `json:"role_binding,omitempty" url:"role_binding,omitempty"`
	Options     *MemberOptions `json:"options" url:"options"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateMemberRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateMemberRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateMemberRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateMemberRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateMemberRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateMemberResponse struct {
	Result *CreateMemberResponseResult `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateMemberResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateMemberResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateMemberResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateMemberResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateMemberResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Unique identifier for this Member
type MemberId = Id

type GetMemberResponse struct {
	Result *Member `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetMemberResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetMemberResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetMemberResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetMemberResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetMemberResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListMembersResponse struct {
	Result []*Member `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListMembersResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListMembersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListMembersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListMembersResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListMembersResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type PatchMemberResponse struct {
	Result *Member `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PatchMemberResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PatchMemberResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PatchMemberResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PatchMemberResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatchMemberResponse) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type UpdateMemberRequest = *Member

type UpdateMemberResponse struct {
	Result *Member `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateMemberResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateMemberResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateMemberResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateMemberResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateMemberResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
