// This file was auto-generated by Fern from our API Definition.

package management

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	io "io"
	http "net/http"

	core "github.com/synqly/go-sdk/client/management/core"
)

type AccountsClient interface {
	ListAccount(ctx context.Context) (*ListAccountResponse, error)
	GetAccount(ctx context.Context, id AccountId) (*GetAccountResponse, error)
	CreateAccount(ctx context.Context, request *CreateAccountRequest) (*CreateAccountResponse, error)
	UpdateAccount(ctx context.Context, id AccountId, request UpdateAccountRequest) (*UpdateAccountResponse, error)
	PatchAccount(ctx context.Context, id AccountId, request []map[string]any) (*PatchAccountResponse, error)
	DeleteAccount(ctx context.Context, id AccountId) error
}

func NewAccountsClient(opts ...core.ClientOption) AccountsClient {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &accountsClient{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type accountsClient struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

// List all accounts
func (a *accountsClient) ListAccount(ctx context.Context) (*ListAccountResponse, error) {
	baseURL := ""
	if a.baseURL != "" {
		baseURL = a.baseURL
	}
	endpointURL := baseURL + "/" + "v1/accounts"

	response := new(ListAccountResponse)
	if err := core.DoRequest(
		ctx,
		a.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		a.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Retrieve a Account by ID
func (a *accountsClient) GetAccount(ctx context.Context, id AccountId) (*GetAccountResponse, error) {
	baseURL := ""
	if a.baseURL != "" {
		baseURL = a.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/accounts/%v", id)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(GetAccountResponse)
	if err := core.DoRequest(
		ctx,
		a.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		a.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Add a new account. Integrators manage accounts for their customers, and can associate an account per customer or have multiple accounts for each customer; for example, each customer could have a dev and production account. Creates and returns a token that may be solely used for the new account.
func (a *accountsClient) CreateAccount(ctx context.Context, request *CreateAccountRequest) (*CreateAccountResponse, error) {
	baseURL := ""
	if a.baseURL != "" {
		baseURL = a.baseURL
	}
	endpointURL := baseURL + "/" + "v1/accounts"

	response := new(CreateAccountResponse)
	if err := core.DoRequest(
		ctx,
		a.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		a.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Update a Account by ID
func (a *accountsClient) UpdateAccount(ctx context.Context, id AccountId, request UpdateAccountRequest) (*UpdateAccountResponse, error) {
	baseURL := ""
	if a.baseURL != "" {
		baseURL = a.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/accounts/%v", id)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(UpdateAccountResponse)
	if err := core.DoRequest(
		ctx,
		a.httpClient,
		endpointURL,
		http.MethodPut,
		request,
		&response,
		a.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Update a Account by ID
func (a *accountsClient) PatchAccount(ctx context.Context, id AccountId, request []map[string]any) (*PatchAccountResponse, error) {
	baseURL := ""
	if a.baseURL != "" {
		baseURL = a.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/accounts/%v", id)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(PatchAccountResponse)
	if err := core.DoRequest(
		ctx,
		a.httpClient,
		endpointURL,
		http.MethodPatch,
		request,
		&response,
		a.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Delete a Account by ID. Also deletes all Tokens and Credentials for the Account.
func (a *accountsClient) DeleteAccount(ctx context.Context, id AccountId) error {
	baseURL := ""
	if a.baseURL != "" {
		baseURL = a.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/accounts/%v", id)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	if err := core.DoRequest(
		ctx,
		a.httpClient,
		endpointURL,
		http.MethodDelete,
		nil,
		nil,
		a.header,
		errorDecoder,
	); err != nil {
		return err
	}
	return nil
}
