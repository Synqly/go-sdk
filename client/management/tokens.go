// This file was auto-generated by Fern from our API Definition.

package management

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/synqly/go-sdk/client/management/core"
)

type ListTokensRequest struct {
	// Number of `Token` objects to return in this page. Defaults to 100.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Return `Token` objects starting after this `name`.
	StartAfter *string `json:"-" url:"start_after,omitempty"`
	// Select a field to order the results by. Defaults to `name`. To control the direction of the sorting, append
	// `[asc]` or `[desc]` to the field name. For example, `name[desc]` will sort the results by `name` in descending order.
	// The ordering defaults to `asc` if not specified. May be used multiple times to order by multiple fields, and the
	// ordering is applied in the order the fields are specified.
	Order []*string `json:"-" url:"order,omitempty"`
	// Filter results by this query. For more information on filtering, refer to our Filtering Guide. Defaults to no filter.
	// If used more than once, the queries are ANDed together.
	Filter []*string `json:"-" url:"filter,omitempty"`
}

// Unique identifier for this Token
type TokenId = Id

type CreateIntegrationTokenRequest struct {
	// Unique name token. If not provided, defaults to generated newly created refresh token id.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Token time-to-live. If not provided, defaults to 10 minutes. Use the format "1h", "1m", "1s" for hours, minutes, and seconds respectively, e.g., "2h" for 2 hours.
	TokenTtl *string `json:"token_ttl,omitempty" url:"token_ttl,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateIntegrationTokenRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateIntegrationTokenRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateIntegrationTokenRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateIntegrationTokenRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = nil
	return nil
}

func (c *CreateIntegrationTokenRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateIntegrationTokenResponse struct {
	Result *Token `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateIntegrationTokenResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateIntegrationTokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateIntegrationTokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateIntegrationTokenResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = nil
	return nil
}

func (c *CreateIntegrationTokenResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateSynqlyIntegrationsTokenRequest struct {
	// Token time-to-live. If not provided, defaults to 24 hours. Use the format "1h", "1m", "1s" for hours, minutes, and seconds respectively, e.g., "24h" for 24 hours.
	TokenTtl *string `json:"token_ttl,omitempty" url:"token_ttl,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateSynqlyIntegrationsTokenRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateSynqlyIntegrationsTokenRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateSynqlyIntegrationsTokenRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateSynqlyIntegrationsTokenRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = nil
	return nil
}

func (c *CreateSynqlyIntegrationsTokenRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateSynqlyIntegrationsTokenResponse struct {
	Result *SynqlyIntegrationsTokenResponse `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateSynqlyIntegrationsTokenResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateSynqlyIntegrationsTokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateSynqlyIntegrationsTokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateSynqlyIntegrationsTokenResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = nil
	return nil
}

func (c *CreateSynqlyIntegrationsTokenResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateTokenRequest struct {
	// Unique name token. If not provided, defaults to generated newly created refresh token id.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Limit access to supplied resources
	Resources *Resources `json:"resources" url:"resources"`
	// Limit access to supplied permissions
	PermissionSet Permissions `json:"permission_set" url:"permission_set"`
	// Token time-to-live. If not provided, defaults to 24 hours. Use the format "1h", "1m", "1s" for hours, minutes, and seconds respectively, e.g., "24h" for 24 hours.
	TokenTtl *string `json:"token_ttl,omitempty" url:"token_ttl,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateTokenRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateTokenRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateTokenRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateTokenRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = nil
	return nil
}

func (c *CreateTokenRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateTokenResponse struct {
	Result *RefreshToken `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateTokenResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateTokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateTokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateTokenResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = nil
	return nil
}

func (c *CreateTokenResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GetTokenResponse struct {
	Result *RefreshToken `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetTokenResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetTokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetTokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetTokenResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = nil
	return nil
}

func (g *GetTokenResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListTokensResponse struct {
	Result []*RefreshToken `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListTokensResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListTokensResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListTokensResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListTokensResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = nil
	return nil
}

func (l *ListTokensResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type RefreshTokenResponse struct {
	Result *RefreshToken `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RefreshTokenResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RefreshTokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RefreshTokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RefreshTokenResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = nil
	return nil
}

func (r *RefreshTokenResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ResetTokenResponse struct {
	Result *RefreshToken `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ResetTokenResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResetTokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ResetTokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResetTokenResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = nil
	return nil
}

func (r *ResetTokenResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
