// This file was auto-generated by Fern from our API Definition.

package management

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	io "io"
	http "net/http"

	core "github.com/synqly/go-sdk/client/management/core"
)

type TransformsClient interface {
	ListTransform(ctx context.Context) (*ListTransformResponse, error)
	GetTransform(ctx context.Context, transformId TransformId) (*GetTransformResponse, error)
	CreateTransform(ctx context.Context, request CreateTransformRequest) (*CreateTransformResponse, error)
	UpdateTransform(ctx context.Context, transformId TransformId, request UpdateTransformRequest) (*UpdateTransformResponse, error)
	PatchTransform(ctx context.Context, transformId TransformId, request []map[string]any) (*PatchTransformResponse, error)
	DeleteTransform(ctx context.Context, transformId TransformId) error
}

func NewTransformsClient(opts ...core.ClientOption) TransformsClient {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &transformsClient{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type transformsClient struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

// List all Transforms for an Account
func (t *transformsClient) ListTransform(ctx context.Context) (*ListTransformResponse, error) {
	baseURL := ""
	if t.baseURL != "" {
		baseURL = t.baseURL
	}
	endpointURL := baseURL + "/" + "v1/transforms"

	response := new(ListTransformResponse)
	if err := core.DoRequest(
		ctx,
		t.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		t.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Retrieve a Transform by ID
func (t *transformsClient) GetTransform(ctx context.Context, transformId TransformId) (*GetTransformResponse, error) {
	baseURL := ""
	if t.baseURL != "" {
		baseURL = t.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/transforms/%v", transformId)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(GetTransformResponse)
	if err := core.DoRequest(
		ctx,
		t.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		t.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Add a new Transform
func (t *transformsClient) CreateTransform(ctx context.Context, request CreateTransformRequest) (*CreateTransformResponse, error) {
	baseURL := ""
	if t.baseURL != "" {
		baseURL = t.baseURL
	}
	endpointURL := baseURL + "/" + "v1/transforms"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(CreateTransformResponse)
	if err := core.DoRequest(
		ctx,
		t.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		t.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Update a Transform by ID
func (t *transformsClient) UpdateTransform(ctx context.Context, transformId TransformId, request UpdateTransformRequest) (*UpdateTransformResponse, error) {
	baseURL := ""
	if t.baseURL != "" {
		baseURL = t.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/transforms/%v", transformId)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(UpdateTransformResponse)
	if err := core.DoRequest(
		ctx,
		t.httpClient,
		endpointURL,
		http.MethodPut,
		request,
		&response,
		t.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Update a Transform by ID
func (t *transformsClient) PatchTransform(ctx context.Context, transformId TransformId, request []map[string]any) (*PatchTransformResponse, error) {
	baseURL := ""
	if t.baseURL != "" {
		baseURL = t.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/transforms/%v", transformId)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(PatchTransformResponse)
	if err := core.DoRequest(
		ctx,
		t.httpClient,
		endpointURL,
		http.MethodPatch,
		request,
		&response,
		t.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Delete a Transform by ID.
func (t *transformsClient) DeleteTransform(ctx context.Context, transformId TransformId) error {
	baseURL := ""
	if t.baseURL != "" {
		baseURL = t.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/transforms/%v", transformId)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	if err := core.DoRequest(
		ctx,
		t.httpClient,
		endpointURL,
		http.MethodDelete,
		nil,
		nil,
		t.header,
		errorDecoder,
	); err != nil {
		return err
	}
	return nil
}
