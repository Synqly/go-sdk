// This file was auto-generated by Fern from our API Definition.

package management

import (
	context "context"
	fmt "fmt"
	http "net/http"
	url "net/url"

	core "github.com/synqly/go-sdk/client/management/core"
)

type CapabilitiesClient interface {
	ListCategoryCapabilities(ctx context.Context, request *ListCategoryCapabilitiesRequest) (*ListCategoryCapabilitiesResponse, error)
	ListProviderCapabilities(ctx context.Context, request *ListProviderCapabilitiesRequest) (*ListProviderCapabilitiesResponse, error)
}

func NewCapabilitiesClient(opts ...core.ClientOption) CapabilitiesClient {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &capabilitiesClient{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type capabilitiesClient struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

// List all Capabilities for an Integration
func (c *capabilitiesClient) ListCategoryCapabilities(ctx context.Context, request *ListCategoryCapabilitiesRequest) (*ListCategoryCapabilitiesResponse, error) {
	baseURL := ""
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "v1/capabilities/category"

	queryParams := make(url.Values)
	var categoryDefaultValue string
	if request.Category != categoryDefaultValue {
		queryParams.Add("category", fmt.Sprintf("%v", request.Category))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	response := new(ListCategoryCapabilitiesResponse)
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		request,
		&response,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// List all Capabilities for a Provider
func (c *capabilitiesClient) ListProviderCapabilities(ctx context.Context, request *ListProviderCapabilitiesRequest) (*ListProviderCapabilitiesResponse, error) {
	baseURL := ""
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "v1/capabilities/provider"

	queryParams := make(url.Values)
	var providerDefaultValue string
	if request.Provider != providerDefaultValue {
		queryParams.Add("provider", fmt.Sprintf("%v", request.Provider))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	response := new(ListProviderCapabilitiesResponse)
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		request,
		&response,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}
