// This file was auto-generated by Fern from our API Definition.

package management

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/synqly/go-sdk/client/management/core"
)

type ChangePasswordRequest struct {
	// Old member secret
	OldSecret string `json:"old_secret" url:"old_secret"`
	// New member secret
	NewSecret string `json:"new_secret" url:"new_secret"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChangePasswordRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChangePasswordRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ChangePasswordRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChangePasswordRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = nil
	return nil
}

func (c *ChangePasswordRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ChangePasswordResponse struct {
	Result *ChangePasswordResponseResult `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChangePasswordResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChangePasswordResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ChangePasswordResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChangePasswordResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = nil
	return nil
}

func (c *ChangePasswordResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type LogonRequest struct {
	// Email address identifying the member to initiate a session for.
	Name string `json:"name" url:"name"`
	// Password of the member to initiate a session for.
	Secret string `json:"secret" url:"secret"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *LogonRequest) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LogonRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler LogonRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LogonRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = nil
	return nil
}

func (l *LogonRequest) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LogonResponse struct {
	Result *LogonResponseResult `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *LogonResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LogonResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler LogonResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LogonResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = nil
	return nil
}

func (l *LogonResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
