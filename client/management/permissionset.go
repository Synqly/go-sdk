// This file was auto-generated by Fern from our API Definition.

package management

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/synqly/go-sdk/client/management/core"
)

type GetPermissionSetResponse struct {
	Result *PermissionSet `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetPermissionSetResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetPermissionSetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetPermissionSetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetPermissionSetResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = nil
	return nil
}

func (g *GetPermissionSetResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListPermissionSetsResponse struct {
	Result []*PermissionSet `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListPermissionSetsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPermissionSetsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPermissionSetsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPermissionSetsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = nil
	return nil
}

func (l *ListPermissionSetsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type Permissions string

const (
	PermissionsAdministrator  Permissions = "administrator"
	PermissionsViewer         Permissions = "viewer"
	PermissionsMember         Permissions = "member"
	PermissionsAccountManager Permissions = "account-manager"
	PermissionsConnectUi      Permissions = "connect-ui"
	PermissionsTokenIssuer    Permissions = "token-issuer"
	// Permission set that provides the minimum level of access necessary for MCP use. Gives read access to accounts and integrations and the ability to use any Connector API.
	PermissionsMcpIntegrationsUseOnly Permissions = "mcp-integrations-use-only"
	// Permission set that provides the minimum level of access necessary for MCP management use. Can create and update integrations but cannot use any Connector API.
	PermissionsMcpManagement Permissions = "mcp-management"
)

func NewPermissionsFromString(s string) (Permissions, error) {
	switch s {
	case "administrator":
		return PermissionsAdministrator, nil
	case "viewer":
		return PermissionsViewer, nil
	case "member":
		return PermissionsMember, nil
	case "account-manager":
		return PermissionsAccountManager, nil
	case "connect-ui":
		return PermissionsConnectUi, nil
	case "token-issuer":
		return PermissionsTokenIssuer, nil
	case "mcp-integrations-use-only":
		return PermissionsMcpIntegrationsUseOnly, nil
	case "mcp-management":
		return PermissionsMcpManagement, nil
	}
	var t Permissions
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p Permissions) Ptr() *Permissions {
	return &p
}
