// This file was auto-generated by Fern from our API Definition.

package management

import (
	json "encoding/json"
	fmt "fmt"
)

type ProviderConfig struct {
	Type          string
	Storage       *StorageConfig
	Events        *EventConfig
	Tickets       *TicketConfig
	Notifications *NotificationConfig
	Monitors      *MonitorConfig
}

func NewProviderConfigFromStorage(value *StorageConfig) *ProviderConfig {
	return &ProviderConfig{Type: "storage", Storage: value}
}

func NewProviderConfigFromEvents(value *EventConfig) *ProviderConfig {
	return &ProviderConfig{Type: "events", Events: value}
}

func NewProviderConfigFromTickets(value *TicketConfig) *ProviderConfig {
	return &ProviderConfig{Type: "tickets", Tickets: value}
}

func NewProviderConfigFromNotifications(value *NotificationConfig) *ProviderConfig {
	return &ProviderConfig{Type: "notifications", Notifications: value}
}

func NewProviderConfigFromMonitors(value *MonitorConfig) *ProviderConfig {
	return &ProviderConfig{Type: "monitors", Monitors: value}
}

func (p *ProviderConfig) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "storage":
		value := new(StorageConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Storage = value
	case "events":
		value := new(EventConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Events = value
	case "tickets":
		value := new(TicketConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Tickets = value
	case "notifications":
		value := new(NotificationConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Notifications = value
	case "monitors":
		value := new(MonitorConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Monitors = value
	}
	return nil
}

func (p ProviderConfig) MarshalJSON() ([]byte, error) {
	switch p.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.Type, p)
	case "storage":
		var marshaler = struct {
			Type string `json:"type"`
			*StorageConfig
		}{
			Type:          p.Type,
			StorageConfig: p.Storage,
		}
		return json.Marshal(marshaler)
	case "events":
		var marshaler = struct {
			Type string `json:"type"`
			*EventConfig
		}{
			Type:        p.Type,
			EventConfig: p.Events,
		}
		return json.Marshal(marshaler)
	case "tickets":
		var marshaler = struct {
			Type string `json:"type"`
			*TicketConfig
		}{
			Type:         p.Type,
			TicketConfig: p.Tickets,
		}
		return json.Marshal(marshaler)
	case "notifications":
		var marshaler = struct {
			Type string `json:"type"`
			*NotificationConfig
		}{
			Type:               p.Type,
			NotificationConfig: p.Notifications,
		}
		return json.Marshal(marshaler)
	case "monitors":
		var marshaler = struct {
			Type string `json:"type"`
			*MonitorConfig
		}{
			Type:          p.Type,
			MonitorConfig: p.Monitors,
		}
		return json.Marshal(marshaler)
	}
}

type ProviderConfigVisitor interface {
	VisitStorage(*StorageConfig) error
	VisitEvents(*EventConfig) error
	VisitTickets(*TicketConfig) error
	VisitNotifications(*NotificationConfig) error
	VisitMonitors(*MonitorConfig) error
}

func (p *ProviderConfig) Accept(v ProviderConfigVisitor) error {
	switch p.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", p.Type, p)
	case "storage":
		return v.VisitStorage(p.Storage)
	case "events":
		return v.VisitEvents(p.Events)
	case "tickets":
		return v.VisitTickets(p.Tickets)
	case "notifications":
		return v.VisitNotifications(p.Notifications)
	case "monitors":
		return v.VisitMonitors(p.Monitors)
	}
}
