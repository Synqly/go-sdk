// This file was auto-generated by Fern from our API Definition.

package management

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	io "io"
	http "net/http"

	core "github.com/synqly/go-sdk/client/management/core"
)

type CredentialsClient interface {
	ListCredential(ctx context.Context) (*ListCredentialResponse, error)
	GetCredential(ctx context.Context, credentialId CredentialId) (*GetCredentialResponse, error)
	CreateCredential(ctx context.Context, request CreateCredentialRequest) (*CreateCredentialResponse, error)
	UpdateCredential(ctx context.Context, credentialId CredentialId, request UpdateCredentialRequest) (*UpdateCredentialResponse, error)
	PatchCredential(ctx context.Context, credentialId CredentialId, request []map[string]any) (*PatchCredentialResponse, error)
	DeleteCredential(ctx context.Context, credentialId CredentialId) error
}

func NewCredentialsClient(opts ...core.ClientOption) CredentialsClient {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &credentialsClient{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type credentialsClient struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

// List all credentials for an Account
func (c *credentialsClient) ListCredential(ctx context.Context) (*ListCredentialResponse, error) {
	baseURL := ""
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "v1/credentials"

	response := new(ListCredentialResponse)
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Retrieve a Credential by ID
func (c *credentialsClient) GetCredential(ctx context.Context, credentialId CredentialId) (*GetCredentialResponse, error) {
	baseURL := ""
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/credentials/%v", credentialId)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(GetCredentialResponse)
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		c.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Add a new credential. Each credential may only by used by a single Account; however, Credentials can be shared by multiple Integrations within an Account.
func (c *credentialsClient) CreateCredential(ctx context.Context, request CreateCredentialRequest) (*CreateCredentialResponse, error) {
	baseURL := ""
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "v1/credentials"

	response := new(CreateCredentialResponse)
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Update a Credential by ID
func (c *credentialsClient) UpdateCredential(ctx context.Context, credentialId CredentialId, request UpdateCredentialRequest) (*UpdateCredentialResponse, error) {
	baseURL := ""
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/credentials/%v", credentialId)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(UpdateCredentialResponse)
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPut,
		request,
		&response,
		c.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Update a Credential by ID
func (c *credentialsClient) PatchCredential(ctx context.Context, credentialId CredentialId, request []map[string]any) (*PatchCredentialResponse, error) {
	baseURL := ""
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/credentials/%v", credentialId)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(PatchCredentialResponse)
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPatch,
		request,
		&response,
		c.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Delete a Credential by ID.
func (c *credentialsClient) DeleteCredential(ctx context.Context, credentialId CredentialId) error {
	baseURL := ""
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/credentials/%v", credentialId)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodDelete,
		nil,
		nil,
		c.header,
		errorDecoder,
	); err != nil {
		return err
	}
	return nil
}
