// This file was auto-generated by Fern from our API Definition.

package management

import (
	json "encoding/json"
	fmt "fmt"
)

type EventProviderTypeConfig struct {
	Type             string
	AzureMonitorLogs *AzureConfig
	Aws              *AwsConfig
}

func NewEventProviderTypeConfigFromAzureMonitorLogs(value *AzureConfig) *EventProviderTypeConfig {
	return &EventProviderTypeConfig{Type: "azure_monitor_logs", AzureMonitorLogs: value}
}

func NewEventProviderTypeConfigFromAws(value *AwsConfig) *EventProviderTypeConfig {
	return &EventProviderTypeConfig{Type: "aws", Aws: value}
}

func (e *EventProviderTypeConfig) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "azure_monitor_logs":
		value := new(AzureConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.AzureMonitorLogs = value
	case "aws":
		value := new(AwsConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Aws = value
	}
	return nil
}

func (e EventProviderTypeConfig) MarshalJSON() ([]byte, error) {
	switch e.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.Type, e)
	case "azure_monitor_logs":
		var marshaler = struct {
			Type string `json:"type"`
			*AzureConfig
		}{
			Type:        e.Type,
			AzureConfig: e.AzureMonitorLogs,
		}
		return json.Marshal(marshaler)
	case "aws":
		var marshaler = struct {
			Type string `json:"type"`
			*AwsConfig
		}{
			Type:      e.Type,
			AwsConfig: e.Aws,
		}
		return json.Marshal(marshaler)
	}
}

type EventProviderTypeConfigVisitor interface {
	VisitAzureMonitorLogs(*AzureConfig) error
	VisitAws(*AwsConfig) error
}

func (e *EventProviderTypeConfig) Accept(v EventProviderTypeConfigVisitor) error {
	switch e.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", e.Type, e)
	case "azure_monitor_logs":
		return v.VisitAzureMonitorLogs(e.AzureMonitorLogs)
	case "aws":
		return v.VisitAws(e.Aws)
	}
}
