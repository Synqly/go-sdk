// This file was auto-generated by Fern from our API Definition.

package management

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	io "io"
	http "net/http"

	core "github.com/synqly/go-sdk/client/management/core"
)

type IntegrationsClient interface {
	ListIntegration(ctx context.Context) (*ListIntegrationResponse, error)
	GetIntegration(ctx context.Context, integrationId IntegrationId) (*GetIntegrationResponse, error)
	CreateIntegration(ctx context.Context, request *CreateIntegrationRequest) (*CreateIntegrationResponse, error)
	UpdateIntegration(ctx context.Context, integrationId IntegrationId, request UpdateIntegrationRequest) (*UpdateIntegrationResponse, error)
	PatchIntegration(ctx context.Context, integrationId IntegrationId, request []map[string]any) (*PatchIntegrationResponse, error)
	DeleteIntegration(ctx context.Context, integrationId IntegrationId) error
}

func NewIntegrationsClient(opts ...core.ClientOption) IntegrationsClient {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &integrationsClient{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type integrationsClient struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

// List all integrations for an account
func (i *integrationsClient) ListIntegration(ctx context.Context) (*ListIntegrationResponse, error) {
	baseURL := ""
	if i.baseURL != "" {
		baseURL = i.baseURL
	}
	endpointURL := baseURL + "/" + "v1/integrations"

	response := new(ListIntegrationResponse)
	if err := core.DoRequest(
		ctx,
		i.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		i.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Retrieve an Integration by ID
func (i *integrationsClient) GetIntegration(ctx context.Context, integrationId IntegrationId) (*GetIntegrationResponse, error) {
	baseURL := ""
	if i.baseURL != "" {
		baseURL = i.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/integrations/%v", integrationId)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(GetIntegrationResponse)
	if err := core.DoRequest(
		ctx,
		i.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		i.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Add a new Integration. Configures the Integration with a Provider and creates a new token to use with this Integration's APIs.
func (i *integrationsClient) CreateIntegration(ctx context.Context, request *CreateIntegrationRequest) (*CreateIntegrationResponse, error) {
	baseURL := ""
	if i.baseURL != "" {
		baseURL = i.baseURL
	}
	endpointURL := baseURL + "/" + "v1/integrations"

	response := new(CreateIntegrationResponse)
	if err := core.DoRequest(
		ctx,
		i.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		i.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Update a Integration by ID
func (i *integrationsClient) UpdateIntegration(ctx context.Context, integrationId IntegrationId, request UpdateIntegrationRequest) (*UpdateIntegrationResponse, error) {
	baseURL := ""
	if i.baseURL != "" {
		baseURL = i.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/integrations/%v", integrationId)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(UpdateIntegrationResponse)
	if err := core.DoRequest(
		ctx,
		i.httpClient,
		endpointURL,
		http.MethodPut,
		request,
		&response,
		i.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Update a Integration by ID
func (i *integrationsClient) PatchIntegration(ctx context.Context, integrationId IntegrationId, request []map[string]any) (*PatchIntegrationResponse, error) {
	baseURL := ""
	if i.baseURL != "" {
		baseURL = i.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/integrations/%v", integrationId)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(PatchIntegrationResponse)
	if err := core.DoRequest(
		ctx,
		i.httpClient,
		endpointURL,
		http.MethodPatch,
		request,
		&response,
		i.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Delete a Integration by ID. Also deletes the token created for this Integration.
func (i *integrationsClient) DeleteIntegration(ctx context.Context, integrationId IntegrationId) error {
	baseURL := ""
	if i.baseURL != "" {
		baseURL = i.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/integrations/%v", integrationId)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	if err := core.DoRequest(
		ctx,
		i.httpClient,
		endpointURL,
		http.MethodDelete,
		nil,
		nil,
		i.header,
		errorDecoder,
	); err != nil {
		return err
	}
	return nil
}
