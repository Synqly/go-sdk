// This file was auto-generated by Fern from our API Definition.

package engine

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/synqly/go-sdk/client/engine/core"
)

type GetLabelsRequest struct {
	// Filter results by this query. For more information on filtering, refer to the Assets Filtering Guide.
	// Defaults to no filter.
	Filter *string `json:"-" url:"filter,omitempty"`
}

type QueryDevicesRequest struct {
	// Add metadata to the response by invoking meta functions. Documentation for meta functions is available at https://docs.synqly.com/api-reference/meta-functions. Not all meta function are available at every endpoint.
	Meta []*string `json:"-" url:"meta,omitempty"`
	// Number of finding reports to return. Defaults to 50.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Start search from cursor position.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Filter results by this query. For more information on filtering, refer to the Assets Filtering Guide. Defaults to no filter. If used more than once, the queries are ANDed together.
	Filter []*string `json:"-" url:"filter,omitempty"`
	// Select a field to order the results by. Defaults to `time`. To control the direction of the sorting, append
	// `[asc]` or `[desc]` to the field name. For example, `time[asc]` will sort the results by `time` in ascending order.
	// The ordering defaults to `asc` if not specified.
	Order *string `json:"-" url:"order,omitempty"`
}

type CreateDeviceRequest struct {
	Device Device `json:"device" url:"device"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateDeviceRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateDeviceRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateDeviceRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateDeviceRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = nil
	return nil
}

func (c *CreateDeviceRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateDeviceResponse struct {
	// Various metadata about the results organized by group, then type, then field.
	Meta   *MetaResponse `json:"meta,omitempty" url:"meta,omitempty"`
	Device Device        `json:"device" url:"device"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateDeviceResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateDeviceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateDeviceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateDeviceResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = nil
	return nil
}

func (c *CreateDeviceResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GetLabelsResponse struct {
	// Various metadata about the results organized by group, then type, then field.
	Meta *MetaResponse `json:"meta,omitempty" url:"meta,omitempty"`
	// Cursor to use to retrieve the next page of results
	Cursor string   `json:"cursor" url:"cursor"`
	Result []*Label `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetLabelsResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetLabelsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetLabelsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetLabelsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = nil
	return nil
}

func (g *GetLabelsResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type QueryDevicesResponse struct {
	// Various metadata about the results organized by group, then type, then field.
	Meta *MetaResponse `json:"meta,omitempty" url:"meta,omitempty"`
	// Cursor to use to retrieve the next page of results
	Cursor string   `json:"cursor" url:"cursor"`
	Result []Device `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (q *QueryDevicesResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryDevicesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryDevicesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryDevicesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties

	q._rawJSON = nil
	return nil
}

func (q *QueryDevicesResponse) String() string {
	if len(q._rawJSON) > 0 {
		if value, err := core.StringifyJSON(q._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}
