// This file was auto-generated by Fern from our API Definition.

package engine

import (
	json "encoding/json"
	fmt "fmt"

	events "github.com/synqly/go-sdk/client/engine/events"
)

type Event struct {
	ClassUid             string
	FileActivity         *events.FileActivity
	ScheduledJobActivity *events.ScheduledJobActivity
	ProcessActivity      *events.ProcessActivity
	SecurityFinding      *events.SecurityFinding
	AccountChange        *events.AccountChange
	Authentication       *events.Authentication
	NetworkActivity      *events.NetworkActivity
	ApiActivity          *events.ApiActivity
}

func NewEventFromFileActivity(value *events.FileActivity) *Event {
	return &Event{ClassUid: "FileActivity", FileActivity: value}
}

func NewEventFromScheduledJobActivity(value *events.ScheduledJobActivity) *Event {
	return &Event{ClassUid: "ScheduledJobActivity", ScheduledJobActivity: value}
}

func NewEventFromProcessActivity(value *events.ProcessActivity) *Event {
	return &Event{ClassUid: "ProcessActivity", ProcessActivity: value}
}

func NewEventFromSecurityFinding(value *events.SecurityFinding) *Event {
	return &Event{ClassUid: "SecurityFinding", SecurityFinding: value}
}

func NewEventFromAccountChange(value *events.AccountChange) *Event {
	return &Event{ClassUid: "AccountChange", AccountChange: value}
}

func NewEventFromAuthentication(value *events.Authentication) *Event {
	return &Event{ClassUid: "Authentication", Authentication: value}
}

func NewEventFromNetworkActivity(value *events.NetworkActivity) *Event {
	return &Event{ClassUid: "NetworkActivity", NetworkActivity: value}
}

func NewEventFromApiActivity(value *events.ApiActivity) *Event {
	return &Event{ClassUid: "ApiActivity", ApiActivity: value}
}

func (e *Event) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		ClassUid string `json:"class_uid"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.ClassUid = unmarshaler.ClassUid
	switch unmarshaler.ClassUid {
	case "FileActivity":
		value := new(events.FileActivity)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.FileActivity = value
	case "ScheduledJobActivity":
		value := new(events.ScheduledJobActivity)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.ScheduledJobActivity = value
	case "ProcessActivity":
		value := new(events.ProcessActivity)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.ProcessActivity = value
	case "SecurityFinding":
		value := new(events.SecurityFinding)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.SecurityFinding = value
	case "AccountChange":
		value := new(events.AccountChange)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.AccountChange = value
	case "Authentication":
		value := new(events.Authentication)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Authentication = value
	case "NetworkActivity":
		value := new(events.NetworkActivity)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.NetworkActivity = value
	case "ApiActivity":
		value := new(events.ApiActivity)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.ApiActivity = value
	}
	return nil
}

func (e Event) MarshalJSON() ([]byte, error) {
	switch e.ClassUid {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.ClassUid, e)
	case "FileActivity":
		var marshaler = struct {
			ClassUid string `json:"class_uid"`
			*events.FileActivity
		}{
			ClassUid:     e.ClassUid,
			FileActivity: e.FileActivity,
		}
		return json.Marshal(marshaler)
	case "ScheduledJobActivity":
		var marshaler = struct {
			ClassUid string `json:"class_uid"`
			*events.ScheduledJobActivity
		}{
			ClassUid:             e.ClassUid,
			ScheduledJobActivity: e.ScheduledJobActivity,
		}
		return json.Marshal(marshaler)
	case "ProcessActivity":
		var marshaler = struct {
			ClassUid string `json:"class_uid"`
			*events.ProcessActivity
		}{
			ClassUid:        e.ClassUid,
			ProcessActivity: e.ProcessActivity,
		}
		return json.Marshal(marshaler)
	case "SecurityFinding":
		var marshaler = struct {
			ClassUid string `json:"class_uid"`
			*events.SecurityFinding
		}{
			ClassUid:        e.ClassUid,
			SecurityFinding: e.SecurityFinding,
		}
		return json.Marshal(marshaler)
	case "AccountChange":
		var marshaler = struct {
			ClassUid string `json:"class_uid"`
			*events.AccountChange
		}{
			ClassUid:      e.ClassUid,
			AccountChange: e.AccountChange,
		}
		return json.Marshal(marshaler)
	case "Authentication":
		var marshaler = struct {
			ClassUid string `json:"class_uid"`
			*events.Authentication
		}{
			ClassUid:       e.ClassUid,
			Authentication: e.Authentication,
		}
		return json.Marshal(marshaler)
	case "NetworkActivity":
		var marshaler = struct {
			ClassUid string `json:"class_uid"`
			*events.NetworkActivity
		}{
			ClassUid:        e.ClassUid,
			NetworkActivity: e.NetworkActivity,
		}
		return json.Marshal(marshaler)
	case "ApiActivity":
		var marshaler = struct {
			ClassUid string `json:"class_uid"`
			*events.ApiActivity
		}{
			ClassUid:    e.ClassUid,
			ApiActivity: e.ApiActivity,
		}
		return json.Marshal(marshaler)
	}
}

type EventVisitor interface {
	VisitFileActivity(*events.FileActivity) error
	VisitScheduledJobActivity(*events.ScheduledJobActivity) error
	VisitProcessActivity(*events.ProcessActivity) error
	VisitSecurityFinding(*events.SecurityFinding) error
	VisitAccountChange(*events.AccountChange) error
	VisitAuthentication(*events.Authentication) error
	VisitNetworkActivity(*events.NetworkActivity) error
	VisitApiActivity(*events.ApiActivity) error
}

func (e *Event) Accept(v EventVisitor) error {
	switch e.ClassUid {
	default:
		return fmt.Errorf("invalid type %s in %T", e.ClassUid, e)
	case "FileActivity":
		return v.VisitFileActivity(e.FileActivity)
	case "ScheduledJobActivity":
		return v.VisitScheduledJobActivity(e.ScheduledJobActivity)
	case "ProcessActivity":
		return v.VisitProcessActivity(e.ProcessActivity)
	case "SecurityFinding":
		return v.VisitSecurityFinding(e.SecurityFinding)
	case "AccountChange":
		return v.VisitAccountChange(e.AccountChange)
	case "Authentication":
		return v.VisitAuthentication(e.Authentication)
	case "NetworkActivity":
		return v.VisitNetworkActivity(e.NetworkActivity)
	case "ApiActivity":
		return v.VisitApiActivity(e.ApiActivity)
	}
}
