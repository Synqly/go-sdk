// This file was auto-generated by Fern from our API Definition.

package engine

import (
	time "time"
)

type QueryTicketsRequest struct {
	// Cursor to use to retrieve the next page of results.
	Cursor *string `json:"-"`
	// Number of `Account` objects to return in this page. Defaults to 100.
	Limit *int `json:"-"`
	// Select a field to order the results by. Defaults to `time`. To control the direction of the sorting, append
	// `[asc]` or `[desc]` to the field name. For example, `name[desc]` will sort the results by `name` in descending order.
	// The ordering defaults to `asc` if not specified. May be used multiple times to order by multiple fields, and the
	// ordering is applied in the order the fields are specified.
	Order []*string `json:"-"`
	// Filter results by this query. For more information on filtering, refer to our Filtering Guide. Defaults to no filter.
	// If used more than once, the queries are ANDed together.
	Filter []*string `json:"-"`
}

// Unique identifier for an attachment
type AttachmentId = Id

// Unique identifier for a comment
type CommentId = Id

type CreateAttachmentRequest struct {
	// The name of the file.
	FileName string `json:"file_name"`
	// File contents
	Content []byte `json:"content"`
}

type CreateAttachmentResponse struct {
	Result *AttachmentMetadata `json:"result,omitempty"`
}

type CreateCommentRequest struct {
	// Email address of user who created this ticket. Required by PagerDuty. Not supported by Jira, ServiceNow, or Torq.
	Creator *string `json:"creator,omitempty"`
	// The content of the comment.
	Content string `json:"content"`
}

type CreateCommentResponse struct {
	Result *Comment `json:"result,omitempty"`
}

type CreateTicketRequest struct {
	// Human-readable name for this resource
	Name string `json:"name"`
	// Ticket summary.
	Summary string `json:"summary"`
	// User who created this ticket.
	Creator *string `json:"creator,omitempty"`
	// Who ticket is assigned to.
	Assignee *string `json:"assignee,omitempty"`
	// Ticket contact information.
	Contact *string `json:"contact,omitempty"`
	// Ticket description.
	Description *string `json:"description,omitempty"`
	// The priority of the Ticket
	Priority *Priority `json:"priority,omitempty"`
	// The ticket's due date.
	DueDate *time.Time `json:"due_date,omitempty"`
	// The ticket's complete date.
	CompletionDate *time.Time `json:"completion_date,omitempty"`
	// The current status of the ticket.
	Status *Status `json:"status,omitempty"`
	// The ticket project.
	Project *string `json:"project,omitempty"`
	// The ticket's type.
	IssueType *string `json:"issue_type,omitempty"`
	// Associate tags with Ticket
	Tags []string `json:"tags,omitempty"`
	// Set custom fields for this ticket, keys are the custom field names.
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

type CreateTicketResponse struct {
	Result *Ticket `json:"result,omitempty"`
}

type DownloadAttachmentResponse struct {
	Result *Attachment `json:"result,omitempty"`
}

type GetTicketResponse struct {
	Result *Ticket `json:"result,omitempty"`
}

type ListAttachmentsMetadataResponse struct {
	Result []*AttachmentMetadata `json:"result,omitempty"`
}

type ListCommentsResponse struct {
	Result []*Comment `json:"result,omitempty"`
}

type ListProjectsResponse struct {
	Result []*Project `json:"result,omitempty"`
}

type ListRemoteFieldsResponse struct {
	Result []*RemoteField `json:"result,omitempty"`
}

type PatchTicketResponse struct {
	Result *Ticket `json:"result,omitempty"`
}

type QueryTicketsResponse struct {
	// list of results
	Result []*Ticket `json:"result,omitempty"`
	// Cursor position for subsequent searches
	Cursor string `json:"cursor"`
}

// Unique identifier for this ticket
type TicketId = Id
