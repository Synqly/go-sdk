// This file was auto-generated by Fern from our API Definition.

package securityfinding

import (
	time "time"
)

// Email address. For example: <code>john_doe@example.com</code>.
type EmailAddress = string

// File hash. A unique value that corresponds to the content of the file.
type FileHash = string

// File name. For example: <code>text-file.txt</code>.
type FileName = string

// Unique name assigned to a device connected to a computer network. A domain name in general is an Internet address that can be resolved through the Domain Name System (DNS). For example: <code>r2-d2.example.com</code>.
type Hostname = string

// Internet Protocol address (IP address), in either IPv4 or IPv6 format.
type IpAddress = string

// Media Access Control (MAC) address. For example: <code>18:36:F3:98:4F:9A</code>.
type MacAddress = string

// The TCP/UDP port number. For example: <code>80</code> or <code>22</code>.
type Port = int

// Process name. For example: <code>Notepad</code>.
type ProcessName = string

// Resource unique identifier. For example, S3 Bucket name or EC2 Instance ID.
type ResourceUid = string

// Subnet mask in Classless Inter-Domain Routing (CIDR) notation. For example <code>192.168.200.0/24</code>.
type Subnet = string

// The timestamp format is the number of milliseconds since the Epoch 01/01/1970 00:00:00 UTC. For example <code>1618524549901</code>.
type Timestamp = int

// Uniform Resource Locator (URL) string. For example: <code>http://www.example.com/download/trouble.exe</code>.
type UrlString = string

// User name. For example: <code>john_doe</code>.
type UserName = string

// ActivityId is an enum, and the following values are allowed.
// 0 - Unknown: The event activity is unknown.
// 1 - Create: A security finding is created.
// 2 - Update: A security finding is updated.
// 99 - Other: The event activity is not mapped.
type ActivityId = int

// CategoryUid is an enum, and the following values are allowed.
// 2 - Findings: Findings events report findings, detections, and possible resolutions of malware, anomalies, or other actions performed by security products.
type CategoryUid = int

// ClassUid is an enum, and the following values are allowed.
// 2001 - SecurityFinding: Security Finding events describe findings, detections, anomalies, alerts and/or actions performed by security products
type ClassUid = int

// ConfidenceId is an enum, and the following values are allowed.
// 0 - Unknown: No confidence is assigned.
// 1 - Low
// 2 - Medium
// 3 - High
// 99 - Other: The confidence is not mapped to the defined enum values. See the <code>confidence</code> attribute, which contains a data source specific value.
type ConfidenceId = int

// ImpactId is an enum, and the following values are allowed.
// 0 - Unknown
// 1 - Low
// 2 - Medium
// 3 - High
// 4 - Critical
// 99 - Other: The detection impact is not mapped. See the <code>impact</code> attribute, which contains a data source specific value.
type ImpactId = int

// RiskLevelId is an enum, and the following values are allowed.
// 0 - Info
// 1 - Low
// 2 - Medium
// 3 - High
// 4 - Critical
type RiskLevelId = int

// Security Finding events describe findings, detections, anomalies, alerts and/or actions performed by security products
type SecurityFinding struct {
	// The normalized identifier of the activity that triggered the event.
	ActivityId ActivityId `json:"activity_id"`
	// The event activity name, as defined by the activity_id.
	ActivityName *string `json:"activity_name,omitempty"`
	// The analytic technique used to create the finding or detection
	Analytic *Analytic `json:"analytic,omitempty"`
	// Describes details about a typical API (Application Programming Interface) call.
	Api *Api `json:"api,omitempty"`
	// The attack object describes the technique and associated tactics as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>.
	Attacks []*Attack `json:"attacks,omitempty"`
	// The event category name, as defined by category_uid value: <code>Findings</code>.
	CategoryName *string `json:"category_name,omitempty"`
	// The category unique identifier of the event.
	CategoryUid CategoryUid `json:"category_uid"`
	// The CIS Critical Security Controls is a list of top 20 actions and practices an organization’s security team can take on such that cyber attacks or malware, are minimized and prevented.
	CisCsc []*CisControl `json:"cis_csc,omitempty"`
	// The unique identifier of a class. A Class describes the attributes available in an event.
	ClassUid ClassUid `json:"class_uid"`
	// Describes details about the Cloud environment where the event was originally created or logged.
	Cloud *Cloud `json:"cloud,omitempty"`
	// The compliance object provides context to compliance findings (e.g., a check against a specific regulatory or best practice framework such as CIS or NIST) and contains compliance related details.
	Compliance *Compliance `json:"compliance,omitempty"`
	// The confidence, normalized to the caption of the confidence_id value. In the case of 'Other', it is defined by the event source.
	Confidence *string `json:"confidence,omitempty"`
	// The normalized confidence refers to the accuracy of the rule that created the finding. A rule with a low confidence means that the finding scope is wide and may create finding reports that may not be malicious in nature.
	ConfidenceId *ConfidenceId `json:"confidence_id,omitempty"`
	// The confidence score as reported by the event source.
	ConfidenceScore *int `json:"confidence_score,omitempty"`
	// The number of times that events in the same logical group occurred during the event <strong>Start Time</strong> to <strong>End Time</strong> period.
	Count *int `json:"count,omitempty"`
	// The data sources for the finding.
	DataSources []string `json:"data_sources,omitempty"`
	// The event duration or aggregate time, the amount of time the event covers from <code>start_time</code> to <code>end_time</code> in milliseconds.
	Duration *int `json:"duration,omitempty"`
	// The end time of a time period, or the time of the most recent event included in the aggregate event.
	EndTime *Timestamp `json:"end_time,omitempty"`
	// The end time of a time period, or the time of the most recent event included in the aggregate event.
	EndTimeDt *time.Time `json:"end_time_dt,omitempty"`
	// The additional information from an external data source, which is associated with the event. For example add location information for the IP address in the DNS answers:</p><code>[{"name": "answers.ip", "value": "92.24.47.250", "type": "location", "data": {"city": "Socotra", "continent": "Asia", "coordinates": [-25.4153, 17.0743], "country": "YE", "desc": "Yemen"}}]</code>
	Enrichments []*Enrichment `json:"enrichments,omitempty"`
	// The data the finding exposes to the analyst.
	Evidence interface{} `json:"evidence,omitempty"`
	// Finding object provides details related to a finding generated by security tool
	Finding *Finding `json:"finding,omitempty"`
	// The impact , normalized to the caption of the impact_id value. In the case of 'Other', it is defined by the event source.
	Impact *string `json:"impact,omitempty"`
	// The normalized impact of the finding.
	ImpactId *ImpactId `json:"impact_id,omitempty"`
	// The impact of the finding, valid range 0-100.
	ImpactScore *int `json:"impact_score,omitempty"`
	// The <a target='_blank' href='https://www.lockheedmartin.com/en-us/capabilities/cyber/cyber-kill-chain.html'>Cyber Kill Chain®</a>.
	KillChain []*KillChain `json:"kill_chain,omitempty"`
	// The list of malware identified by a finding.
	Malware []*Malware `json:"malware,omitempty"`
	// The description of the event, as defined by the event source.
	Message *string `json:"message,omitempty"`
	// The metadata associated with the event.
	Metadata *Metadata `json:"metadata,omitempty"`
	// The NIST Cybersecurity Framework recommendations for managing the cybersecurity risk.
	Nist []string `json:"nist,omitempty"`
	// The observables associated with the event.
	Observables []*Observable `json:"observables,omitempty"`
	// The process object.
	Process *Process `json:"process,omitempty"`
	// The event data as received from the event source.
	RawData *string `json:"raw_data,omitempty"`
	// Describes details about resources that were affected by the activity/event.
	Resources []*ResourceDetails `json:"resources,omitempty"`
	// The risk level, normalized to the caption of the risk_level_id value. In the case of 'Other', it is defined by the event source.
	RiskLevel *string `json:"risk_level,omitempty"`
	// The normalized risk level id.
	RiskLevelId *RiskLevelId `json:"risk_level_id,omitempty"`
	// The risk score as reported by the event source.
	RiskScore *int `json:"risk_score,omitempty"`
	// The event severity, normalized to the caption of the severity_id value. In the case of 'Other', it is defined by the event source.
	Severity *string `json:"severity,omitempty"`
	// <p>The normalized identifier of the event severity.</p>The normalized severity is a measurement the effort and expense required to manage and resolve an event or incident. Smaller numerical values represent lower impact events, and larger numerical values represent higher impact events.
	SeverityId SeverityId `json:"severity_id"`
	// The start time of a time period, or the time of the least recent event included in the aggregate event.
	StartTime *Timestamp `json:"start_time,omitempty"`
	// The start time of a time period, or the time of the least recent event included in the aggregate event.
	StartTimeDt *time.Time `json:"start_time_dt,omitempty"`
	// The normalized state of a security finding.
	State *string `json:"state,omitempty"`
	// The normalized state identifier of a security finding.
	StateId StateId `json:"state_id"`
	// The event status, normalized to the caption of the status_id value. In the case of 'Other', it is defined by the event source.
	Status *string `json:"status,omitempty"`
	// The event status code, as reported by the event source.<br /><br />For example, in a Windows Failed Authentication event, this would be the value of 'Failure Code', e.g. 0x18.
	StatusCode *string `json:"status_code,omitempty"`
	// The status details contains additional information about the event outcome.
	StatusDetail *string `json:"status_detail,omitempty"`
	// The normalized identifier of the event status.
	StatusId *StatusId `json:"status_id,omitempty"`
	// The normalized event occurrence time.
	Time Timestamp `json:"time"`
	// The normalized event occurrence time.
	TimeDt *time.Time `json:"time_dt,omitempty"`
	// The number of minutes that the reported event <code>time</code> is ahead or behind UTC, in the range -1,080 to +1,080.
	TimezoneOffset *int `json:"timezone_offset,omitempty"`
	// The event type name, as defined by the type_uid.
	TypeName *string `json:"type_name,omitempty"`
	// The event type ID. It identifies the event's semantics and structure. The value is calculated by the logging system as: <code>class_uid * 100 + activity_id</code>.
	TypeUid TypeUid `json:"type_uid"`
	// The attributes that are not mapped to the event schema. The names and values of those attributes are specific to the event source.
	Unmapped *Object `json:"unmapped,omitempty"`
	// This object describes vulnerabilities reported in a security finding.
	Vulnerabilities []*Vulnerability `json:"vulnerabilities,omitempty"`
}

// SeverityId is an enum, and the following values are allowed.
// 0 - Unknown: The event severity is not known.
// 1 - Informational: Informational message. No action required.
// 2 - Low: The user decides if action is needed.
// 3 - Medium: Action is required but the situation is not serious at this time.
// 4 - High: Action is required immediately.
// 5 - Critical: Action is required immediately and the scope is broad.
// 6 - Fatal: An error occurred but it is too late to take remedial action.
// 99 - Other: The event severity is not mapped. See the <code>severity</code> attribute, which contains a data source specific value.
type SeverityId = int

// StateId is an enum, and the following values are allowed.
// 0 - Unknown
// 1 - New: The finding is new and yet to be reviewed.
// 2 - InProgress: The finding is under review.
// 3 - Suppressed: The finding was reviewed, considered as a false positive and is now suppressed.
// 4 - Resolved: The finding was reviewed and remediated and is now considered resolved.
// 99 - Other: The state is not mapped. See the <code>state</code> attribute, which contains a data source specific value.
type StateId = int

// StatusId is an enum, and the following values are allowed.
// 0 - Unknown
// 1 - Success
// 2 - Failure
// 99 - Other: The event status is not mapped. See the <code>status</code> attribute, which contains a data source specific value.
type StatusId = int

// TypeUid is an enum, and the following values are allowed.
// 200100 - Unknown
// 200101 - Create: A security finding is created.
// 200102 - Update: A security finding is updated.
// 200199 - Other
type TypeUid = int

// The Account object contains details about the account that initiated or performed a specific activity within a system or application.
type Account struct {
	// The name of the account (e.g. GCP Account Name).
	Name *string `json:"name,omitempty"`
	// The account type, normalized to the caption of 'account_type_id'. In the case of 'Other', it is defined by the event source.
	Type *string `json:"type,omitempty"`
	// The normalized account type identifier.
	TypeId *AccountTypeId `json:"type_id,omitempty"`
	// The unique identifier of the account (e.g. AWS Account ID).
	Uid *string `json:"uid,omitempty"`
}

// AccountTypeId is an enum, and the following values are allowed.
// 0 - Unknown: The account type is unknown.
// 1 - LDAPAccount
// 2 - WindowsAccount
// 3 - AWSIAMUser
// 4 - AWSIAMRole
// 5 - GCPAccount
// 6 - AzureADAccount
// 7 - MacOSAccount
// 8 - AppleAccount
// 9 - LinuxAccount
// 10 - AWSAccount
// 99 - Other: The account type is not mapped.
type AccountTypeId = int

// The Analytic object contains details about the analytic technique used to analyze and derive insights from the data or information that led to the finding or conclusion.
type Analytic struct {
	// The analytic category.
	Category *string `json:"category,omitempty"`
	// The description of the analytic that generated the finding.
	Desc *string `json:"desc,omitempty"`
	// The name of the analytic that generated the finding.
	Name string `json:"name"`
	// Describes analytics related to the analytic of a finding or detection as identified by the security product.
	RelatedAnalytics []*Analytic `json:"related_analytics,omitempty"`
	// The analytic type.
	Type *string `json:"type,omitempty"`
	// The analytic type ID.
	TypeId AnalyticTypeId `json:"type_id"`
	// The unique identifier of the analytic that generated the finding.
	Uid *string `json:"uid,omitempty"`
	// The analytic version. For example: <code>1.1</code>.
	Version *string `json:"version,omitempty"`
}

// AnalyticTypeId is an enum, and the following values are allowed.
// 0 - Unknown: The type is unknown.
// 1 - Rule
// 2 - Behavioral
// 3 - Statistical
// 4 - ML_DL_
// 99 - Other: The type is not mapped. See the <code>type</code> attribute, which may contain a data source specific value.
type AnalyticTypeId = int

// The API, or Application Programming Interface, object represents  information pertaining to an API request and response.
type Api struct {
	// Verb/Operation associated with the request
	Operation string `json:"operation"`
	// Details pertaining to the API request.
	Request *Request `json:"request,omitempty"`
	// Details pertaining to the API response.
	Response *Response `json:"response,omitempty"`
	// The information pertaining to the API service.
	Service *Service `json:"service,omitempty"`
	// The version of the API service.
	Version *string `json:"version,omitempty"`
}

// The Attack object describes the technique and associated tactics related to an attack. See <a target='_blank' href='https://attack.mitre.org'>MITRE ATT&CK®</a>.
type Attack struct {
	// The a list of tactic ID's/names that are associated with the attack technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>.
	Tactics []*Tactic `json:"tactics,omitempty"`
	// The attack technique.
	Technique *Technique `json:"technique,omitempty"`
	// The ATT&CK Matrix version.
	Version string `json:"version"`
}

// The Digital Certificate, also known as a Public Key Certificate, object contains information about the ownership and usage of a public key. It serves as a means to establish trust in the authenticity and integrity of the public key and the associated entity. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Certificate/'>d3f:Certificate</a>.
type Certificate struct {
	// The time when the certificate was created.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The time when the certificate was created.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The expiration time of the certificate.
	ExpirationTime *Timestamp `json:"expiration_time,omitempty"`
	// The expiration time of the certificate.
	ExpirationTimeDt *time.Time `json:"expiration_time_dt,omitempty"`
	// The fingerprint list of the certificate.
	Fingerprints []*Fingerprint `json:"fingerprints,omitempty"`
	// The certificate issuer distinguished name.
	Issuer string `json:"issuer"`
	// The serial number of the certificate used to create the digital signature.
	SerialNumber string `json:"serial_number"`
	// The certificate subject distinguished name.
	Subject *string `json:"subject,omitempty"`
	// The certificate version.
	Version *string `json:"version,omitempty"`
}

// The CIS Control contains information as defined by the Center for Internet Security Critical Security Control <a target='_blank' href='https://www.cisecurity.org/controls'>(CIS CSC)</a>. Prioritized set of actions to protect your organization and data from cyber-attack vectors.
type CisControl struct {
	// The CIS critical security control.
	Control string `json:"control"`
	// The CIS critical security control version.
	Version *string `json:"version,omitempty"`
}

// The Cloud object contains information about a cloud account such as AWS Account ID, regions, etc.
type Cloud struct {
	// The account object describes details about the account that was the source or target of the activity.
	Account *Account `json:"account,omitempty"`
	// Organization and org unit relevant to the event or object.
	Org *Organization `json:"org,omitempty"`
	// The unique identifier of a Cloud project.
	ProjectUid *string `json:"project_uid,omitempty"`
	// The unique name of the Cloud services provider, such as AWS, MS Azure, GCP, etc.
	Provider string `json:"provider"`
	// The name of the cloud region, as defined by the cloud provider.
	Region *string `json:"region,omitempty"`
	// The availability zone in the cloud region, as defined by the cloud provider.
	Zone *string `json:"zone,omitempty"`
}

// The Compliance object contains information about compliance requirements related of a finding generated by security tool.
type Compliance struct {
	// A list of applicable compliance requirements for which this finding is related to.
	Requirements []string `json:"requirements,omitempty"`
	// The event status, normalized to the caption of the status_id value. In the case of 'Other', it is defined by the event source.
	Status *string `json:"status,omitempty"`
	// The status details contains additional information about the event outcome.
	StatusDetail *string `json:"status_detail,omitempty"`
}

// The Container object describes an instance of a specific container. A container is a prepackaged, portable system image that runs isolated on an existing system using a container runtime like containerd.
type Container struct {
	// Commit hash of image created for docker or the SHA256 hash of the container. For example: <code>13550340a8681c84c861aac2e5b440161c2b33a3e4f302ac680ca5b686de48de</code>.
	Hash *Fingerprint `json:"hash,omitempty"`
	// The container image used as a template to run the container.
	Image *Image `json:"image,omitempty"`
	// The container name.
	Name *string `json:"name,omitempty"`
	// The network driver used by the container. For example, bridge, overlay, host, none, etc.
	NetworkDriver *string `json:"network_driver,omitempty"`
	// The orchestrator managing the container, such as ECS, EKS, K8s, or OpenShift.
	Orchestrator *string `json:"orchestrator,omitempty"`
	// The unique identifier of the pod (or equivalent) that the container is executing on.
	PodUuid *string `json:"pod_uuid,omitempty"`
	// The backend running the container, such as containerd or cri-o.
	Runtime *string `json:"runtime,omitempty"`
	// The size of the container image.
	Size *int `json:"size,omitempty"`
	// The tag used by the container. It can indicate version, format, OS.
	Tag *string `json:"tag,omitempty"`
	// The full container unique identifier for this instantiation of the container. For example: <code>ac2ea168264a08f9aaca0dfc82ff3551418dfd22d02b713142a6843caa2f61bf</code>.
	Uid string `json:"uid"`
}

// The Common Vulnerabilities and Exposures (CVE) object represents publicly disclosed cybersecurity vulnerabilities defined in CVE Program catalog (<a target='_blank' href='https://cve.mitre.org/'>CVE</a>). There is one CVE Record for each vulnerability in the catalog.
type Cve struct {
	// The Record Creation Date identifies when the CVE ID was issued to a CVE Numbering Authority (CNA) or the CVE Record was published on the CVE List. Note that the Record Creation Date does not necessarily indicate when this vulnerability was discovered, shared with the affected vendor, publicly disclosed, or updated in CVE.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The Record Creation Date identifies when the CVE ID was issued to a CVE Numbering Authority (CNA) or the CVE Record was published on the CVE List. Note that the Record Creation Date does not necessarily indicate when this vulnerability was discovered, shared with the affected vendor, publicly disclosed, or updated in CVE.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The CVSS object details Common Vulnerability Scoring System (<a target='_blank' href='https://www.first.org/cvss/'>CVSS</a>) scores from the advisory that are related to the vulnerability.
	Cvss *Cvss `json:"cvss,omitempty"`
	// The <a target='_blank' href='https://cwe.mitre.org/'>Common Weakness Enumeration (CWE)</a> unique identifier. For example: <code>CWE-787</code>.
	CweUid *string `json:"cwe_uid,omitempty"`
	// Common Weakness Enumeration (CWE) definition URL. For example: <code>https://cwe.mitre.org/data/definitions/787.html</code>.
	CweUrl *UrlString `json:"cwe_url,omitempty"`
	// The Record Modified Date identifies when the CVE record was last updated.
	ModifiedTime *Timestamp `json:"modified_time,omitempty"`
	// The Record Modified Date identifies when the CVE record was last updated.
	ModifiedTimeDt *time.Time `json:"modified_time_dt,omitempty"`
	// The product where the vulnerability was discovered.
	Product *Product `json:"product,omitempty"`
	// <p>The vulnerability type as selected from a large dropdown menu during CVE refinement.</p>Most frequently used vulnerability types are: <code>DoS</code>, <code>Code Execution</code>, <code>Overflow</code>, <code>Memory Corruption</code>, <code>Sql Injection</code>, <code>XSS</code>, <code>Directory Traversal</code>, <code>Http Response Splitting</code>, <code>Bypass something</code>, <code>Gain Information</code>, <code>Gain Privileges</code>, <code>CSRF</code>, <code>File Inclusion</code>. For more information see <a target='_blank' href='https://www.cvedetails.com/vulnerabilities-by-types.php'>Vulnerabilities By Type</a> distributions.
	Type *string `json:"type,omitempty"`
	// The Common Vulnerabilities and Exposures unique number assigned to a specific computer vulnerability. A CVE Identifier begins with 4 digits representing the year followed by a sequence of digits that acts as a unique identifier. For example: <code>CVE-2021-12345</code>.
	Uid string `json:"uid"`
}

// The Common Vulnerability Scoring System (<a target='_blank' href='https://www.first.org/cvss/'>CVSS</a>) object provides a way to capture the principal characteristics of a vulnerability and produce a numerical score reflecting its severity.
type Cvss struct {
	// The CVSS base score. For example: <code>9.1</code>.
	BaseScore float64 `json:"base_score"`
	// The CVSS depth represents a depth of the equation used to calculate CVSS score.
	Depth *CvssDepth `json:"depth,omitempty"`
	// The Common Vulnerability Scoring System metrics.This attribute contains information on the CVE's impact. If the CVE has been analyzed, this attribute will contain any CVSSv2 or CVSSv3 information associated with the vulnerability. For example: <code> {{"Access Vector", "Network"}, {"Access Complexity", "Low"}, ...}</code>.
	Metrics []*Metric `json:"metrics,omitempty"`
	// The CVSS overall score, impacted by base, temporal, and environmental metrics. For example: <code>9.1</code>.
	OverallScore *float64 `json:"overall_score,omitempty"`
	// <p>The Common Vulnerability Scoring System (CVSS) Qualitative Severity Rating. A textual representation of the numeric score.</p><strong>CVSS v2.0</strong><ul><li>Low (0.0 – 3.9)</li><li>Medium (4.0 – 6.9)</li><li>High (7.0 – 10.0)</li></ul></p><strong>CVSS v3.0</strong><ul><li>None (0.0)</li><li>Low (0.1 - 3.9)</li><li>Medium (4.0 - 6.9)</li><li>High (7.0 - 8.9)</li><li>Critical (9.0 - 10.0)</li></ul>
	Severity *string `json:"severity,omitempty"`
	// The CVSS vector string is a text representation of a set of CVSS metrics. It is commonly used to record or transfer CVSS metric information in a concise form. For example: <code>3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H</code>.
	VectorString *string `json:"vector_string,omitempty"`
	// The CVSS version. For example: <code>3.1</code>.
	Version string `json:"version"`
}

// CvssDepth is an enum, and the following values are allowed.
// Base - Base
// Environmental - Environmental
// Temporal - Temporal
type CvssDepth = string

// The Digital Signature object contains information about the cryptographic mechanism used to verify the authenticity, integrity, and origin of the file or application.
type DigitalSignature struct {
	// The digital signature algorithm used to create the signature, normalized to the caption of 'algorithm_id'. In the case of 'Other', it is defined by the event source.
	Algorithm *string `json:"algorithm,omitempty"`
	// The identifier of the normalized digital signature algorithm.
	AlgorithmId DigitalSignatureAlgorithmId `json:"algorithm_id"`
	// The certificate object containing information about the digital certificate.
	Certificate *Certificate `json:"certificate,omitempty"`
	// The time when the digital signature was created.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The time when the digital signature was created.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The developer ID on the certificate that signed the file.
	DeveloperUid *string `json:"developer_uid,omitempty"`
	// The message digest attribute contains the fixed length message hash representation and the corresponding hashing algorithm information.
	Digest *Fingerprint `json:"digest,omitempty"`
}

// DigitalSignatureAlgorithmId is an enum, and the following values are allowed.
// 0 - Unknown
// 1 - DSA: Digital Signature Algorithm (DSA).
// 2 - RSA: Rivest-Shamir-Adleman (RSA) Algorithm.
// 3 - ECDSA: Elliptic Curve Digital Signature Algorithm.
// 4 - Authenticode: Microsoft Authenticode Digital Signature Algorithm.
// 99 - Other
type DigitalSignatureAlgorithmId = int

// The Enrichment object provides inline enrichment data for specific attributes of interest within an event. It serves as a mechanism to enhance or supplement the information associated with the event by adding additional relevant details or context.
type Enrichment struct {
	// The enrichment data associated with the attribute and value. The meaning of this data depends on the type the enrichment record.
	Data interface{} `json:"data,omitempty"`
	// The name of the attribute to which the enriched data pertains.
	Name string `json:"name"`
	// The enrichment data provider name.
	Provider *string `json:"provider,omitempty"`
	// The enrichment type. For example: <code>location</code>.
	Type *string `json:"type,omitempty"`
	// The value of the attribute to which the enriched data pertains.
	Value string `json:"value"`
}

// The OCSF Schema Extension object provides detailed information about the schema extension used to construct the event. The schema extensions are registered in the <a target='_blank' href='https://github.com/ocsf/ocsf-schema/blob/main/extensions.md'>extensions.md</a> file.
type Extension struct {
	// The schema extension name. For example: <code>dev</code>.
	Name string `json:"name"`
	// The schema extension unique identifier. For example: <code>999</code>.
	Uid string `json:"uid"`
	// The schema extension version. For example: <code>1.0.0-alpha.2</code>.
	Version string `json:"version"`
}

// The Feature object provides information about the software product feature that generated a specific event. It encompasses details related to the capabilities, components, user interface (UI) design, and performance upgrades associated with the feature.
type Feature struct {
	// The name of the feature.
	Name *string `json:"name,omitempty"`
	// The unique identifier of the feature.
	Uid *string `json:"uid,omitempty"`
	// The version of the feature.
	Version *string `json:"version,omitempty"`
}

// The File object represents the metadata associated with a file stored in a computer system. It encompasses information about the file itself, including its attributes, properties, and organizational details. Defined by D3FEND <a target='_blank' href='https://next.d3fend.mitre.org/dao/artifact/d3f:File/'>d3f:File</a>.
type File struct {
	// The time when the file was last accessed.
	AccessedTime *Timestamp `json:"accessed_time,omitempty"`
	// The time when the file was last accessed.
	AccessedTimeDt *time.Time `json:"accessed_time_dt,omitempty"`
	// The name of the user who last accessed the object.
	Accessor *User `json:"accessor,omitempty"`
	// The bitmask value that represents the file attributes.
	Attributes *int `json:"attributes,omitempty"`
	// The name of the company that published the file. For example: <code>Microsoft Corporation</code>.
	CompanyName *string `json:"company_name,omitempty"`
	// The file content confidentiality, normalized to the confidentiality_id value. In the case of 'Other', it is defined by the event source.
	Confidentiality *string `json:"confidentiality,omitempty"`
	// The normalized identifier of the file content confidentiality indicator.
	ConfidentialityId *FileConfidentialityId `json:"confidentiality_id,omitempty"`
	// The time when the file was created.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The time when the file was created.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The user that created the file.
	Creator *User `json:"creator,omitempty"`
	// The description of the file, as returned by file system. For example: the description as returned by the Unix file command or the Windows file type.
	Desc *string `json:"desc,omitempty"`
	// An array of hash attributes.
	Hashes []*Fingerprint `json:"hashes,omitempty"`
	// The indication of whether the object is part of the operating system.
	IsSystem *bool `json:"is_system,omitempty"`
	// The Multipurpose Internet Mail Extensions (MIME) type of the file, if applicable.
	MimeType *string `json:"mime_type,omitempty"`
	// The time when the file was last modified.
	ModifiedTime *Timestamp `json:"modified_time,omitempty"`
	// The time when the file was last modified.
	ModifiedTimeDt *time.Time `json:"modified_time_dt,omitempty"`
	// The user that last modified the file.
	Modifier *User `json:"modifier,omitempty"`
	// The name of the file. For example: <code>svchost.exe</code>
	Name FileName `json:"name"`
	// The user that owns the file/object.
	Owner *User `json:"owner,omitempty"`
	// The parent folder in which the file resides. For example: <code>c:\windows\system32</code>
	ParentFolder *string `json:"parent_folder,omitempty"`
	// The full path to the file. For example: <code>c:\windows\system32\svchost.exe</code>.
	Path *string `json:"path,omitempty"`
	// The product that created or installed the file.
	Product *Product `json:"product,omitempty"`
	// The object security descriptor.
	SecurityDescriptor *string `json:"security_descriptor,omitempty"`
	// The digital signature of the file.
	Signature *DigitalSignature `json:"signature,omitempty"`
	// The size of data, in bytes.
	Size *int `json:"size,omitempty"`
	// The file type.
	Type *string `json:"type,omitempty"`
	// The file type ID.
	TypeId FileTypeId `json:"type_id"`
	// The unique identifier of the file as defined by the storage system, such the file system file ID.
	Uid *string `json:"uid,omitempty"`
	// The file version. For example: <code>8.0.7601.17514</code>.
	Version *string `json:"version,omitempty"`
	// An unordered collection of zero or more name/value pairs where each pair represents a file or folder extended attribute.</p>For example: Windows alternate data stream attributes (ADS stream name, ADS size, etc.), user-defined or application-defined attributes, ACL, owner, primary group, etc. Examples from DCS: </p><ul><li><strong>ads_name</strong></li><li><strong>ads_size</strong></li><li><strong>dacl</strong></li><li><strong>owner</strong></li><li><strong>primary_group</strong></li><li><strong>link_name</strong> - name of the link associated to the file.</li><li><strong>hard_link_count</strong> - the number of links that are associated to the file.</li></ul>
	Xattributes *Object `json:"xattributes,omitempty"`
}

// FileConfidentialityId is an enum, and the following values are allowed.
// 0 - Unknown
// 1 - NotConfidential
// 2 - Confidential
// 3 - Secret
// 4 - TopSecret
// 99 - Other
type FileConfidentialityId = int

// FileTypeId is an enum, and the following values are allowed.
// 0 - Unknown: The type is unknown.
// 1 - RegularFile
// 2 - Folder
// 3 - CharacterDevice
// 4 - BlockDevice
// 5 - LocalSocket
// 6 - NamedPipe
// 7 - SymbolicLink
// 99 - Other: The type is not mapped. See the <code>type</code> attribute, which may contain a data source specific value.
type FileTypeId = int

// The Finding object contains details related to a security finding generated by a security tool or system. It encompasses information about potential security vulnerabilities, weaknesses, misconfigurations, or suspicious activities identified during security assessments or monitoring processes.
type Finding struct {
	// The time when the finding was created.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The time when the finding was created.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The description of the reported finding.
	Desc *string `json:"desc,omitempty"`
	// The time when the finding was first observed.
	FirstSeenTime *Timestamp `json:"first_seen_time,omitempty"`
	// The time when the finding was first observed.
	FirstSeenTimeDt *time.Time `json:"first_seen_time_dt,omitempty"`
	// The time when the finding was most recently observed.
	LastSeenTime *Timestamp `json:"last_seen_time,omitempty"`
	// The time when the finding was most recently observed.
	LastSeenTimeDt *time.Time `json:"last_seen_time_dt,omitempty"`
	// The time when the finding was last modified.
	ModifiedTime *Timestamp `json:"modified_time,omitempty"`
	// The time when the finding was last modified.
	ModifiedTimeDt *time.Time `json:"modified_time_dt,omitempty"`
	// The unique identifier of the product that reported the finding.
	ProductUid *string `json:"product_uid,omitempty"`
	// Describes events related to a finding or detection as identified by the security product.
	RelatedEvents []*RelatedEvent `json:"related_events,omitempty"`
	// The remediation recommendations on how to fix the identified issue(s).
	Remediation *Remediation `json:"remediation,omitempty"`
	// The URL pointing to the source of the finding.
	SrcUrl *UrlString `json:"src_url,omitempty"`
	// Additional data supporting a finding as provided by security tool
	SupportingData interface{} `json:"supporting_data,omitempty"`
	// The title of the reported finding.
	Title string `json:"title"`
	// One or more types of the reported finding.
	Types []string `json:"types,omitempty"`
	// The unique identifier of the reported finding.
	Uid string `json:"uid"`
}

// The Fingerprint object provides detailed information about a digital fingerprint, which is a compact representation of data used to identify a longer piece of information, such as a public key or file content. It contains the algorithm and value of the fingerprint, enabling efficient and reliable identification of the associated data.
type Fingerprint struct {
	// The hash algorithm used to create the digital fingerprint, normalized to the caption of 'algorithm_id'. In the case of 'Other', it is defined by the event source.
	Algorithm *string `json:"algorithm,omitempty"`
	// The identifier of the normalized hash algorithm, which was used to create the digital fingerprint.
	AlgorithmId FingerprintAlgorithmId `json:"algorithm_id"`
	// The digital fingerprint value.
	Value FileHash `json:"value"`
}

// FingerprintAlgorithmId is an enum, and the following values are allowed.
// 0 - Unknown
// 1 - MD5: MD5 message-digest algorithm producing a 128-bit (16-byte) hash value.
// 2 - 1: Secure Hash Algorithm 1 producing a 160-bit (20-byte) hash value.
// 3 - 256: Secure Hash Algorithm 2 producing a 256-bit (32-byte) hash value.
// 4 - 512: Secure Hash Algorithm 2 producing a 512-bit (64-byte) hash value.
// 5 - CTPH: The ssdeep generated fuzzy checksum. Also known as Context Triggered Piecewise Hash (CTPH).
// 6 - TLSH: The TLSH fuzzy hashing algorithm.
// 7 - quickXorHash: Microsoft simple non-cryptographic hash algorithm that works by XORing the bytes in a circular-shifting fashion.
// 99 - Other
type FingerprintAlgorithmId = int

// The Group object represents a collection or association of entities, such as users, policies, or devices. It serves as a logical grouping mechanism to organize and manage entities with similar characteristics or permissions within a system or organization.
type Group struct {
	// The group description.
	Desc *string `json:"desc,omitempty"`
	// The group name.
	Name *string `json:"name,omitempty"`
	// The group privileges.
	Privileges []string `json:"privileges,omitempty"`
	// The type of the group or account.
	Type *string `json:"type,omitempty"`
	// The unique identifier of the group. For example, for Windows events this is the security identifier (SID) of the group.
	Uid *string `json:"uid,omitempty"`
}

// The Image object provides a description of a specific Virtual Machine (VM) or Container image. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:ContainerImage/'>d3f:ContainerImage</a>.
type Image struct {
	// The image labels.
	Labels []string `json:"labels,omitempty"`
	// The image name. For example: <code>elixir</code>.
	Name *string `json:"name,omitempty"`
	// The full path to the image file.
	Path *string `json:"path,omitempty"`
	// The image tag. For example: <code>1.11-alpine</code>.
	Tag *string `json:"tag,omitempty"`
	// The unique image ID. For example: <code>77af4d6b9913</code>.
	Uid string `json:"uid"`
}

// The Kill Chain object represents a single phase of a cyber attack, including the initial reconnaissance and planning stages up to the final objective of the attacker. It provides a detailed description of each phase and its associated activities within the broader context of a cyber attack. See <a target='_blank' href='https://www.lockheedmartin.com/en-us/capabilities/cyber/cyber-kill-chain.html'>Cyber Kill Chain®</a>.
type KillChain struct {
	// The cyber kill chain phase.
	Phase *string `json:"phase,omitempty"`
	// The cyber kill chain phase identifier.
	PhaseId KillChainPhaseId `json:"phase_id"`
}

// KillChainPhaseId is an enum, and the following values are allowed.
// 0 - Unknown: The kill chain phase is unknown.
// 1 - Reconnaissance: The attackers pick a target and perform a detailed analysis, start collecting information (email addresses, conferences information, etc.) and evaluate the victim’s vulnerabilities to determine how to exploit them.
// 2 - Weaponization: The attackers develop a malware weapon and aim to exploit the discovered vulnerabilities.
// 3 - Delivery: The intruders will use various tactics, such as phishing, infected USB drives, etc.
// 4 - Exploitation: The intruders start leveraging vulnerabilities to executed code on the victim’s system.
// 5 - Installation: The intruders install malware on the victim’s system.
// 6 - Control: Malware opens a command channel to enable the intruders to remotely manipulate the victim's system.
// 7 - ActionsonObjectives: With hands-on keyboard access, intruders accomplish the mission’s goal.
// 99 - Other
type KillChainPhaseId = int

// The Malware object describes the classification of known malicious software, which is intentionally designed to cause damage to a computer, server, client, or computer network.
type Malware struct {
	// The list of normalized identifiers of the malware classifications. Reference: <a target='_blank' href='https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_oxlc4df65spl'>STIX Malware Types</a>
	ClassificationIds []MalwareClassificationIds `json:"classification_ids,omitempty"`
	// The list of malware classifications, normalized to the captions of the classification_id values. In the case of 'Other', they are defined by the event source.
	Classifications []string `json:"classifications,omitempty"`
	// List of Common Vulnerabilities and Exposures (<a target='_blank' href='https://cve.mitre.org/'>CVE</a>).
	Cves []*Cve `json:"cves,omitempty"`
	// The malware name, as reported by the detection engine.
	Name *string `json:"name,omitempty"`
	// The filesystem path of the malware that was observed.
	Path *string `json:"path,omitempty"`
	// The provider of the malware information.
	Provider *string `json:"provider,omitempty"`
	// The malware unique identifier, as reported by the detection engine. For example a virus id or an IPS signature id.
	Uid *string `json:"uid,omitempty"`
}

// MalwareClassificationIds is an enum, and the following values are allowed.
// 0 - Unknown
// 1 - Adware
// 2 - Backdoor
// 3 - Bot
// 4 - Bootkit
// 5 - DDOS
// 6 - Downloader
// 7 - Dropper
// 8 - Kit
// 9 - Keylogger
// 10 - Ransomware
// 11 - Access_Trojan
// 13 - Exploitation
// 14 - Security_Software
// 15 - Rootkit
// 16 - Capture
// 17 - Spyware
// 18 - Trojan
// 19 - Virus
// 20 - Webshell
// 21 - Wiper
// 22 - Worm
// 99 - Other
type MalwareClassificationIds = int

// The Metadata object describes the metadata associated with the event. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Metadata/'>d3f:Metadata</a>.
type Metadata struct {
	// The unique identifier used to correlate events.
	CorrelationUid *string `json:"correlation_uid,omitempty"`
	// The Event ID or Code that the product uses to describe the event.
	EventCode *string `json:"event_code,omitempty"`
	// The schema extension used to create the event.
	Extension *Extension `json:"extension,omitempty"`
	// <p>The list of category labels attached to the event or specific attributes. Labels are user defined tags or aliases added at normalization time.</p>For example: <code>["network", "connection.ip:destination", "device.ip:source"]</code>
	Labels []string `json:"labels,omitempty"`
	// The event log name. For example, syslog file name or Windows logging subsystem: Security.
	LogName *string `json:"log_name,omitempty"`
	// The logging provider or logging service that logged the event. For example, Microsoft-Windows-Security-Auditing.
	LogProvider *string `json:"log_provider,omitempty"`
	// The event log schema version that specifies the format of the original event. For example syslog version or Cisco Log Schema Version.
	LogVersion *string `json:"log_version,omitempty"`
	// <p>The time when the logging system collected and logged the event.</p>This attribute is distinct from the event time in that event time typically contain the time extracted from the original event. Most of the time, these two times will be different.
	LoggedTime *Timestamp `json:"logged_time,omitempty"`
	// <p>The time when the logging system collected and logged the event.</p>This attribute is distinct from the event time in that event time typically contain the time extracted from the original event. Most of the time, these two times will be different.
	LoggedTimeDt *time.Time `json:"logged_time_dt,omitempty"`
	// The time when the event was last modified or enriched.
	ModifiedTime *Timestamp `json:"modified_time,omitempty"`
	// The time when the event was last modified or enriched.
	ModifiedTimeDt *time.Time `json:"modified_time_dt,omitempty"`
	// The original event time as reported by the event source. For example, the time in the original format from system event log such as Syslog on Unix/Linux and the System event file on Windows. Omit if event is generated instead of collected via logs.
	OriginalTime *string `json:"original_time,omitempty"`
	// The event processed time, such as an ETL operation.
	ProcessedTime *Timestamp `json:"processed_time,omitempty"`
	// The event processed time, such as an ETL operation.
	ProcessedTimeDt *time.Time `json:"processed_time_dt,omitempty"`
	// The product that reported the event.
	Product *Product `json:"product,omitempty"`
	// The list of profiles used to create the event.
	Profiles []string `json:"profiles,omitempty"`
	// Sequence number of the event. The sequence number is a value available in some events, to make the exact ordering of events unambiguous, regardless of the event time precision.
	Sequence *int `json:"sequence,omitempty"`
	// The logging system-assigned unique identifier of an event instance.
	Uid *string `json:"uid,omitempty"`
	// The version of the OCSF schema, using Semantic Versioning Specification (<a target='_blank' href='https://semver.org'>SemVer</a>). For example: 1.0.0. Event consumers use the version to determine the available event attributes.
	Version string `json:"version"`
}

// The Metric object defines a simple name/value pair entity for a metric.
type Metric struct {
	// The name of the metric.
	Name string `json:"name"`
	// The value of the metric.
	Value string `json:"value"`
}

// An unordered collection of attributes. It defines a set of attributes available in all objects. It can be also used as a generic object to log objects that are not otherwise defined by the schema.
type Object struct {
}

// The observable object is a pivot element that contains related information found in many places in the event.
type Observable struct {
	// The full name of the observable attribute. The <code>name</code> is a pointer/reference to an attribute within the event data. For example: <code>file.name</code>.
	Name string `json:"name"`
	// Contains the original and normalized reputation scores.
	Reputation *Reputation `json:"reputation,omitempty"`
	// The observable value type name.
	Type *string `json:"type,omitempty"`
	// The observable value type identifier.
	TypeId ObservableTypeId `json:"type_id"`
	// The value associated with the observable attribute. The meaning of the value depends on the observable type.<br/>If the <code>name</code> refers to a scalar attribute, then the <code>value</code> is the value of the attribute.<br/>If the <code>name</code> refers to an object attribute, then the <code>value</code> is not populated.
	Value *string `json:"value,omitempty"`
}

// ObservableTypeId is an enum, and the following values are allowed.
// 0 - Unknown: Unknown observable data type.
// 1 - Hostname: Unique name assigned to a device connected to a computer network. A domain name in general is an Internet address that can be resolved through the Domain Name System (DNS). For example: <code>r2-d2.example.com</code>.
// 2 - IPAddress: Internet Protocol address (IP address), in either IPv4 or IPv6 format.
// 3 - MACAddress: Media Access Control (MAC) address. For example: <code>18:36:F3:98:4F:9A</code>.
// 4 - UserName: User name. For example: <code>john_doe</code>.
// 5 - EmailAddress: Email address. For example: <code>john_doe@example.com</code>.
// 6 - URLString: Uniform Resource Locator (URL) string. For example: <code>http://www.example.com/download/trouble.exe</code>.
// 7 - FileName: File name. For example: <code>text-file.txt</code>.
// 8 - FileHash: File hash. A unique value that corresponds to the content of the file.
// 9 - ProcessName: Process name. For example: <code>Notepad</code>.
// 10 - ResourceUID: Resource unique identifier. For example, S3 Bucket name or EC2 Instance ID.
// 20 - Endpoint: The Endpoint object describes a physical or virtual device that connects to and exchanges information with a computer network. Some examples of endpoints are mobile devices, desktop computers, virtual machines, embedded devices, and servers. Internet-of-Things devices—like cameras, lighting, refrigerators, security systems, smart speakers, and thermostats—are also endpoints.
// 21 - User: The User object describes the characteristics of a user/person or a security principal. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:UserAccount/'>d3f:UserAccount</a>.
// 22 - Email: The Email object describes the email metadata such as sender, recipients, and direction. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Email/'>d3f:Email</a>.
// 23 - UniformResourceLocator: The Uniform Resource Locator(URL) object describes the characteristics of a URL. Defined in <a target='_blank' href='https://datatracker.ietf.org/doc/html/rfc1738'>RFC 1738</a> and by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:URL/'>d3f:URL</a>.
// 24 - File: The File object represents the metadata associated with a file stored in a computer system. It encompasses information about the file itself, including its attributes, properties, and organizational details. Defined by D3FEND <a target='_blank' href='https://next.d3fend.mitre.org/dao/artifact/d3f:File/'>d3f:File</a>.
// 25 - Process: The Process object describes a running instance of a launched program. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Process/'>d3f:Process</a>.
// 26 - GeoLocation: The Geo Location object describes a geographical location, usually associated with an IP address. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:PhysicalLocation/'>d3f:PhysicalLocation</a>.
// 27 - Container: The Container object describes an instance of a specific container. A container is a prepackaged, portable system image that runs isolated on an existing system using a container runtime like containerd.
// 28 - RegistryKey: The registry key object describes a Windows registry key. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:WindowsRegistryKey/'>d3f:WindowsRegistryKey</a>.
// 29 - RegistryValue: The registry value object describes a Windows registry value.
// 30 - Fingerprint: The Fingerprint object provides detailed information about a digital fingerprint, which is a compact representation of data used to identify a longer piece of information, such as a public key or file content. It contains the algorithm and value of the fingerprint, enabling efficient and reliable identification of the associated data.
// 99 - Other: The observable data type is not mapped. See the <code>type</code> attribute, which may contain data source specific value.
type ObservableTypeId = int

// The Organization object describes characteristics of an organization or company and its division if any.
type Organization struct {
	// The name of the organization. For example, Widget, Inc.
	Name *string `json:"name,omitempty"`
	// The name of the organizational unit, within an organization.  For example, Finance, IT, R&D
	OuName *string `json:"ou_name,omitempty"`
	// The alternate identifier for an entity's unique identifier. For example, its Active Directory OU DN or AWS OU ID.
	OuUid *string `json:"ou_uid,omitempty"`
	// The unique identifier of the organization. For example, its Active Directory or AWS Org ID.
	Uid *string `json:"uid,omitempty"`
}

// The Software Package object describes details about a software package. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:SoftwarePackage/'>d3f:SoftwarePackage</a>.
type Package struct {
	// Architecture is a shorthand name describing the type of computer hardware the packaged software is meant to run on.
	Architecture *string `json:"architecture,omitempty"`
	// The software package epoch. Epoch is a way to define weighted dependencies based on version numbers.
	Epoch *int `json:"epoch,omitempty"`
	// The software license applied to this package.
	License *string `json:"license,omitempty"`
	// The software package name.
	Name string `json:"name"`
	// Release is the number of times a version of the software has been packaged.
	Release *string `json:"release,omitempty"`
	// The software package version.
	Version string `json:"version"`
}

// The Process object describes a running instance of a launched program. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Process/'>d3f:Process</a>.
type Process struct {
	// The audit user assigned at login by the audit subsystem.
	Auid *int `json:"auid,omitempty"`
	// The full command line used to launch an application, service, process, or job. For example: <code>ssh user@10.0.0.10</code>. If the command line is unavailable or missing, the empty string <code>”</code> is to be used
	CmdLine *string `json:"cmd_line,omitempty"`
	// The information describing an instance of a container. A container is a prepackaged, portable system image that runs isolated on an existing system using a container runtime like containerd.
	Container *Container `json:"container,omitempty"`
	// The time when the process was created/started.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The time when the process was created/started.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The effective group under which this process is running.
	Egid *int `json:"egid,omitempty"`
	// The effective user under which this process is running.
	Euid *int `json:"euid,omitempty"`
	// The process file object.
	File *File `json:"file,omitempty"`
	// The group under which this process is running.
	Group *Group `json:"group,omitempty"`
	// The process integrity level, normalized to the caption of the direction_id value. In the case of 'Other', it is defined by the event source (Windows only).
	Integrity *string `json:"integrity,omitempty"`
	// The normalized identifier of the process integrity level (Windows only).
	IntegrityId *ProcessIntegrityId `json:"integrity_id,omitempty"`
	// The lineage of the process, represented by a list of paths for each ancestor process. For example: <code>['/usr/sbin/sshd', '/usr/bin/bash', '/usr/bin/whoami']</code>
	Lineage []string `json:"lineage,omitempty"`
	// The list of loaded module names.
	LoadedModules []string `json:"loaded_modules,omitempty"`
	// The friendly name of the process, for example: <code>Notepad++</code>.
	Name *ProcessName `json:"name,omitempty"`
	// If running under a process namespace (such as in a container), the process identifier within that process namespace.
	NamespacePid *int `json:"namespace_pid,omitempty"`
	// The parent process of this process object. It is recommended to only populate this field for the first process object, to prevent deep nesting.
	ParentProcess *Process `json:"parent_process,omitempty"`
	// The process identifier, as reported by the operating system. Process ID (PID) is a number used by the operating system to uniquely identify an active process.
	Pid *int `json:"pid,omitempty"`
	// The name of the containment jail (i.e., sandbox). For example, hardened_ps, high_security_ps, oracle_ps, netsvcs_ps, or default_ps.
	Sandbox *string `json:"sandbox,omitempty"`
	// The user session under which this process is running.
	Session *Session `json:"session,omitempty"`
	// The time when the process was terminated.
	TerminatedTime *Timestamp `json:"terminated_time,omitempty"`
	// The time when the process was terminated.
	TerminatedTimeDt *time.Time `json:"terminated_time_dt,omitempty"`
	// The Identifier of the thread associated with the event, as returned by the operating system.
	Tid *int `json:"tid,omitempty"`
	// A unique identifier for this process assigned by the producer (tool).  Facilitates correlation of a process event with other events for that process.
	Uid *string `json:"uid,omitempty"`
	// The user under which this process is running.
	User *User `json:"user,omitempty"`
	// An unordered collection of zero or more name/value pairs that represent a process extended attribute.
	Xattributes *Object `json:"xattributes,omitempty"`
}

// ProcessIntegrityId is an enum, and the following values are allowed.
// 0 - Unknown
// 1 - Untrusted
// 2 - Low
// 3 - Medium
// 4 - High
// 5 - System
// 6 - Protected
// 99 - Other
type ProcessIntegrityId = int

// The Product object describes characteristics of a software product.
type Product struct {
	// The feature that reported the event.
	Feature *Feature `json:"feature,omitempty"`
	// The two letter lower case language codes, as defined by <a target='_blank' href='https://en.wikipedia.org/wiki/ISO_639-1'>ISO 639-1</a>. For example: <code>en</code> (English), <code>de</code> (German), or <code>fr</code> (French).
	Lang *string `json:"lang,omitempty"`
	// The name of the product.
	Name *string `json:"name,omitempty"`
	// The installation path of the product.
	Path *string `json:"path,omitempty"`
	// The unique identifier of the product.
	Uid *string `json:"uid,omitempty"`
	// The URL pointing towards the product.
	UrlString *UrlString `json:"url_string,omitempty"`
	// The name of the vendor of the product.
	VendorName string `json:"vendor_name"`
	// The version of the product, as defined by the event source. For example: <code>2013.1.3-beta</code>.
	Version *string `json:"version,omitempty"`
}

// The Related Event object describes an event related to a finding or detection as identified by the security product.
type RelatedEvent struct {
	// The unique identifier of the product that reported the related event.
	ProductUid *string `json:"product_uid,omitempty"`
	// The type of the related event. For example: Process Activity: Launch.
	Type *string `json:"type,omitempty"`
	// The unique identifier of the related event type. For example: 100701.
	TypeUid *int `json:"type_uid,omitempty"`
	// The unique identifier of the related event.
	Uid string `json:"uid"`
}

// The Remediation object describes details about recommended remediation strategies.
type Remediation struct {
	// The description of the remediation strategy.
	Desc *string `json:"desc,omitempty"`
	// The KB article/s related to the entity
	KbArticles []string `json:"kb_articles,omitempty"`
}

// The Reputation object describes the reputation/risk score of an entity (e.g. device, user, domain).
type Reputation struct {
	// The reputation score as reported by the event source.
	BaseScore float64 `json:"base_score"`
	// The provider of the reputation information.
	Provider *string `json:"provider,omitempty"`
	// The reputation score, normalized to the caption of the score_id value. In the case of 'Other', it is defined by the event source.
	Score *string `json:"score,omitempty"`
	// The normalized reputation score identifier.
	ScoreId ReputationScoreId `json:"score_id"`
}

// ReputationScoreId is an enum, and the following values are allowed.
// 0 - Unknown: The reputation score is unknown.
// 1 - VerySafe: Long history of good behavior.
// 2 - Safe: Consistently good behavior.
// 3 - ProbablySafe: Reasonable history of good behavior.
// 4 - LeansSafe: Starting to establish a history of normal behavior.
// 5 - MaynotbeSafe: No established history of normal behavior.
// 6 - ExerciseCaution: Starting to establish a history of suspicious or risky behavior.
// 7 - Risky: A site with a history of suspicious or risky behavior. (spam, scam, potentially unwanted software, potentially malicious).
// 8 - PossiblyMalicious: Strong possibility of maliciousness.
// 9 - ProbablyMalicious: Indicators of maliciousness.
// 10 - Malicious: Proven evidence of maliciousness.
// 99 - Other: The reputation score is not mapped. See the <code>rep_score</code> attribute, which contains a data source specific value.
type ReputationScoreId = int

// The Request Elements object describes characteristics of an API request.
type Request struct {
	// The list of communication flags, normalized to the captions of the flag_ids values. In the case of 'Other', they are defined by the event source.
	Flags []string `json:"flags,omitempty"`
	// The unique request identifier.
	Uid string `json:"uid"`
}

// The Resource Details object describes details about resources that were affected by the activity/event.
type ResourceDetails struct {
	// The canonical cloud partition name to which the region is assigned (e.g. AWS Partitions: aws, aws-cn, aws-us-gov).
	CloudPartition *string `json:"cloud_partition,omitempty"`
	// The criticality of the resource as defined by the event source.
	Criticality *string `json:"criticality,omitempty"`
	// Additional data describing the resource.
	Data interface{} `json:"data,omitempty"`
	// The name of the related resource group.
	Group *Group `json:"group,omitempty"`
	// The list of labels/tags associated to a resource.
	Labels []string `json:"labels,omitempty"`
	// The name of the resource.
	Name *string `json:"name,omitempty"`
	// The identity of the service or user account that owns the resource.
	Owner *User `json:"owner,omitempty"`
	// The cloud region of the resource.
	Region *string `json:"region,omitempty"`
	// The resource type as defined by the event source.
	Type *string `json:"type,omitempty"`
	// The unique identifier of the resource.
	Uid *string `json:"uid,omitempty"`
	// The version of the resource. For example <code>1.2.3</code>.
	Version *string `json:"version,omitempty"`
}

// The Response Elements object describes characteristics of an API response.
type Response struct {
	// The numeric response sent to a request.
	Code *int `json:"code,omitempty"`
	// Error Code
	Error *string `json:"error,omitempty"`
	// Error Message
	ErrorMessage *string `json:"error_message,omitempty"`
	// The list of communication flags, normalized to the captions of the flag_ids values. In the case of 'Other', they are defined by the event source.
	Flags []string `json:"flags,omitempty"`
	// The description of the event, as defined by the event source.
	Message *string `json:"message,omitempty"`
}

// The Service object describes characteristics of a service, <code> e.g. AWS EC2. </code>
type Service struct {
	// The list of labels associated with the service.
	Labels []string `json:"labels,omitempty"`
	// The name of the service.
	Name *string `json:"name,omitempty"`
	// The unique identifier of the service.
	Uid *string `json:"uid,omitempty"`
	// The version of the service.
	Version *string `json:"version,omitempty"`
}

// The Session object describes details about an authenticated session. e.g. Session Creation Time, Session Issuer. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Session/'>d3f:Session</a>.
type Session struct {
	// The time when the session was created.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The time when the session was created.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The unique identifier of the user's credential. For example, AWS Access Key ID.
	CredentialUid *string `json:"credential_uid,omitempty"`
	// The session expiration time.
	ExpirationTime *Timestamp `json:"expiration_time,omitempty"`
	// The session expiration time.
	ExpirationTimeDt *time.Time `json:"expiration_time_dt,omitempty"`
	// The indication of whether the session is remote.
	IsRemote *bool `json:"is_remote,omitempty"`
	// The identifier of the session issuer.
	Issuer *string `json:"issuer,omitempty"`
	// The unique identifier of the session.
	Uid *string `json:"uid,omitempty"`
	// The universally unique identifier of the session.
	Uuid *string `json:"uuid,omitempty"`
}

// The Tactic object describes the tactic IDs and/or name that are associated with the attack technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>.
type Tactic struct {
	// The tactic name that is associated with the attack technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>.
	Name *string `json:"name,omitempty"`
	// The tactic ID that is associated with the attack technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>.
	Uid *string `json:"uid,omitempty"`
}

// The Technique object describes the technique related to an attack, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>.
type Technique struct {
	// The name of the attack technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>. For example: <code>Drive-by Compromise</code>.
	Name *string `json:"name,omitempty"`
	// The unique identifier of the attack technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>. For example: <code>T1189</code>.
	Uid *string `json:"uid,omitempty"`
}

// The User object describes the characteristics of a user/person or a security principal. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:UserAccount/'>d3f:UserAccount</a>.
type User struct {
	// The user's account or the account associated with the user.
	Account *Account `json:"account,omitempty"`
	// The unique identifier of the user's credential. For example, AWS Access Key ID.
	CredentialUid *string `json:"credential_uid,omitempty"`
	// The domain where the user is defined. For example: the LDAP or Active Directory domain.
	Domain *string `json:"domain,omitempty"`
	// The user's email address.
	EmailAddr *EmailAddress `json:"email_addr,omitempty"`
	// The full name of the person, as per the LDAP Common Name attribute (cn).
	FullName *string `json:"full_name,omitempty"`
	// The administrative groups to which the user belongs.
	Groups []*Group `json:"groups,omitempty"`
	// The username. For example, <code>janedoe1</code>.
	Name *UserName `json:"name,omitempty"`
	// Organization and org unit related to the user.
	Org *Organization `json:"org,omitempty"`
	// The type of the user. For example, System, AWS IAM User, etc.
	Type *string `json:"type,omitempty"`
	// The account type identifier.
	TypeId UserTypeId `json:"type_id"`
	// The unique user identifier. For example, the Windows user SID, ActiveDirectory DN or AWS user ARN.
	Uid *string `json:"uid,omitempty"`
	// The alternate user identifier. For example, the Active Directory user GUID or AWS user Principal ID.
	UidAlt *string `json:"uid_alt,omitempty"`
}

// UserTypeId is an enum, and the following values are allowed.
// 0 - Unknown: The type is unknown.
// 1 - User: Regular user account.
// 2 - Admin: Admin/root user account.
// 3 - System: System account. For example, Windows computer accounts with a trailing dollar sign ($).
// 99 - Other: The type is not mapped. See the <code>type</code> attribute, which may contain a data source specific value.
type UserTypeId = int

// The Vulnerability Details object describes characteristics of an observed vulnerability.
type Vulnerability struct {
	// The Common Vulnerabilities and Exposures (<a target='_blank' href='https://cve.mitre.org/'>CVE</a>).
	Cve *Cve `json:"cve,omitempty"`
	// The description of the vulnerability.
	Desc *string `json:"desc,omitempty"`
	// Indicates if a fix is available for the reported vulnerability.
	FixAvailable *bool `json:"fix_available,omitempty"`
	// The KB article/s related to the entity
	KbArticles []string `json:"kb_articles,omitempty"`
	// List of vulnerable packages as identified by the security product
	Packages []*Package `json:"packages,omitempty"`
	// Supporting reference URLs
	References []string `json:"references,omitempty"`
	// List of vulnerabilities that are related to this vulnerability.
	RelatedVulnerabilities []string `json:"related_vulnerabilities,omitempty"`
	// The event severity, normalized to the caption of the severity_id value. In the case of 'Other', it is defined by the event source.
	Severity *string `json:"severity,omitempty"`
	// The title of the vulnerability.
	Title *string `json:"title,omitempty"`
	// The vendor who identified the vulnerability.
	VendorName *string `json:"vendor_name,omitempty"`
}
