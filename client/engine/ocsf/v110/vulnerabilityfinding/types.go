// This file was auto-generated by Fern from our API Definition.

package vulnerabilityfinding

import (
	time "time"
)

// Email address. For example: <code>john_doe@example.com</code>.
type EmailAddress = string

// File name. For example: <code>text-file.txt</code>.
type FileName = string

// Hash. A unique value that corresponds to the content of the file, image, ja3_hash or hassh found in the schema. For example MD5: <code>3172ac7e2b55cbb81f04a6e65855a628</code>.
type Hash = string

// Unique name assigned to a device connected to a computer network. A domain name in general is an Internet address that can be resolved through the Domain Name System (DNS). For example: <code>r2-d2.example.com</code>.
type Hostname = string

// Internet Protocol address (IP address), in either IPv4 or IPv6 format. For example, <code>192.168.200.24</code> or <code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code>.
type IpAddress = string

// Media Access Control (MAC) address. For example: <code>18:36:F3:98:4F:9A</code>.
type MacAddress = string

// The TCP/UDP port number. For example: <code>80</code> or <code>22</code>.
type Port = int

// Process name. For example: <code>Notepad</code>.
type ProcessName = string

// Resource unique identifier. For example, S3 Bucket name or EC2 Instance ID.
type ResourceUid = string

// The subnet represented in a CIDR notation, using the format network_address/prefix_length. The network_address can be in either IPv4 or IPv6 format. The prefix length indicates the number of bits used for the network portion, and the remaining bits are available for host addresses within that subnet. <div>For example:<ul><li>192.168.1.0/24</li><li>2001:0db8:85a3:0000::/64</li></ul></div>
type Subnet = string

// The timestamp format is the number of milliseconds since the Epoch 01/01/1970 00:00:00 UTC. For example <code>1618524549901</code>.
type Timestamp = int

// Uniform Resource Locator (URL) string. For example: <code>http://www.example.com/download/trouble.exe</code>.
type UrlString = string

// User name. For example: <code>john_doe</code>.
type UserName = string

// ActivityId is an enum, and the following values are allowed.
// 0 - Unknown: The event activity is unknown.
// 1 - Create: A finding was created.
// 2 - Update: A finding was updated.
// 3 - Close: A finding was closed.
// 99 - Other: The event activity is not mapped. See the <code>activity_name</code> attribute, which contains a data source specific value.
type ActivityId = int

// CategoryUid is an enum, and the following values are allowed.
// 2 - Findings: Findings events report findings, detections, and possible resolutions of malware, anomalies, or other actions performed by security products.
type CategoryUid = int

// ClassUid is an enum, and the following values are allowed.
// 2002 - VulnerabilityFinding: The Vulnerability Finding event is a notification about weakness in an information system, system security procedures, internal controls, or implementation that could be exploited or triggered by a threat source.
type ClassUid = int

// ConfidenceId is an enum, and the following values are allowed.
// 0 - Unknown: The normalized confidence is unknown.
// 1 - Low
// 2 - Medium
// 3 - High
// 99 - Other: The confidence is not mapped to the defined enum values. See the <code>confidence</code> attribute, which contains a data source specific value.
type ConfidenceId = int

// SeverityId is an enum, and the following values are allowed.
// 0 - Unknown: The event/finding severity is unknown.
// 1 - Informational: Informational message. No action required.
// 2 - Low: The user decides if action is needed.
// 3 - Medium: Action is required but the situation is not serious at this time.
// 4 - High: Action is required immediately.
// 5 - Critical: Action is required immediately and the scope is broad.
// 6 - Fatal: An error occurred but it is too late to take remedial action.
// 99 - Other: The event/finding severity is not mapped. See the <code>severity</code> attribute, which contains a data source specific value.
type SeverityId = int

// StatusId is an enum, and the following values are allowed.
// 0 - Unknown: The status is unknown.
// 1 - New: The Finding is new and yet to be reviewed.
// 2 - InProgress: The Finding is under review.
// 3 - Suppressed: The Finding was reviewed, determined to be benign or a false positive and is now suppressed.
// 4 - Resolved: The Finding was reviewed, remediated and is now considered resolved.
// 99 - Other: The event status is not mapped. See the <code>status</code> attribute, which contains a data source specific value.
type StatusId = int

// TypeUid is an enum, and the following values are allowed.
// 200200 - Unknown
// 200201 - Create: A finding was created.
// 200202 - Update: A finding was updated.
// 200203 - Close: A finding was closed.
// 200299 - Other
type TypeUid = int

// The Vulnerability Finding event is a notification about weakness in an information system, system security procedures, internal controls, or implementation that could be exploited or triggered by a threat source.
type VulnerabilityFinding struct {
	// The normalized identifier of the finding activity.
	ActivityId ActivityId `json:"activity_id"`
	// The finding activity name, as defined by the <code>activity_id</code>.
	ActivityName *string `json:"activity_name,omitempty"`
	// The actor object describes details about the user/role/process that was the source of the activity.
	Actor *Actor `json:"actor,omitempty"`
	// Describes details about a typical API (Application Programming Interface) call.
	Api *Api `json:"api,omitempty"`
	// The event category name, as defined by category_uid value: <code>Findings</code>.
	CategoryName *string `json:"category_name,omitempty"`
	// The category unique identifier of the event.
	CategoryUid CategoryUid `json:"category_uid"`
	// The unique identifier of a class. A Class describes the attributes available in an event.
	ClassUid ClassUid `json:"class_uid"`
	// Describes details about the Cloud environment where the event was originally created or logged.
	Cloud *Cloud `json:"cloud,omitempty"`
	// A user provided comment about the finding.
	Comment *string `json:"comment,omitempty"`
	// The confidence, normalized to the caption of the confidence_id value. In the case of 'Other', it is defined by the event source.
	Confidence *string `json:"confidence,omitempty"`
	// The normalized confidence refers to the accuracy of the rule that created the finding. A rule with a low confidence means that the finding scope is wide and may create finding reports that may not be malicious in nature.
	ConfidenceId *ConfidenceId `json:"confidence_id,omitempty"`
	// The confidence score as reported by the event source.
	ConfidenceScore *int `json:"confidence_score,omitempty"`
	// The number of times that events in the same logical group occurred during the event <strong>Start Time</strong> to <strong>End Time</strong> period.
	Count *int `json:"count,omitempty"`
	// Describes the affected device/host. It can be used in conjunction with <code>Affected Resource(s)</code>. <p> e.g. Specific details about an AWS EC2 instance, that is affected by the Finding.</p>
	Device *Device `json:"device,omitempty"`
	// The event duration or aggregate time, the amount of time the event covers from <code>start_time</code> to <code>end_time</code> in milliseconds.
	Duration *int `json:"duration,omitempty"`
	// The time of the most recent event included in the finding.
	EndTime *Timestamp `json:"end_time,omitempty"`
	// The time of the most recent event included in the finding.
	EndTimeDt *time.Time `json:"end_time_dt,omitempty"`
	// The additional information from an external data source, which is associated with the event or a finding. For example add location information for the IP address in the DNS answers:</p><code>[{"name": "answers.ip", "value": "92.24.47.250", "type": "location", "data": {"city": "Socotra", "continent": "Asia", "coordinates": [-25.4153, 17.0743], "country": "YE", "desc": "Yemen"}}]</code>
	Enrichments []*Enrichment `json:"enrichments,omitempty"`
	// Describes the supporting information about a generated finding.
	FindingInfo *FindingInfo `json:"finding_info,omitempty"`
	// The description of the event/finding, as defined by the source.
	Message *string `json:"message,omitempty"`
	// The metadata associated with the event or a finding.
	Metadata *Metadata `json:"metadata,omitempty"`
	// The observables associated with the event or a finding.
	Observables []*Observable `json:"observables,omitempty"`
	// The raw event/finding data as received from the source.
	RawData *string `json:"raw_data,omitempty"`
	// Describes details about the resource that is affected by the vulnerability/vulnerabilities.
	Resource *ResourceDetails `json:"resource,omitempty"`
	// The event/finding severity, normalized to the caption of the severity_id value. In the case of 'Other', it is defined by the source.
	Severity *string `json:"severity,omitempty"`
	// <p>The normalized identifier of the event/finding severity.</p>The normalized severity is a measurement the effort and expense required to manage and resolve an event or incident. Smaller numerical values represent lower impact events, and larger numerical values represent higher impact events.
	SeverityId SeverityId `json:"severity_id"`
	// The time of the least recent event included in the finding.
	StartTime *Timestamp `json:"start_time,omitempty"`
	// The time of the least recent event included in the finding.
	StartTimeDt *time.Time `json:"start_time_dt,omitempty"`
	// The normalized status of the Finding set by the consumer normalized to the caption of the status_id value. In the case of 'Other', it is defined by the source.
	Status *string `json:"status,omitempty"`
	// The event status code, as reported by the event source.<br /><br />For example, in a Windows Failed Authentication event, this would be the value of 'Failure Code', e.g. 0x18.
	StatusCode *string `json:"status_code,omitempty"`
	// The status details contains additional information about the event/finding outcome.
	StatusDetail *string `json:"status_detail,omitempty"`
	// The normalized status identifier of the Finding, set by the consumer.
	StatusId *StatusId `json:"status_id,omitempty"`
	// The normalized event occurrence time or the finding creation time.
	Time Timestamp `json:"time"`
	// The normalized event occurrence time or the finding creation time.
	TimeDt *time.Time `json:"time_dt,omitempty"`
	// The number of minutes that the reported event <code>time</code> is ahead or behind UTC, in the range -1,080 to +1,080.
	TimezoneOffset *int `json:"timezone_offset,omitempty"`
	// The event/finding type name, as defined by the type_uid.
	TypeName *string `json:"type_name,omitempty"`
	// The event/finding type ID. It identifies the event's semantics and structure. The value is calculated by the logging system as: <code>class_uid \* 100 + activity_id</code>.
	TypeUid TypeUid `json:"type_uid"`
	// The attributes that are not mapped to the event schema. The names and values of those attributes are specific to the event source.
	Unmapped *Object `json:"unmapped,omitempty"`
	// This object describes vulnerabilities reported in a security finding.
	Vulnerabilities []*Vulnerability `json:"vulnerabilities,omitempty"`
}

// The Account object contains details about the account that initiated or performed a specific activity within a system or application.
type Account struct {
	// The name of the account (e.g. GCP Account Name).
	Name *string `json:"name,omitempty"`
	// The account type, normalized to the caption of 'account_type_id'. In the case of 'Other', it is defined by the event source.
	Type *string `json:"type,omitempty"`
	// The normalized account type identifier.
	TypeId *AccountTypeId `json:"type_id,omitempty"`
	// The unique identifier of the account (e.g. AWS Account ID).
	Uid *string `json:"uid,omitempty"`
}

// AccountTypeId is an enum, and the following values are allowed.
// 0 - Unknown: The account type is unknown.
// 1 - LDAPAccount
// 2 - WindowsAccount
// 3 - AWSIAMUser
// 4 - AWSIAMRole
// 5 - GCPAccount
// 6 - AzureADAccount
// 7 - MacOSAccount
// 8 - AppleAccount
// 9 - LinuxAccount
// 10 - AWSAccount
// 99 - Other: The account type is not mapped.
type AccountTypeId = int

// The Actor object contains details about the user, role, or process that initiated or performed a specific activity.
type Actor struct {
	// Provides details about an authorization, such as authorization outcome, and any associated policies related to the activity/event.
	Authorizations []*Authorization `json:"authorizations,omitempty"`
	// This object describes details about the Identity Provider used.
	Idp *Idp `json:"idp,omitempty"`
	// The name of the service that invoked the activity as described in the event.
	InvokedBy *string `json:"invoked_by,omitempty"`
	// The process that initiated the activity.
	Process *Process `json:"process,omitempty"`
	// The user session from which the activity was initiated.
	Session *Session `json:"session,omitempty"`
	// The user that initiated the activity or the user context from which the activity was initiated.
	User *User `json:"user,omitempty"`
}

// The Affected Code object describes details about a code block identified as vulnerable.
type AffectedCode struct {
	// The line number of the last line of code block identified as vulnerable.
	EndLine *int `json:"end_line,omitempty"`
	// Details about the file that contains the affected code block.
	File *File `json:"file,omitempty"`
	// Details about the user that owns the affected file.
	Owner *User `json:"owner,omitempty"`
	// Describes the recommended remediation steps to address identified issue(s).
	Remediation *Remediation `json:"remediation,omitempty"`
	// The line number of the first line of code block identified as vulnerable.
	StartLine *int `json:"start_line,omitempty"`
}

// The Affected Package object describes details about a software package identified as affected by a vulnerability/vulnerabilities.
type AffectedPackage struct {
	// Architecture is a shorthand name describing the type of computer hardware the packaged software is meant to run on.
	Architecture *string `json:"architecture,omitempty"`
	// The software package epoch. Epoch is a way to define weighted dependencies based on version numbers.
	Epoch *int `json:"epoch,omitempty"`
	// The software package version in which a reported vulnerability was patched/fixed.
	FixedInVersion *string `json:"fixed_in_version,omitempty"`
	// The software license applied to this package.
	License *string `json:"license,omitempty"`
	// The software package name.
	Name string `json:"name"`
	// The software packager manager utilized to manage a package on a system, e.g. npm, yum, dpkg etc.
	PackageManager *string `json:"package_manager,omitempty"`
	// The installation path of the affected package.
	Path *string `json:"path,omitempty"`
	// A purl is a URL string used to identify and locate a software package in a mostly universal and uniform way across programming languages, package managers, packaging conventions, tools, APIs and databases.
	Purl *string `json:"purl,omitempty"`
	// Release is the number of times a version of the software has been packaged.
	Release *string `json:"release,omitempty"`
	// Describes the recommended remediation steps to address identified issue(s).
	Remediation *Remediation `json:"remediation,omitempty"`
	// The software package version.
	Version string `json:"version"`
}

// The Analytic object contains details about the analytic technique used to analyze and derive insights from the data or information that led to the creation of a finding or conclusion.
type Analytic struct {
	// The analytic category.
	Category *string `json:"category,omitempty"`
	// The description of the analytic that generated the finding.
	Desc *string `json:"desc,omitempty"`
	// The name of the analytic that generated the finding.
	Name *string `json:"name,omitempty"`
	// Other analytics related to this analytic.
	RelatedAnalytics []*Object `json:"related_analytics,omitempty"`
	// The analytic type.
	Type *string `json:"type,omitempty"`
	// The analytic type ID.
	TypeId AnalyticTypeId `json:"type_id"`
	// The unique identifier of the analytic that generated the finding.
	Uid *string `json:"uid,omitempty"`
	// The analytic version. For example: <code>1.1</code>.
	Version *string `json:"version,omitempty"`
}

// AnalyticTypeId is an enum, and the following values are allowed.
// 0 - Unknown: The type is unknown.
// 1 - Rule
// 2 - Behavioral
// 3 - Statistical
// 4 - ML*DL*
// 99 - Other: The type is not mapped. See the <code>type</code> attribute, which contains a data source specific value.
type AnalyticTypeId = int

// The API, or Application Programming Interface, object represents information pertaining to an API request and response.
type Api struct {
	// The information pertaining to the API group.
	Group *Group `json:"group,omitempty"`
	// Verb/Operation associated with the request
	Operation string `json:"operation"`
	// Details pertaining to the API request.
	Request *Request `json:"request,omitempty"`
	// Details pertaining to the API response.
	Response *Response `json:"response,omitempty"`
	// The information pertaining to the API service.
	Service *Service `json:"service,omitempty"`
	// The version of the API service.
	Version *string `json:"version,omitempty"`
}

// The <a target='_blank' href='https://attack.mitre.org'>MITRE ATT&CK®</a> object describes the tactic, technique & sub-technique associated to an attack as defined in <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>.
type Attack struct {
	// The Sub Technique object describes the sub technique ID and/or name associated to an attack, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>.
	SubTechnique *SubTechnique `json:"sub_technique,omitempty"`
	// The Tactic object describes the tactic ID and/or name that is associated to an attack, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>.
	Tactic *Tactic `json:"tactic,omitempty"`
	// The Tactic object describes the tactic ID and/or tactic name that are associated with the attack technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>.
	Tactics []*Tactic `json:"tactics,omitempty"`
	// The Technique object describes the technique ID and/or name associated to an attack, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>.
	Technique *Technique `json:"technique,omitempty"`
	// The <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a> version.
	Version *string `json:"version,omitempty"`
}

// The Authorization Result object provides details about the authorization outcome and associated policies related to activity.
type Authorization struct {
	// Authorization Result/outcome, e.g. allowed, denied.
	Decision *string `json:"decision,omitempty"`
	// Details about the Identity/Access management policies that are applicable.
	Policy *Policy `json:"policy,omitempty"`
}

// The Digital Certificate, also known as a Public Key Certificate, object contains information about the ownership and usage of a public key. It serves as a means to establish trust in the authenticity and integrity of the public key and the associated entity. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Certificate/'>d3f:Certificate</a>.
type Certificate struct {
	// The time when the certificate was created.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The time when the certificate was created.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The expiration time of the certificate.
	ExpirationTime *Timestamp `json:"expiration_time,omitempty"`
	// The expiration time of the certificate.
	ExpirationTimeDt *time.Time `json:"expiration_time_dt,omitempty"`
	// The fingerprint list of the certificate.
	Fingerprints []*Fingerprint `json:"fingerprints,omitempty"`
	// The certificate issuer distinguished name.
	Issuer string `json:"issuer"`
	// The serial number of the certificate used to create the digital signature.
	SerialNumber string `json:"serial_number"`
	// The certificate subject distinguished name.
	Subject *string `json:"subject,omitempty"`
	// The unique identifier of the certificate.
	Uid *string `json:"uid,omitempty"`
	// The certificate version.
	Version *string `json:"version,omitempty"`
}

// The Cloud object contains information about a cloud account such as AWS Account ID, regions, etc.
type Cloud struct {
	// The account object describes details about the account that was the source or target of the activity.
	Account *Account `json:"account,omitempty"`
	// Organization and org unit relevant to the event or object.
	Org *Organization `json:"org,omitempty"`
	// The unique identifier of a Cloud project.
	ProjectUid *string `json:"project_uid,omitempty"`
	// The unique name of the Cloud services provider, such as AWS, MS Azure, GCP, etc.
	Provider string `json:"provider"`
	// The name of the cloud region, as defined by the cloud provider.
	Region *string `json:"region,omitempty"`
	// The availability zone in the cloud region, as defined by the cloud provider.
	Zone *string `json:"zone,omitempty"`
}

// The Container object describes an instance of a specific container. A container is a prepackaged, portable system image that runs isolated on an existing system using a container runtime like containerd.
type Container struct {
	// Commit hash of image created for docker or the SHA256 hash of the container. For example: <code>13550340a8681c84c861aac2e5b440161c2b33a3e4f302ac680ca5b686de48de</code>.
	Hash *Fingerprint `json:"hash,omitempty"`
	// The container image used as a template to run the container.
	Image *Image `json:"image,omitempty"`
	// The container name.
	Name *string `json:"name,omitempty"`
	// The network driver used by the container. For example, bridge, overlay, host, none, etc.
	NetworkDriver *string `json:"network_driver,omitempty"`
	// The orchestrator managing the container, such as ECS, EKS, K8s, or OpenShift.
	Orchestrator *string `json:"orchestrator,omitempty"`
	// The unique identifier of the pod (or equivalent) that the container is executing on.
	PodUuid *string `json:"pod_uuid,omitempty"`
	// The backend running the container, such as containerd or cri-o.
	Runtime *string `json:"runtime,omitempty"`
	// The size of the container image.
	Size *int `json:"size,omitempty"`
	// The tag used by the container. It can indicate version, format, OS.
	Tag *string `json:"tag,omitempty"`
	// The full container unique identifier for this instantiation of the container. For example: <code>ac2ea168264a08f9aaca0dfc82ff3551418dfd22d02b713142a6843caa2f61bf</code>.
	Uid *string `json:"uid,omitempty"`
}

// The Common Vulnerabilities and Exposures (CVE) object represents publicly disclosed cybersecurity vulnerabilities defined in CVE Program catalog (<a target='_blank' href='https://cve.mitre.org/'>CVE</a>). There is one CVE Record for each vulnerability in the catalog.
type Cve struct {
	// The Record Creation Date identifies when the CVE ID was issued to a CVE Numbering Authority (CNA) or the CVE Record was published on the CVE List. Note that the Record Creation Date does not necessarily indicate when this vulnerability was discovered, shared with the affected vendor, publicly disclosed, or updated in CVE.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The Record Creation Date identifies when the CVE ID was issued to a CVE Numbering Authority (CNA) or the CVE Record was published on the CVE List. Note that the Record Creation Date does not necessarily indicate when this vulnerability was discovered, shared with the affected vendor, publicly disclosed, or updated in CVE.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The CVSS object details Common Vulnerability Scoring System (<a target='_blank' href='https://www.first.org/cvss/'>CVSS</a>) scores from the advisory that are related to the vulnerability.
	Cvss []*Cvss `json:"cvss,omitempty"`
	// The CWE object represents a weakness in a software system that can be exploited by a threat actor to perform an attack. The CWE object is based on the <a target='_blank' href='https://cwe.mitre.org/'>Common Weakness Enumeration (CWE)</a> catalog.
	Cwe *Cwe `json:"cwe,omitempty"`
	// The <a target='_blank' href='https://cwe.mitre.org/'>Common Weakness Enumeration (CWE)</a> unique identifier. For example: <code>CWE-787</code>.
	CweUid *string `json:"cwe_uid,omitempty"`
	// Common Weakness Enumeration (CWE) definition URL. For example: <code>https://cwe.mitre.org/data/definitions/787.html</code>.
	CweUrl *UrlString `json:"cwe_url,omitempty"`
	// A brief description of the CVE Record.
	Desc *string `json:"desc,omitempty"`
	// The Exploit Prediction Scoring System (EPSS) object describes the estimated probability a vulnerability will be exploited. EPSS is a community-driven effort to combine descriptive information about vulnerabilities (CVEs) with evidence of actual exploitation in-the-wild. (<a target='_blank' href='https://www.first.org/epss/'>EPSS</a>).
	Epss *Epss `json:"epss,omitempty"`
	// The Record Modified Date identifies when the CVE record was last updated.
	ModifiedTime *Timestamp `json:"modified_time,omitempty"`
	// The Record Modified Date identifies when the CVE record was last updated.
	ModifiedTimeDt *time.Time `json:"modified_time_dt,omitempty"`
	// The product where the vulnerability was discovered.
	Product *Product `json:"product,omitempty"`
	// A list of reference URLs with additional information about the CVE Record.
	References []string `json:"references,omitempty"`
	// A title or a brief phrase summarizing the CVE record.
	Title *string `json:"title,omitempty"`
	// <p>The vulnerability type as selected from a large dropdown menu during CVE refinement.</p>Most frequently used vulnerability types are: <code>DoS</code>, <code>Code Execution</code>, <code>Overflow</code>, <code>Memory Corruption</code>, <code>Sql Injection</code>, <code>XSS</code>, <code>Directory Traversal</code>, <code>Http Response Splitting</code>, <code>Bypass something</code>, <code>Gain Information</code>, <code>Gain Privileges</code>, <code>CSRF</code>, <code>File Inclusion</code>. For more information see <a target='_blank' href='https://www.cvedetails.com/vulnerabilities-by-types.php'>Vulnerabilities By Type</a> distributions.
	Type *string `json:"type,omitempty"`
	// The Common Vulnerabilities and Exposures unique number assigned to a specific computer vulnerability. A CVE Identifier begins with 4 digits representing the year followed by a sequence of digits that acts as a unique identifier. For example: <code>CVE-2021-12345</code>.
	Uid string `json:"uid"`
}

// The Common Vulnerability Scoring System (<a target='_blank' href='https://www.first.org/cvss/'>CVSS</a>) object provides a way to capture the principal characteristics of a vulnerability and produce a numerical score reflecting its severity.
type Cvss struct {
	// The CVSS base score. For example: <code>9.1</code>.
	BaseScore float64 `json:"base_score"`
	// The CVSS depth represents a depth of the equation used to calculate CVSS score.
	Depth *CvssDepth `json:"depth,omitempty"`
	// The Common Vulnerability Scoring System metrics. This attribute contains information on the CVE's impact. If the CVE has been analyzed, this attribute will contain any CVSSv2 or CVSSv3 information associated with the vulnerability. For example: <code>{ {"Access Vector", "Network"}, {"Access Complexity", "Low"}, ...}</code>.
	Metrics []*Metric `json:"metrics,omitempty"`
	// The CVSS overall score, impacted by base, temporal, and environmental metrics. For example: <code>9.1</code>.
	OverallScore *float64 `json:"overall_score,omitempty"`
	// <p>The Common Vulnerability Scoring System (CVSS) Qualitative Severity Rating. A textual representation of the numeric score.</p><strong>CVSS v2.0</strong><ul><li>Low (0.0 – 3.9)</li><li>Medium (4.0 – 6.9)</li><li>High (7.0 – 10.0)</li></ul></p><strong>CVSS v3.0</strong><ul><li>None (0.0)</li><li>Low (0.1 - 3.9)</li><li>Medium (4.0 - 6.9)</li><li>High (7.0 - 8.9)</li><li>Critical (9.0 - 10.0)</li></ul>
	Severity *string `json:"severity,omitempty"`
	// The CVSS vector string is a text representation of a set of CVSS metrics. It is commonly used to record or transfer CVSS metric information in a concise form. For example: <code>3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H</code>.
	VectorString *string `json:"vector_string,omitempty"`
	// The CVSS version. For example: <code>3.1</code>.
	Version string `json:"version"`
}

// CvssDepth is an enum, and the following values are allowed.
// Base - Base
// Environmental - Environmental
// Temporal - Temporal
type CvssDepth = string

// The CWE object represents a weakness in a software system that can be exploited by a threat actor to perform an attack. The CWE object is based on the <a target='_blank' href='https://cwe.mitre.org/'>Common Weakness Enumeration (CWE)</a> catalog.
type Cwe struct {
	// The caption assigned to the Common Weakness Enumeration unique identifier.
	Caption *string `json:"caption,omitempty"`
	// URL pointing to the CWE Specification. For more information see <a target='_blank' href='https://cwe.mitre.org/'>CWE.</a>
	SrcUrl *UrlString `json:"src_url,omitempty"`
	// The Common Weakness Enumeration unique number assigned to a specific weakness. A CWE Identifier begins "CWE" followed by a sequence of digits that acts as a unique identifier. For example: <code>CWE-123</code>.
	Uid string `json:"uid"`
}

// The Device object represents an addressable computer system or host, which is typically connected to a computer network and participates in the transmission or processing of data within the computer network. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Host/'>d3f:Host</a>.
type Device struct {
	// The unique identifier of the cloud autoscale configuration.
	AutoscaleUid *string `json:"autoscale_uid,omitempty"`
	// The information describing an instance of a container. A container is a prepackaged, portable system image that runs isolated on an existing system using a container runtime like containerd.
	Container *Container `json:"container,omitempty"`
	// The time when the device was known to have been created.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The time when the device was known to have been created.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The description of the device, ordinarily as reported by the operating system.
	Desc *string `json:"desc,omitempty"`
	// The network domain where the device resides. For example: <code>work.example.com</code>.
	Domain *string `json:"domain,omitempty"`
	// The initial discovery time of the device.
	FirstSeenTime *Timestamp `json:"first_seen_time,omitempty"`
	// The initial discovery time of the device.
	FirstSeenTimeDt *time.Time `json:"first_seen_time_dt,omitempty"`
	// The group names to which the device belongs. For example: <code>["Windows Laptops", "Engineering"]<code/>.
	Groups []*Group `json:"groups,omitempty"`
	// The device hostname.
	Hostname *Hostname `json:"hostname,omitempty"`
	// The endpoint hardware information.
	HwInfo *DeviceHwInfo `json:"hw_info,omitempty"`
	// The name of the hypervisor running on the device. For example, <code>Xen</code>, <code>VMware</code>, <code>Hyper-V</code>, <code>VirtualBox</code>, etc.
	Hypervisor *string `json:"hypervisor,omitempty"`
	// The image used as a template to run the virtual machine.
	Image *Image `json:"image,omitempty"`
	// The International Mobile Station Equipment Identifier that is associated with the device.
	Imei *string `json:"imei,omitempty"`
	// The unique identifier of a VM instance.
	InstanceUid *string `json:"instance_uid,omitempty"`
	// The name of the network interface (e.g. eth2).
	InterfaceName *string `json:"interface_name,omitempty"`
	// The unique identifier of the network interface.
	InterfaceUid *string `json:"interface_uid,omitempty"`
	// The device IP address, in either IPv4 or IPv6 format.
	Ip *IpAddress `json:"ip,omitempty"`
	// The event occurred on a compliant device.
	IsCompliant *bool `json:"is_compliant,omitempty"`
	// The event occurred on a managed device.
	IsManaged *bool `json:"is_managed,omitempty"`
	// The event occurred on a personal device.
	IsPersonal *bool `json:"is_personal,omitempty"`
	// The event occurred on a trusted device.
	IsTrusted *bool `json:"is_trusted,omitempty"`
	// The most recent discovery time of the device.
	LastSeenTime *Timestamp `json:"last_seen_time,omitempty"`
	// The most recent discovery time of the device.
	LastSeenTimeDt *time.Time `json:"last_seen_time_dt,omitempty"`
	// The geographical location of the device.
	Location *Location `json:"location,omitempty"`
	// The Media Access Control (MAC) address of the endpoint.
	Mac *MacAddress `json:"mac,omitempty"`
	// The time when the device was last known to have been modified.
	ModifiedTime *Timestamp `json:"modified_time,omitempty"`
	// The time when the device was last known to have been modified.
	ModifiedTimeDt *time.Time `json:"modified_time_dt,omitempty"`
	// The alternate device name, ordinarily as assigned by an administrator. <p><b>Note:</b> The <b>Name</b> could be any other string that helps to identify the device, such as a phone number; for example <code>310-555-1234</code>.</p>
	Name *string `json:"name,omitempty"`
	// If running under a process namespace (such as in a container), the process identifier within that process namespace.
	NamespacePid *int `json:"namespace_pid,omitempty"`
	// The network interfaces that are associated with the device, one for each unique MAC address/IP address/hostname/name combination.<p><b>Note:</b> The first element of the array is the network information that pertains to the event.</p>
	NetworkInterfaces []*NetworkInterface `json:"network_interfaces,omitempty"`
	// Organization and org unit related to the device.
	Org *Organization `json:"org,omitempty"`
	// The endpoint operating system.
	Os *Os `json:"os,omitempty"`
	// The region where the virtual machine is located. For example, an AWS Region.
	Region *string `json:"region,omitempty"`
	// The risk level, normalized to the caption of the risk_level_id value. In the case of 'Other', it is defined by the event source.
	RiskLevel *string `json:"risk_level,omitempty"`
	// The normalized risk level id.
	RiskLevelId *DeviceRiskLevelId `json:"risk_level_id,omitempty"`
	// The risk score as reported by the event source.
	RiskScore *int `json:"risk_score,omitempty"`
	// The specific device type within the larger technology category
	SubType interface{} `json:"sub_type,omitempty"`
	// The subnet mask.
	Subnet *Subnet `json:"subnet,omitempty"`
	// The unique identifier of a virtual subnet.
	SubnetUid *string `json:"subnet_uid,omitempty"`
	// The list of software contained on a device
	SwInfo []*Product `json:"sw_info,omitempty"`
	// The device type. For example: <code>unknown</code>, <code>server</code>, <code>desktop</code>, <code>laptop</code>, <code>tablet</code>, <code>mobile</code>, <code>virtual</code>, <code>browser</code>, <code>plc</code>, <code>scada</code>, <code>dcs</code>, <code>cnc</code>, <code>scientific</code>, <code>medical</code>, <code>lighting</code>, <code>energy</code>, <code>transportation</code> <code>other</code>.
	Type *string `json:"type,omitempty"`
	// The device type ID.
	TypeId DeviceTypeId `json:"type_id"`
	// The unique identifier of the device. For example the Windows TargetSID or AWS EC2 ARN.
	Uid *string `json:"uid,omitempty"`
	// An alternate unique identifier of the device if any. For example the ActiveDirectory DN.
	UidAlt *string `json:"uid_alt,omitempty"`
	// The Virtual LAN identifier.
	VlanUid *string `json:"vlan_uid,omitempty"`
	// The unique identifier of the Virtual Private Cloud (VPC).
	VpcUid *string `json:"vpc_uid,omitempty"`
	// The network zone or LAN segment.
	Zone *string `json:"zone,omitempty"`
}

// The Device Hardware Information object contains details and specifications of the physical components that make up a device. This information provides an overview of the hardware capabilities, configuration, and characteristics of the device.
type DeviceHwInfo struct {
	// The BIOS date. For example: <code>03/31/16</code>.
	BiosDate *string `json:"bios_date,omitempty"`
	// The BIOS manufacturer. For example: <code>LENOVO</code>.
	BiosManufacturer *string `json:"bios_manufacturer,omitempty"`
	// The BIOS version. For example: <code>LENOVO G5ETA2WW (2.62)</code>.
	BiosVer *string `json:"bios_ver,omitempty"`
	// The chassis type describes the system enclosure or physical form factor. Such as the following examples for Windows <a target='_blank' href='https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-systemenclosure'>Windows Chassis Types</a>
	Chassis *string `json:"chassis,omitempty"`
	// The cpu architecture, the number of bits used for addressing in memory. For example: <code>32</code> or <code>64</code>.
	CpuBits *int `json:"cpu_bits,omitempty"`
	// The number of processor cores in all installed processors. For Example: <code>42</code>.
	CpuCores *int `json:"cpu_cores,omitempty"`
	// The number of physical processors on a system. For example: <code>1</code>.
	CpuCount *int `json:"cpu_count,omitempty"`
	// The speed of the processor in Mhz. For Example: <code>4200</code>.
	CpuSpeed *int `json:"cpu_speed,omitempty"`
	// The processor type. For example: <code>x86 Family 6 Model 37 Stepping 5</code>.
	CpuType *string `json:"cpu_type,omitempty"`
	// The desktop display affiliated with the event
	DesktopDisplay *Display `json:"desktop_display,omitempty"`
	// The keyboard detailed information.
	KeyboardInfo *KeyboardInfo `json:"keyboard_info,omitempty"`
	// The total amount of installed RAM, in Megabytes. For example: <code>2048</code>.
	RamSize *int `json:"ram_size,omitempty"`
	// The device manufacturer serial number.
	SerialNumber *string `json:"serial_number,omitempty"`
}

// DeviceRiskLevelId is an enum, and the following values are allowed.
// 0 - Info
// 1 - Low
// 2 - Medium
// 3 - High
// 4 - Critical
type DeviceRiskLevelId = int

// DeviceTypeId is an enum, and the following values are allowed.
// 0 - Unknown: The type is unknown.
// 1 - Server: A <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Server/'>server</a>.
// 2 - Desktop: A <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:DesktopComputer/'>desktop computer</a>.
// 3 - Laptop: A <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:LaptopComputer/'>laptop computer</a>.
// 4 - Tablet: A <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:TabletComputer/'>tablet computer</a>.
// 5 - Mobile: A <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:MobilePhone/'>mobile phone</a>.
// 6 - Virtual: A <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:VirtualizationSoftware/'>virtual machine</a>.
// 7 - IOT: A <a target='_blank' href='https://www.techtarget.com/iotagenda/definition/IoT-device'>IOT (Internet of Things) device</a>.
// 8 - Browser: A <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Browser/'>web browser</a>.
// 9 - Firewall: A <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Firewall/'>networking firewall</a>.
// 10 - Switch: A <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Switch/'>networking switch</a>.
// 11 - Hub: A <a target='_blank' href='https://en.wikipedia.org/wiki/Ethernet_hub'>networking hub</a>.
// 90 - PLC: A Programmable logic controller.
// 91 - SCADA: A supervisory control and data acquisition system.
// 92 - DCS: A distributed control system.
// 93 - CNC: A computer numerical control system, including computerized machine tools.
// 94 - ScientificEquipment: A piece of scientific equipment such as an oscilloscope or spectrometer.
// 95 - MedicalDevice: A medical device such as an MRI machine or infusion pump.
// 96 - LightingControls: A lighting control for internal or external applications.
// 97 - EnergyMonitoringSystem: An energy monitoring, security or safety system.
// 98 - TransportationDevice: A transportation device or transportation supporting device.
// 99 - Other: The type is not mapped. See the <code>type</code> attribute, which contains a data source specific value.
type DeviceTypeId = int

// The Digital Signature object contains information about the cryptographic mechanism used to verify the authenticity, integrity, and origin of the file or application.
type DigitalSignature struct {
	// The digital signature algorithm used to create the signature, normalized to the caption of 'algorithm_id'. In the case of 'Other', it is defined by the event source.
	Algorithm *string `json:"algorithm,omitempty"`
	// The identifier of the normalized digital signature algorithm.
	AlgorithmId DigitalSignatureAlgorithmId `json:"algorithm_id"`
	// The certificate object containing information about the digital certificate.
	Certificate *Certificate `json:"certificate,omitempty"`
	// The time when the digital signature was created.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The time when the digital signature was created.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The developer ID on the certificate that signed the file.
	DeveloperUid *string `json:"developer_uid,omitempty"`
	// The message digest attribute contains the fixed length message hash representation and the corresponding hashing algorithm information.
	Digest *Fingerprint `json:"digest,omitempty"`
}

// DigitalSignatureAlgorithmId is an enum, and the following values are allowed.
// 0 - Unknown: The algorithm is unknown.
// 1 - DSA: Digital Signature Algorithm (DSA).
// 2 - RSA: Rivest-Shamir-Adleman (RSA) Algorithm.
// 3 - ECDSA: Elliptic Curve Digital Signature Algorithm.
// 4 - Authenticode: Microsoft Authenticode Digital Signature Algorithm.
// 99 - Other: The algorithm is not mapped. See the <code>algorithm</code> attribute, which contains a data source specific value.
type DigitalSignatureAlgorithmId = int

// The Display object contains information about the physical or virtual display connected to a computer system.
type Display struct {
	// The numeric color depth.
	ColorDepth *int `json:"color_depth,omitempty"`
	// The numeric physical height of display.
	PhysicalHeight *int `json:"physical_height,omitempty"`
	// The numeric physical orientation of display.
	PhysicalOrientation *int `json:"physical_orientation,omitempty"`
	// The numeric physical width of display.
	PhysicalWidth *int `json:"physical_width,omitempty"`
	// The numeric scale factor of display.
	ScaleFactor *int `json:"scale_factor,omitempty"`
}

// The Enrichment object provides inline enrichment data for specific attributes of interest within an event. It serves as a mechanism to enhance or supplement the information associated with the event by adding additional relevant details or context.
type Enrichment struct {
	// The enrichment data associated with the attribute and value. The meaning of this data depends on the type the enrichment record.
	Data interface{} `json:"data,omitempty"`
	// The name of the attribute to which the enriched data pertains.
	Name string `json:"name"`
	// The enrichment data provider name.
	Provider *string `json:"provider,omitempty"`
	// The enrichment type. For example: <code>location</code>.
	Type *string `json:"type,omitempty"`
	// The value of the attribute to which the enriched data pertains.
	Value string `json:"value"`
}

// The Exploit Prediction Scoring System (EPSS) object describes the estimated probability a vulnerability will be exploited. EPSS is a community-driven effort to combine descriptive information about vulnerabilities (CVEs) with evidence of actual exploitation in-the-wild. (<a target='_blank' href='https://www.first.org/epss/'>EPSS</a>).
type Epss struct {
	// The timestamp indicating when the EPSS score was calculated.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The timestamp indicating when the EPSS score was calculated.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The EPSS score's percentile representing relative importance and ranking of the score in the larger EPSS dataset.
	Percentile *float64 `json:"percentile,omitempty"`
	// The EPSS score representing the probability [0-1] of exploitation in the wild in the next 30 days (following score publication).
	Score string `json:"score"`
	// The version of the EPSS model used to calculate the score.
	Version *string `json:"version,omitempty"`
}

// The OCSF Schema Extension object provides detailed information about the schema extension used to construct the event. The schema extensions are registered in the <a target='_blank' href='https://github.com/ocsf/ocsf-schema/blob/main/extensions.md'>extensions.md</a> file.
type Extension struct {
	// The schema extension name. For example: <code>dev</code>.
	Name string `json:"name"`
	// The schema extension unique identifier. For example: <code>999</code>.
	Uid string `json:"uid"`
	// The schema extension version. For example: <code>1.0.0-alpha.2</code>.
	Version string `json:"version"`
}

// The Feature object provides information about the software product feature that generated a specific event. It encompasses details related to the capabilities, components, user interface (UI) design, and performance upgrades associated with the feature.
type Feature struct {
	// The name of the feature.
	Name *string `json:"name,omitempty"`
	// The unique identifier of the feature.
	Uid *string `json:"uid,omitempty"`
	// The version of the feature.
	Version *string `json:"version,omitempty"`
}

// The File object represents the metadata associated with a file stored in a computer system. It encompasses information about the file itself, including its attributes, properties, and organizational details. Defined by D3FEND <a target='_blank' href='https://next.d3fend.mitre.org/dao/artifact/d3f:File/'>d3f:File</a>.
type File struct {
	// The time when the file was last accessed.
	AccessedTime *Timestamp `json:"accessed_time,omitempty"`
	// The time when the file was last accessed.
	AccessedTimeDt *time.Time `json:"accessed_time_dt,omitempty"`
	// The name of the user who last accessed the object.
	Accessor *User `json:"accessor,omitempty"`
	// The bitmask value that represents the file attributes.
	Attributes *int `json:"attributes,omitempty"`
	// The name of the company that published the file. For example: <code>Microsoft Corporation</code>.
	CompanyName *string `json:"company_name,omitempty"`
	// The file content confidentiality, normalized to the confidentiality_id value. In the case of 'Other', it is defined by the event source.
	Confidentiality *string `json:"confidentiality,omitempty"`
	// The normalized identifier of the file content confidentiality indicator.
	ConfidentialityId *FileConfidentialityId `json:"confidentiality_id,omitempty"`
	// The time when the file was created.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The time when the file was created.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The user that created the file.
	Creator *User `json:"creator,omitempty"`
	// The description of the file, as returned by file system. For example: the description as returned by the Unix file command or the Windows file type.
	Desc *string `json:"desc,omitempty"`
	// An array of hash attributes.
	Hashes []*Fingerprint `json:"hashes,omitempty"`
	// The indication of whether the object is part of the operating system.
	IsSystem *bool `json:"is_system,omitempty"`
	// The Multipurpose Internet Mail Extensions (MIME) type of the file, if applicable.
	MimeType *string `json:"mime_type,omitempty"`
	// The time when the file was last modified.
	ModifiedTime *Timestamp `json:"modified_time,omitempty"`
	// The time when the file was last modified.
	ModifiedTimeDt *time.Time `json:"modified_time_dt,omitempty"`
	// The user that last modified the file.
	Modifier *User `json:"modifier,omitempty"`
	// The name of the file. For example: <code>svchost.exe</code>
	Name FileName `json:"name"`
	// The user that owns the file/object.
	Owner *User `json:"owner,omitempty"`
	// The parent folder in which the file resides. For example: <code>c:\windows\system32</code>
	ParentFolder *string `json:"parent_folder,omitempty"`
	// The full path to the file. For example: <code>c:\windows\system32\svchost.exe</code>.
	Path *string `json:"path,omitempty"`
	// The product that created or installed the file.
	Product *Product `json:"product,omitempty"`
	// The object security descriptor.
	SecurityDescriptor *string `json:"security_descriptor,omitempty"`
	// The digital signature of the file.
	Signature *DigitalSignature `json:"signature,omitempty"`
	// The size of data, in bytes.
	Size *int `json:"size,omitempty"`
	// The file type.
	Type *string `json:"type,omitempty"`
	// The file type ID.
	TypeId FileTypeId `json:"type_id"`
	// The unique identifier of the file as defined by the storage system, such the file system file ID.
	Uid *string `json:"uid,omitempty"`
	// The file version. For example: <code>8.0.7601.17514</code>.
	Version *string `json:"version,omitempty"`
	// An unordered collection of zero or more name/value pairs where each pair represents a file or folder extended attribute.</p>For example: Windows alternate data stream attributes (ADS stream name, ADS size, etc.), user-defined or application-defined attributes, ACL, owner, primary group, etc. Examples from DCS: </p><ul><li><strong>ads_name</strong></li><li><strong>ads_size</strong></li><li><strong>dacl</strong></li><li><strong>owner</strong></li><li><strong>primary_group</strong></li><li><strong>link_name</strong> - name of the link associated to the file.</li><li><strong>hard_link_count</strong> - the number of links that are associated to the file.</li></ul>
	Xattributes *Object `json:"xattributes,omitempty"`
}

// FileConfidentialityId is an enum, and the following values are allowed.
// 0 - Unknown: The confidentiality is unknown.
// 1 - NotConfidential
// 2 - Confidential
// 3 - Secret
// 4 - TopSecret
// 99 - Other: The confidentiality is not mapped. See the <code>confidentiality</code> attribute, which contains a data source specific value.
type FileConfidentialityId = int

// FileTypeId is an enum, and the following values are allowed.
// 0 - Unknown: The type is unknown.
// 1 - RegularFile
// 2 - Folder
// 3 - CharacterDevice
// 4 - BlockDevice
// 5 - LocalSocket
// 6 - NamedPipe
// 7 - SymbolicLink
// 99 - Other: The type is not mapped. See the <code>type</code> attribute, which contains a data source specific value.
type FileTypeId = int

// The Finding Information object describes metadata related to a security finding generated by a security tool or system.
type FindingInfo struct {
	// The analytic technique used to analyze and derive insights from the data or information that led to the finding or conclusion.
	Analytic *Analytic `json:"analytic,omitempty"`
	// The <a target='_blank' href='https://attack.mitre.org'>MITRE ATT&CK®</a> technique and associated tactics related to the finding.
	Attacks []*Attack `json:"attacks,omitempty"`
	// The time when the finding was created.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The time when the finding was created.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// A list of data sources utilized in generation of the finding.
	DataSources []string `json:"data_sources,omitempty"`
	// The description of the reported finding.
	Desc *string `json:"desc,omitempty"`
	// The time when the finding was first observed. e.g. The time when a vulnerability was first observed. <p>It can differ from the <code>created_time</code> timestamp, which reflects the time this finding was created.</p>
	FirstSeenTime *Timestamp `json:"first_seen_time,omitempty"`
	// The time when the finding was first observed. e.g. The time when a vulnerability was first observed. <p>It can differ from the <code>created_time</code> timestamp, which reflects the time this finding was created.</p>
	FirstSeenTimeDt *time.Time `json:"first_seen_time_dt,omitempty"`
	// The <a target='_blank' href='https://www.lockheedmartin.com/en-us/capabilities/cyber/cyber-kill-chain.html'>Cyber Kill Chain®</a> provides a detailed description of each phase and its associated activities within the broader context of a cyber attack.
	KillChain []*KillChainPhase `json:"kill_chain,omitempty"`
	// The time when the finding was most recently observed. e.g. The time when a vulnerability was most recently observed. <p>It can differ from the <code>modified_time</code> timestamp, which reflects the time this finding was last modified.</p>
	LastSeenTime *Timestamp `json:"last_seen_time,omitempty"`
	// The time when the finding was most recently observed. e.g. The time when a vulnerability was most recently observed. <p>It can differ from the <code>modified_time</code> timestamp, which reflects the time this finding was last modified.</p>
	LastSeenTimeDt *time.Time `json:"last_seen_time_dt,omitempty"`
	// The time when the finding was last modified.
	ModifiedTime *Timestamp `json:"modified_time,omitempty"`
	// The time when the finding was last modified.
	ModifiedTimeDt *time.Time `json:"modified_time_dt,omitempty"`
	// The unique identifier of the product that reported the finding.
	ProductUid *string `json:"product_uid,omitempty"`
	// Other analytics related to this finding.
	RelatedAnalytics []*Analytic `json:"related_analytics,omitempty"`
	// Describes events and/or other findings related to the finding as identified by the security product.
	RelatedEvents []*RelatedEvent `json:"related_events,omitempty"`
	// The URL pointing to the source of the finding.
	SrcUrl *UrlString `json:"src_url,omitempty"`
	// A title or a brief phrase summarizing the reported finding.
	Title string `json:"title"`
	// One or more types of the reported finding.
	Types []string `json:"types,omitempty"`
	// The unique identifier of the reported finding.
	Uid string `json:"uid"`
}

// The Fingerprint object provides detailed information about a digital fingerprint, which is a compact representation of data used to identify a longer piece of information, such as a public key or file content. It contains the algorithm and value of the fingerprint, enabling efficient and reliable identification of the associated data.
type Fingerprint struct {
	// The hash algorithm used to create the digital fingerprint, normalized to the caption of 'algorithm_id'. In the case of 'Other', it is defined by the event source.
	Algorithm *string `json:"algorithm,omitempty"`
	// The identifier of the normalized hash algorithm, which was used to create the digital fingerprint.
	AlgorithmId FingerprintAlgorithmId `json:"algorithm_id"`
	// The digital fingerprint value.
	Value Hash `json:"value"`
}

// FingerprintAlgorithmId is an enum, and the following values are allowed.
// 0 - Unknown: The algorithm is unknown.
// 1 - MD5: MD5 message-digest algorithm producing a 128-bit (16-byte) hash value.
// 2 - 1: Secure Hash Algorithm 1 producing a 160-bit (20-byte) hash value.
// 3 - 256: Secure Hash Algorithm 2 producing a 256-bit (32-byte) hash value.
// 4 - 512: Secure Hash Algorithm 2 producing a 512-bit (64-byte) hash value.
// 5 - CTPH: The ssdeep generated fuzzy checksum. Also known as Context Triggered Piecewise Hash (CTPH).
// 6 - TLSH: The TLSH fuzzy hashing algorithm.
// 7 - quickXorHash: Microsoft simple non-cryptographic hash algorithm that works by XORing the bytes in a circular-shifting fashion.
// 99 - Other: The algorithm is not mapped. See the <code>algorithm</code> attribute, which contains a data source specific value.
type FingerprintAlgorithmId = int

// The Group object represents a collection or association of entities, such as users, policies, or devices. It serves as a logical grouping mechanism to organize and manage entities with similar characteristics or permissions within a system or organization.
type Group struct {
	// The group description.
	Desc *string `json:"desc,omitempty"`
	// The domain where the group is defined. For example: the LDAP or Active Directory domain.
	Domain *string `json:"domain,omitempty"`
	// The group name.
	Name *string `json:"name,omitempty"`
	// The group privileges.
	Privileges []string `json:"privileges,omitempty"`
	// The type of the group or account.
	Type *string `json:"type,omitempty"`
	// The unique identifier of the group. For example, for Windows events this is the security identifier (SID) of the group.
	Uid *string `json:"uid,omitempty"`
}

// The Identity Provider object contains detailed information about a provider responsible for creating, maintaining, and managing identity information while offering authentication services to applications. An Identity Provider (IdP) serves as a trusted authority that verifies the identity of users and issues authentication tokens or assertions to enable secure access to applications or services.
type Idp struct {
	// The name of the identity provider.
	Name *string `json:"name,omitempty"`
	// The unique identifier of the identity provider.
	Uid *string `json:"uid,omitempty"`
}

// The Image object provides a description of a specific Virtual Machine (VM) or Container image. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:ContainerImage/'>d3f:ContainerImage</a>.
type Image struct {
	// The image labels.
	Labels []string `json:"labels,omitempty"`
	// The image name. For example: <code>elixir</code>.
	Name *string `json:"name,omitempty"`
	// The full path to the image file.
	Path *string `json:"path,omitempty"`
	// The image tag. For example: <code>1.11-alpine</code>.
	Tag *string `json:"tag,omitempty"`
	// The unique image ID. For example: <code>77af4d6b9913</code>.
	Uid string `json:"uid"`
}

// The KB Article object contains metadata that describes the patch or update.
type KbArticle struct {
	// The kb article bulletin identifier.
	Bulletin *string `json:"bulletin,omitempty"`
	// The vendors classification of the kb article.
	Classification *string `json:"classification,omitempty"`
	// The date the kb article was released by the vendor.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The date the kb article was released by the vendor.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The kb article has been replaced by another.
	IsSuperseded *bool `json:"is_superseded,omitempty"`
	// The operating system the kb article applies.
	Os *Os `json:"os,omitempty"`
	// The product details the kb article applies.
	Product *Product `json:"product,omitempty"`
	// The severity of the kb article.
	Severity *string `json:"severity,omitempty"`
	// The size in bytes for the kb article.
	Size *int `json:"size,omitempty"`
	// The kb article link from the source vendor.
	SrcUrl *UrlString `json:"src_url,omitempty"`
	// The title of the kb article.
	Title *string `json:"title,omitempty"`
	// The unique identifier for the kb article.
	Uid string `json:"uid"`
}

// The Keyboard Information object contains details and attributes related to a computer or device keyboard. It encompasses information that describes the characteristics, capabilities, and configuration of the keyboard.
type KeyboardInfo struct {
	// The number of function keys on client keyboard.
	FunctionKeys *int `json:"function_keys,omitempty"`
	// The Input Method Editor (IME) file name.
	Ime *string `json:"ime,omitempty"`
	// The keyboard locale identifier name (e.g., en-US).
	KeyboardLayout *string `json:"keyboard_layout,omitempty"`
	// The keyboard numeric code.
	KeyboardSubtype *int `json:"keyboard_subtype,omitempty"`
	// The keyboard type (e.g., xt, ico).
	KeyboardType *string `json:"keyboard_type,omitempty"`
}

// The Kill Chain Phase object represents a single phase of a cyber attack, including the initial reconnaissance and planning stages up to the final objective of the attacker. It provides a detailed description of each phase and its associated activities within the broader context of a cyber attack. See <a target='_blank' href='https://www.lockheedmartin.com/en-us/capabilities/cyber/cyber-kill-chain.html'>Cyber Kill Chain®</a>.
type KillChainPhase struct {
	// The cyber kill chain phase.
	Phase *string `json:"phase,omitempty"`
	// The cyber kill chain phase identifier.
	PhaseId KillChainPhasePhaseId `json:"phase_id"`
}

// KillChainPhasePhaseId is an enum, and the following values are allowed.
// 0 - Unknown: The kill chain phase is unknown.
// 1 - Reconnaissance: The attackers pick a target and perform a detailed analysis, start collecting information (email addresses, conferences information, etc.) and evaluate the victim’s vulnerabilities to determine how to exploit them.
// 2 - Weaponization: The attackers develop a malware weapon and aim to exploit the discovered vulnerabilities.
// 3 - Delivery: The intruders will use various tactics, such as phishing, infected USB drives, etc.
// 4 - Exploitation: The intruders start leveraging vulnerabilities to executed code on the victim’s system.
// 5 - Installation: The intruders install malware on the victim’s system.
// 6 - Control: Malware opens a command channel to enable the intruders to remotely manipulate the victim's system.
// 7 - ActionsonObjectives: With hands-on keyboard access, intruders accomplish the mission’s goal.
// 99 - Other: The kill chain phase is not mapped. See the <code>phase</code> attribute, which contains a data source specific value.
type KillChainPhasePhaseId = int

// The additional LDAP attributes that describe a person.
type LdapPerson struct {
	// The cost center associated with the user.
	CostCenter *string `json:"cost_center,omitempty"`
	// The timestamp when the user was created.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The timestamp when the user was created.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The timestamp when the user was deleted. In Active Directory (AD), when a user is deleted they are moved to a temporary container and then removed after 30 days. So, this field can be populated even after a user is deleted for the next 30 days.
	DeletedTime *Timestamp `json:"deleted_time,omitempty"`
	// The timestamp when the user was deleted. In Active Directory (AD), when a user is deleted they are moved to a temporary container and then removed after 30 days. So, this field can be populated even after a user is deleted for the next 30 days.
	DeletedTimeDt *time.Time `json:"deleted_time_dt,omitempty"`
	// A list of additional email addresses for the user.
	EmailAddrs []EmailAddress `json:"email_addrs,omitempty"`
	// The employee identifier assigned to the user by the organization.
	EmployeeUid *string `json:"employee_uid,omitempty"`
	// The given or first name of the user.
	GivenName *string `json:"given_name,omitempty"`
	// The timestamp when the user was or will be hired by the organization.
	HireTime *Timestamp `json:"hire_time,omitempty"`
	// The timestamp when the user was or will be hired by the organization.
	HireTimeDt *time.Time `json:"hire_time_dt,omitempty"`
	// The user's job title.
	JobTitle *string `json:"job_title,omitempty"`
	// The labels associated with the user. For example in AD this could be the <code>userType</code>, <code>employeeType</code>. For example: <code>Member, Employee</code>.
	Labels []string `json:"labels,omitempty"`
	// The last time when the user logged in.
	LastLoginTime *Timestamp `json:"last_login_time,omitempty"`
	// The last time when the user logged in.
	LastLoginTimeDt *time.Time `json:"last_login_time_dt,omitempty"`
	// The LDAP and X.500 <code>commonName</code> attribute, typically the full name of the person. For example, <code>John Doe</code>.
	LdapCn *string `json:"ldap_cn,omitempty"`
	// The X.500 Distinguished Name (DN) is a structured string that uniquely identifies an entry, such as a user, in an X.500 directory service For example, <code>cn=John Doe,ou=People,dc=example,dc=com</code>.
	LdapDn *string `json:"ldap_dn,omitempty"`
	// The timestamp when the user left or will be leaving the organization.
	LeaveTime *Timestamp `json:"leave_time,omitempty"`
	// The timestamp when the user left or will be leaving the organization.
	LeaveTimeDt *time.Time `json:"leave_time_dt,omitempty"`
	// The geographical location associated with a user. This is typically the user's usual work location.
	Location *Location `json:"location,omitempty"`
	// The user's manager. This helps in understanding an org hierarchy. This should only ever be populated once in an event. I.e. there should not be a manager's manager in an event.
	Manager *User `json:"manager,omitempty"`
	// The timestamp when the user entry was last modified.
	ModifiedTime *Timestamp `json:"modified_time,omitempty"`
	// The timestamp when the user entry was last modified.
	ModifiedTimeDt *time.Time `json:"modified_time_dt,omitempty"`
	// The primary office location associated with the user. This could be any string and isn't a specific address. For example, <code>South East Virtual</code>.
	OfficeLocation *string `json:"office_location,omitempty"`
	// The last or family name for the user.
	Surname *string `json:"surname,omitempty"`
}

// The Geo Location object describes a geographical location, usually associated with an IP address. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:PhysicalLocation/'>d3f:PhysicalLocation</a>.
type Location struct {
	// The name of the city.
	City *string `json:"city,omitempty"`
	// The name of the continent.
	Continent *string `json:"continent,omitempty"`
	// A two-element array, containing a longitude/latitude pair. The format conforms with <a target='_blank' href='https://geojson.org'>GeoJSON</a>. For example: <code>[-73.983, 40.719]</code>.
	Coordinates []float64 `json:"coordinates,omitempty"`
	// The ISO 3166-1 Alpha-2 country code. For the complete list of country codes see <a target='_blank' href='https://www.iso.org/obp/ui/#iso:pub:PUB500001:en' >ISO 3166-1 alpha-2 codes</a>.<p><b>Note:</b> The two letter country code should be capitalized. For example: <code>US</code> or <code>CA</code>.</p>
	Country *string `json:"country,omitempty"`
	// The description of the geographical location.
	Desc *string `json:"desc,omitempty"`
	// The indication of whether the location is on premises.
	IsOnPremises *bool `json:"is_on_premises,omitempty"`
	// The name of the Internet Service Provider (ISP).
	Isp *string `json:"isp,omitempty"`
	// The postal code of the location.
	PostalCode *string `json:"postal_code,omitempty"`
	// The provider of the geographical location data.
	Provider *string `json:"provider,omitempty"`
	// The alphanumeric code that identifies the principal subdivision (e.g. province or state) of the country. Region codes are defined at <a target='_blank' href='https://www.iso.org/iso-3166-country-codes.html'>ISO 3166-2</a> and have a limit of three characters. For example, see <a target='_blank' href='https://www.iso.org/obp/ui/#iso:code:3166:US'>the region codes for the US</a>.
	Region *string `json:"region,omitempty"`
}

// The Logger object represents the device and product where events are stored with times for receipt and transmission. This may be at the source device where the event occurred, a remote scanning device, intermediate hops, or the ultimate destination.
type Logger struct {
	// The device where the events are logged.
	Device *Device `json:"device,omitempty"`
	// The audit level at which an event was generated.
	LogLevel *string `json:"log_level,omitempty"`
	// The event log name. For example, syslog file name or Windows logging subsystem: Security.
	LogName *string `json:"log_name,omitempty"`
	// The logging provider or logging service that logged the event. For example, Microsoft-Windows-Security-Auditing.
	LogProvider *string `json:"log_provider,omitempty"`
	// The event log schema version that specifies the format of the original event. For example syslog version or Cisco Log Schema Version.
	LogVersion *string `json:"log_version,omitempty"`
	// <p>The time when the logging system collected and logged the event.</p>This attribute is distinct from the event time in that event time typically contain the time extracted from the original event. Most of the time, these two times will be different.
	LoggedTime *Timestamp `json:"logged_time,omitempty"`
	// <p>The time when the logging system collected and logged the event.</p>This attribute is distinct from the event time in that event time typically contain the time extracted from the original event. Most of the time, these two times will be different.
	LoggedTimeDt *time.Time `json:"logged_time_dt,omitempty"`
	// The name of the logging product instance.
	Name *string `json:"name,omitempty"`
	// The product logging the event. This may be the event source product, a management server product, a scanning product, a SIEM, etc.
	Product *Product `json:"product,omitempty"`
	// The time when the event was transmitted from the logging device to it's next destination
	TransmitTime *Timestamp `json:"transmit_time,omitempty"`
	// The time when the event was transmitted from the logging device to it's next destination
	TransmitTimeDt *time.Time `json:"transmit_time_dt,omitempty"`
	// The unique identifier of the logging product instance.
	Uid *string `json:"uid,omitempty"`
	// The version of the logging product.
	Version *string `json:"version,omitempty"`
}

// The Metadata object describes the metadata associated with the event. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Metadata/'>d3f:Metadata</a>.
type Metadata struct {
	// The unique identifier used to correlate events.
	CorrelationUid *string `json:"correlation_uid,omitempty"`
	// The Event ID or Code that the product uses to describe the event.
	EventCode *string `json:"event_code,omitempty"`
	// The schema extension used to create the event.
	Extension *Extension `json:"extension,omitempty"`
	// The schema extensions used to create the event.
	Extensions []*Extension `json:"extensions,omitempty"`
	// <p>The list of category labels attached to the event or specific attributes. Labels are user defined tags or aliases added at normalization time.</p>For example: <code>["network", "connection.ip:destination", "device.ip:source"]</code>
	Labels []string `json:"labels,omitempty"`
	// The audit level at which an event was generated.
	LogLevel *string `json:"log_level,omitempty"`
	// The event log name. For example, syslog file name or Windows logging subsystem: Security.
	LogName *string `json:"log_name,omitempty"`
	// The logging provider or logging service that logged the event. For example, Microsoft-Windows-Security-Auditing.
	LogProvider *string `json:"log_provider,omitempty"`
	// The event log schema version that specifies the format of the original event. For example syslog version or Cisco Log Schema Version.
	LogVersion *string `json:"log_version,omitempty"`
	// <p>The time when the logging system collected and logged the event.</p>This attribute is distinct from the event time in that event time typically contain the time extracted from the original event. Most of the time, these two times will be different.
	LoggedTime *Timestamp `json:"logged_time,omitempty"`
	// <p>The time when the logging system collected and logged the event.</p>This attribute is distinct from the event time in that event time typically contain the time extracted from the original event. Most of the time, these two times will be different.
	LoggedTimeDt *time.Time `json:"logged_time_dt,omitempty"`
	// An array of Logger objects that describe the devices and logging products between the event source and its eventual destination. Note, this attribute can be used when there is a complex end-to-end path of event flow.
	Loggers []*Logger `json:"loggers,omitempty"`
	// The time when the event was last modified or enriched.
	ModifiedTime *Timestamp `json:"modified_time,omitempty"`
	// The time when the event was last modified or enriched.
	ModifiedTimeDt *time.Time `json:"modified_time_dt,omitempty"`
	// The original event time as reported by the event source. For example, the time in the original format from system event log such as Syslog on Unix/Linux and the System event file on Windows. Omit if event is generated instead of collected via logs.
	OriginalTime *string `json:"original_time,omitempty"`
	// The event processed time, such as an ETL operation.
	ProcessedTime *Timestamp `json:"processed_time,omitempty"`
	// The event processed time, such as an ETL operation.
	ProcessedTimeDt *time.Time `json:"processed_time_dt,omitempty"`
	// The product that reported the event.
	Product *Product `json:"product,omitempty"`
	// The list of profiles used to create the event.
	Profiles []string `json:"profiles,omitempty"`
	// Sequence number of the event. The sequence number is a value available in some events, to make the exact ordering of events unambiguous, regardless of the event time precision.
	Sequence *int `json:"sequence,omitempty"`
	// The unique tenant identifier.
	TenantUid *string `json:"tenant_uid,omitempty"`
	// The logging system-assigned unique identifier of an event instance.
	Uid *string `json:"uid,omitempty"`
	// The version of the OCSF schema, using Semantic Versioning Specification (<a target='_blank' href='https://semver.org'>SemVer</a>). For example: 1.0.0. Event consumers use the version to determine the available event attributes.
	Version string `json:"version"`
}

// The Metric object defines a simple name/value pair entity for a metric.
type Metric struct {
	// The name of the metric.
	Name string `json:"name"`
	// The value of the metric.
	Value string `json:"value"`
}

// The Network Interface object describes the type and associated attributes of a network interface.
type NetworkInterface struct {
	// The hostname associated with the network interface.
	Hostname *Hostname `json:"hostname,omitempty"`
	// The IP address associated with the network interface.
	Ip *IpAddress `json:"ip,omitempty"`
	// The MAC address of the network interface.
	Mac *MacAddress `json:"mac,omitempty"`
	// The name of the network interface.
	Name *string `json:"name,omitempty"`
	// The namespace is useful in merger or acquisition situations. For example, when similar entities exist that you need to keep separate.
	Namespace *string `json:"namespace,omitempty"`
	// The subnet prefix length determines the number of bits used to represent the network part of the IP address. The remaining bits are reserved for identifying individual hosts within that subnet.
	SubnetPrefix *int `json:"subnet_prefix,omitempty"`
	// The type of network interface.
	Type *string `json:"type,omitempty"`
	// The network interface type identifier.
	TypeId NetworkInterfaceTypeId `json:"type_id"`
	// The unique identifier for the network interface.
	Uid *string `json:"uid,omitempty"`
}

// NetworkInterfaceTypeId is an enum, and the following values are allowed.
// 0 - Unknown: The type is unknown.
// 1 - Wired
// 2 - Wireless
// 3 - Mobile
// 4 - Tunnel
// 99 - Other: The type is not mapped. See the <code>type</code> attribute, which contains a data source specific value.
type NetworkInterfaceTypeId = int

// An unordered collection of attributes. It defines a set of attributes available in all objects. It can be also used as a generic object to log objects that are not otherwise defined by the schema.
type Object struct {
}

// The observable object is a pivot element that contains related information found in many places in the event.
type Observable struct {
	// The full name of the observable attribute. The <code>name</code> is a pointer/reference to an attribute within the event data. For example: <code>file.name</code>.
	Name string `json:"name"`
	// Contains the original and normalized reputation scores.
	Reputation *Reputation `json:"reputation,omitempty"`
	// The observable value type name.
	Type *string `json:"type,omitempty"`
	// The observable value type identifier.
	TypeId ObservableTypeId `json:"type_id"`
	// The value associated with the observable attribute. The meaning of the value depends on the observable type.<br/>If the <code>name</code> refers to a scalar attribute, then the <code>value</code> is the value of the attribute.<br/>If the <code>name</code> refers to an object attribute, then the <code>value</code> is not populated.
	Value *string `json:"value,omitempty"`
}

// ObservableTypeId is an enum, and the following values are allowed.
// 0 - Unknown: Unknown observable data type.
// 1 - Hostname: Unique name assigned to a device connected to a computer network. A domain name in general is an Internet address that can be resolved through the Domain Name System (DNS). For example: <code>r2-d2.example.com</code>.
// 2 - IPAddress: Internet Protocol address (IP address), in either IPv4 or IPv6 format. For example, <code>192.168.200.24</code> or <code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code>.
// 3 - MACAddress: Media Access Control (MAC) address. For example: <code>18:36:F3:98:4F:9A</code>.
// 4 - UserName: User name. For example: <code>john_doe</code>.
// 5 - EmailAddress: Email address. For example: <code>john_doe@example.com</code>.
// 6 - URLString: Uniform Resource Locator (URL) string. For example: <code>http://www.example.com/download/trouble.exe</code>.
// 7 - FileName: File name. For example: <code>text-file.txt</code>.
// 8 - Hash: Hash. A unique value that corresponds to the content of the file, image, ja3_hash or hassh found in the schema. For example MD5: <code>3172ac7e2b55cbb81f04a6e65855a628</code>.
// 9 - ProcessName: Process name. For example: <code>Notepad</code>.
// 10 - ResourceUID: Resource unique identifier. For example, S3 Bucket name or EC2 Instance ID.
// 20 - Endpoint: The Endpoint object describes a physical or virtual device that connects to and exchanges information with a computer network. Some examples of endpoints are mobile devices, desktop computers, virtual machines, embedded devices, and servers. Internet-of-Things devices—like cameras, lighting, refrigerators, security systems, smart speakers, and thermostats—are also endpoints.
// 21 - User: The User object describes the characteristics of a user/person or a security principal. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:UserAccount/'>d3f:UserAccount</a>.
// 22 - Email: The Email object describes the email metadata such as sender, recipients, and direction. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Email/'>d3f:Email</a>.
// 23 - UniformResourceLocator: The Uniform Resource Locator(URL) object describes the characteristics of a URL. Defined in <a target='_blank' href='https://datatracker.ietf.org/doc/html/rfc1738'>RFC 1738</a> and by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:URL/'>d3f:URL</a>.
// 24 - File: The File object represents the metadata associated with a file stored in a computer system. It encompasses information about the file itself, including its attributes, properties, and organizational details. Defined by D3FEND <a target='_blank' href='https://next.d3fend.mitre.org/dao/artifact/d3f:File/'>d3f:File</a>.
// 25 - Process: The Process object describes a running instance of a launched program. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Process/'>d3f:Process</a>.
// 26 - GeoLocation: The Geo Location object describes a geographical location, usually associated with an IP address. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:PhysicalLocation/'>d3f:PhysicalLocation</a>.
// 27 - Container: The Container object describes an instance of a specific container. A container is a prepackaged, portable system image that runs isolated on an existing system using a container runtime like containerd.
// 30 - Fingerprint: The Fingerprint object provides detailed information about a digital fingerprint, which is a compact representation of data used to identify a longer piece of information, such as a public key or file content. It contains the algorithm and value of the fingerprint, enabling efficient and reliable identification of the associated data.
// 99 - Other: The observable data type is not mapped. See the <code>type</code> attribute, which may contain data source specific value.
type ObservableTypeId = int

// The Organization object describes characteristics of an organization or company and its division if any.
type Organization struct {
	// The name of the organization. For example, Widget, Inc.
	Name *string `json:"name,omitempty"`
	// The name of the organizational unit, within an organization. For example, Finance, IT, R&D
	OuName *string `json:"ou_name,omitempty"`
	// The alternate identifier for an entity's unique identifier. For example, its Active Directory OU DN or AWS OU ID.
	OuUid *string `json:"ou_uid,omitempty"`
	// The unique identifier of the organization. For example, its Active Directory or AWS Org ID.
	Uid *string `json:"uid,omitempty"`
}

// The Operating System (OS) object describes characteristics of an OS, such as Linux or Windows. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:OperatingSystem/'>d3f:OperatingSystem</a>.
type Os struct {
	// The operating system build number.
	Build *string `json:"build,omitempty"`
	// The operating system country code, as defined by the ISO 3166-1 standard (Alpha-2 code). For the complete list of country codes, see <a target='_blank' href='https://www.iso.org/obp/ui/#iso:pub:PUB500001:en'>ISO 3166-1 alpha-2 codes</a>.
	Country *string `json:"country,omitempty"`
	// The Common Platform Enumeration (CPE) name as described by (<a target='_blank' href='https://nvd.nist.gov/products/cpe'>NIST</a>) For example: <code>cpe:/a:apple:safari:16.2</code>.
	CpeName *string `json:"cpe_name,omitempty"`
	// The cpu architecture, the number of bits used for addressing in memory. For example: <code>32</code> or <code>64</code>.
	CpuBits *int `json:"cpu_bits,omitempty"`
	// The operating system edition. For example: <code>Professional</code>.
	Edition *string `json:"edition,omitempty"`
	// The two letter lower case language codes, as defined by <a target='_blank' href='https://en.wikipedia.org/wiki/ISO_639-1'>ISO 639-1</a>. For example: <code>en</code> (English), <code>de</code> (German), or <code>fr</code> (French).
	Lang *string `json:"lang,omitempty"`
	// The operating system name.
	Name string `json:"name"`
	// The name of the latest Service Pack.
	SpName *string `json:"sp_name,omitempty"`
	// The version number of the latest Service Pack.
	SpVer *int `json:"sp_ver,omitempty"`
	// The type of the operating system.
	Type *string `json:"type,omitempty"`
	// The type identifier of the operating system.
	TypeId OsTypeId `json:"type_id"`
	// The version of the OS running on the device that originated the event. For example: "Windows 10", "OS X 10.7", or "iOS 9".
	Version *string `json:"version,omitempty"`
}

// OsTypeId is an enum, and the following values are allowed.
// 0 - Unknown: The type is unknown.
// 99 - Other: The type is not mapped. See the <code>type</code> attribute, which contains a data source specific value.
// 100 - Windows
// 101 - WindowsMobile
// 200 - Linux
// 201 - Android
// 300 - macOS
// 301 - iOS
// 302 - iPadOS
// 400 - Solaris
// 401 - AIX
// 402 - UX
type OsTypeId = int

// The Software Package object describes details about a software package. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:SoftwarePackage/'>d3f:SoftwarePackage</a>.
type Package struct {
	// Architecture is a shorthand name describing the type of computer hardware the packaged software is meant to run on.
	Architecture *string `json:"architecture,omitempty"`
	// The software package epoch. Epoch is a way to define weighted dependencies based on version numbers.
	Epoch *int `json:"epoch,omitempty"`
	// The software license applied to this package.
	License *string `json:"license,omitempty"`
	// The software package name.
	Name string `json:"name"`
	// A purl is a URL string used to identify and locate a software package in a mostly universal and uniform way across programming languages, package managers, packaging conventions, tools, APIs and databases.
	Purl *string `json:"purl,omitempty"`
	// Release is the number of times a version of the software has been packaged.
	Release *string `json:"release,omitempty"`
	// The software package version.
	Version string `json:"version"`
}

// The Policy object describes the policies that are applicable. <p>Policy attributes provide traceability to the operational state of the security product at the time that the event was captured, facilitating forensics, troubleshooting, and policy tuning/adjustments.</p>
type Policy struct {
	// The description of the policy.
	Desc *string `json:"desc,omitempty"`
	// The policy group.
	Group *Group `json:"group,omitempty"`
	// The policy name. For example: <code>IAM Policy</code>.
	Name *string `json:"name,omitempty"`
	// A unique identifier of the policy instance.
	Uid *string `json:"uid,omitempty"`
	// The policy version number.
	Version *string `json:"version,omitempty"`
}

// The Process object describes a running instance of a launched program. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Process/'>d3f:Process</a>.
type Process struct {
	// The audit user assigned at login by the audit subsystem.
	Auid *int `json:"auid,omitempty"`
	// The full command line used to launch an application, service, process, or job. For example: <code>ssh user@10.0.0.10</code>. If the command line is unavailable or missing, the empty string <code>”</code> is to be used
	CmdLine *string `json:"cmd_line,omitempty"`
	// The information describing an instance of a container. A container is a prepackaged, portable system image that runs isolated on an existing system using a container runtime like containerd.
	Container *Container `json:"container,omitempty"`
	// The time when the process was created/started.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The time when the process was created/started.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The effective group under which this process is running.
	Egid *int `json:"egid,omitempty"`
	// The effective user under which this process is running.
	Euid *int `json:"euid,omitempty"`
	// The process file object.
	File *File `json:"file,omitempty"`
	// The group under which this process is running.
	Group *Group `json:"group,omitempty"`
	// The process integrity level, normalized to the caption of the direction_id value. In the case of 'Other', it is defined by the event source (Windows only).
	Integrity *string `json:"integrity,omitempty"`
	// The normalized identifier of the process integrity level (Windows only).
	IntegrityId *ProcessIntegrityId `json:"integrity_id,omitempty"`
	// The lineage of the process, represented by a list of paths for each ancestor process. For example: <code>['/usr/sbin/sshd', '/usr/bin/bash', '/usr/bin/whoami']</code>.
	Lineage []string `json:"lineage,omitempty"`
	// The list of loaded module names.
	LoadedModules []string `json:"loaded_modules,omitempty"`
	// The friendly name of the process, for example: <code>Notepad++</code>.
	Name *ProcessName `json:"name,omitempty"`
	// If running under a process namespace (such as in a container), the process identifier within that process namespace.
	NamespacePid *int `json:"namespace_pid,omitempty"`
	// The parent process of this process object. It is recommended to only populate this field for the first process object, to prevent deep nesting.
	ParentProcess *Object `json:"parent_process,omitempty"`
	// The process identifier, as reported by the operating system. Process ID (PID) is a number used by the operating system to uniquely identify an active process.
	Pid *int `json:"pid,omitempty"`
	// The name of the containment jail (i.e., sandbox). For example, hardened_ps, high_security_ps, oracle_ps, netsvcs_ps, or default_ps.
	Sandbox *string `json:"sandbox,omitempty"`
	// The user session under which this process is running.
	Session *Session `json:"session,omitempty"`
	// The time when the process was terminated.
	TerminatedTime *Timestamp `json:"terminated_time,omitempty"`
	// The time when the process was terminated.
	TerminatedTimeDt *time.Time `json:"terminated_time_dt,omitempty"`
	// The Identifier of the thread associated with the event, as returned by the operating system.
	Tid *int `json:"tid,omitempty"`
	// A unique identifier for this process assigned by the producer (tool). Facilitates correlation of a process event with other events for that process.
	Uid *string `json:"uid,omitempty"`
	// The user under which this process is running.
	User *User `json:"user,omitempty"`
	// An unordered collection of zero or more name/value pairs that represent a process extended attribute.
	Xattributes *Object `json:"xattributes,omitempty"`
}

// ProcessIntegrityId is an enum, and the following values are allowed.
// 0 - Unknown
// 1 - Untrusted
// 2 - Low
// 3 - Medium
// 4 - High
// 5 - System
// 6 - Protected
// 99 - Other
type ProcessIntegrityId = int

// The Product object describes characteristics of a software product.
type Product struct {
	// The Common Platform Enumeration (CPE) name as described by (<a target='_blank' href='https://nvd.nist.gov/products/cpe'>NIST</a>) For example: <code>cpe:/a:apple:safari:16.2</code>.
	CpeName *string `json:"cpe_name,omitempty"`
	// The feature that reported the event.
	Feature *Feature `json:"feature,omitempty"`
	// The two letter lower case language codes, as defined by <a target='_blank' href='https://en.wikipedia.org/wiki/ISO_639-1'>ISO 639-1</a>. For example: <code>en</code> (English), <code>de</code> (German), or <code>fr</code> (French).
	Lang *string `json:"lang,omitempty"`
	// The name of the product.
	Name *string `json:"name,omitempty"`
	// The installation path of the product.
	Path *string `json:"path,omitempty"`
	// The unique identifier of the product.
	Uid *string `json:"uid,omitempty"`
	// The URL pointing towards the product.
	UrlString *UrlString `json:"url_string,omitempty"`
	// The name of the vendor of the product.
	VendorName string `json:"vendor_name"`
	// The version of the product, as defined by the event source. For example: <code>2013.1.3-beta</code>.
	Version *string `json:"version,omitempty"`
}

// The Related Event object describes an event related to a finding or detection as identified by the security product.
type RelatedEvent struct {
	// An array of <a target='_blank' href='https://attack.mitre.org'>MITRE ATT&CK®</a> objects describing the tactics, techniques & sub-techniques identified by a security control or finding.
	Attacks []*Attack `json:"attacks,omitempty"`
	// The <a target='_blank' href='https://www.lockheedmartin.com/en-us/capabilities/cyber/cyber-kill-chain.html'>Cyber Kill Chain®</a> provides a detailed description of each phase and its associated activities within the broader context of a cyber attack.
	KillChain []*KillChainPhase `json:"kill_chain,omitempty"`
	// The observables associated with the event or a finding.
	Observables []*Observable `json:"observables,omitempty"`
	// The unique identifier of the product that reported the related event.
	ProductUid *string `json:"product_uid,omitempty"`
	// The type of the related event. For example: Process Activity: Launch.
	Type *string `json:"type,omitempty"`
	// The unique identifier of the related event type. For example: 100701.
	TypeUid *int `json:"type_uid,omitempty"`
	// The unique identifier of the related event.
	Uid string `json:"uid"`
}

// The Remediation object describes the recommended remediation steps to address identified issue(s).
type Remediation struct {
	// The description of the remediation strategy.
	Desc string `json:"desc"`
	// A list of KB articles or patches related to an endpoint. A KB Article contains metadata that describes the patch or an update.
	KbArticleList []*KbArticle `json:"kb_article_list,omitempty"`
	// The KB article/s related to the entity. A KB Article contains metadata that describes the patch or an update.
	KbArticles []string `json:"kb_articles,omitempty"`
	// A list of supporting URL/s, references that help describe the remediation strategy.
	References []string `json:"references,omitempty"`
}

// The Reputation object describes the reputation/risk score of an entity (e.g. device, user, domain).
type Reputation struct {
	// The reputation score as reported by the event source.
	BaseScore float64 `json:"base_score"`
	// The provider of the reputation information.
	Provider *string `json:"provider,omitempty"`
	// The reputation score, normalized to the caption of the score_id value. In the case of 'Other', it is defined by the event source.
	Score *string `json:"score,omitempty"`
	// The normalized reputation score identifier.
	ScoreId ReputationScoreId `json:"score_id"`
}

// ReputationScoreId is an enum, and the following values are allowed.
// 0 - Unknown: The reputation score is unknown.
// 1 - VerySafe: Long history of good behavior.
// 2 - Safe: Consistently good behavior.
// 3 - ProbablySafe: Reasonable history of good behavior.
// 4 - LeansSafe: Starting to establish a history of normal behavior.
// 5 - MaynotbeSafe: No established history of normal behavior.
// 6 - ExerciseCaution: Starting to establish a history of suspicious or risky behavior.
// 7 - Risky: A site with a history of suspicious or risky behavior. (spam, scam, potentially unwanted software, potentially malicious).
// 8 - PossiblyMalicious: Strong possibility of maliciousness.
// 9 - ProbablyMalicious: Indicators of maliciousness.
// 10 - Malicious: Proven evidence of maliciousness.
// 99 - Other: The reputation score is not mapped. See the <code>rep_score</code> attribute, which contains a data source specific value.
type ReputationScoreId = int

// The Request Elements object describes characteristics of an API request.
type Request struct {
	// When working with containerized applications, the set of containers which write to the standard the output of a particular logging driver. For example, this may be the set of containers involved in handling api requests and responses for a containerized application.
	Containers []*Container `json:"containers,omitempty"`
	// The additional data that is associated with the api request.
	Data interface{} `json:"data,omitempty"`
	// The list of communication flags, normalized to the captions of the flag_ids values. In the case of 'Other', they are defined by the event source.
	Flags []string `json:"flags,omitempty"`
	// The unique request identifier.
	Uid string `json:"uid"`
}

// The Resource Details object describes details about resources that were affected by the activity/event.
type ResourceDetails struct {
	// The canonical cloud partition name to which the region is assigned (e.g. AWS Partitions: aws, aws-cn, aws-us-gov).
	CloudPartition *string `json:"cloud_partition,omitempty"`
	// The criticality of the resource as defined by the event source.
	Criticality *string `json:"criticality,omitempty"`
	// Additional data describing the resource.
	Data interface{} `json:"data,omitempty"`
	// The name of the related resource group.
	Group *Group `json:"group,omitempty"`
	// The list of labels/tags associated to a resource.
	Labels []string `json:"labels,omitempty"`
	// The name of the resource.
	Name *string `json:"name,omitempty"`
	// The namespace is useful when similar entities exist that you need to keep separate.
	Namespace *string `json:"namespace,omitempty"`
	// The identity of the service or user account that owns the resource.
	Owner *User `json:"owner,omitempty"`
	// The cloud region of the resource.
	Region *string `json:"region,omitempty"`
	// The resource type as defined by the event source.
	Type *string `json:"type,omitempty"`
	// The unique identifier of the resource.
	Uid *string `json:"uid,omitempty"`
	// The version of the resource. For example <code>1.2.3</code>.
	Version *string `json:"version,omitempty"`
}

// The Response Elements object describes characteristics of an API response.
type Response struct {
	// The numeric response sent to a request.
	Code *int `json:"code,omitempty"`
	// When working with containerized applications, the set of containers which write to the standard the output of a particular logging driver. For example, this may be the set of containers involved in handling api requests and responses for a containerized application.
	Containers []*Container `json:"containers,omitempty"`
	// The additional data that is associated with the api response.
	Data interface{} `json:"data,omitempty"`
	// Error Code
	Error *string `json:"error,omitempty"`
	// Error Message
	ErrorMessage *string `json:"error_message,omitempty"`
	// The list of communication flags, normalized to the captions of the flag_ids values. In the case of 'Other', they are defined by the event source.
	Flags []string `json:"flags,omitempty"`
	// The description of the event/finding, as defined by the source.
	Message *string `json:"message,omitempty"`
}

// The Service object describes characteristics of a service, <code> e.g. AWS EC2. </code>
type Service struct {
	// The list of labels associated with the service.
	Labels []string `json:"labels,omitempty"`
	// The name of the service.
	Name *string `json:"name,omitempty"`
	// The unique identifier of the service.
	Uid *string `json:"uid,omitempty"`
	// The version of the service.
	Version *string `json:"version,omitempty"`
}

// The Session object describes details about an authenticated session. e.g. Session Creation Time, Session Issuer. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Session/'>d3f:Session</a>.
type Session struct {
	// The number of identical sessions spawned from the same source IP, destination IP, application, and content/threat type seen over a period of time.
	Count *int `json:"count,omitempty"`
	// The time when the session was created.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The time when the session was created.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The unique identifier of the user's credential. For example, AWS Access Key ID.
	CredentialUid *string `json:"credential_uid,omitempty"`
	// The reason which triggered the session expiration.
	ExpirationReason *string `json:"expiration_reason,omitempty"`
	// The session expiration time.
	ExpirationTime *Timestamp `json:"expiration_time,omitempty"`
	// The session expiration time.
	ExpirationTimeDt *time.Time `json:"expiration_time_dt,omitempty"`
	// Indicates whether Multi Factor Authentication was used during authentication.
	IsMfa *bool `json:"is_mfa,omitempty"`
	// The indication of whether the session is remote.
	IsRemote *bool `json:"is_remote,omitempty"`
	// The indication of whether the session is a VPN session.
	IsVpn *bool `json:"is_vpn,omitempty"`
	// The identifier of the session issuer.
	Issuer *string `json:"issuer,omitempty"`
	// The Pseudo Terminal associated with the session. Ex: the tty or pts value.
	Terminal *string `json:"terminal,omitempty"`
	// The unique identifier of the session.
	Uid *string `json:"uid,omitempty"`
	// The alternate unique identifier of the session. e.g. AWS ARN - <code>arn:aws:sts::123344444444:assumed-role/Admin/example-session</code>.
	UidAlt *string `json:"uid_alt,omitempty"`
	// The universally unique identifier of the session.
	Uuid *string `json:"uuid,omitempty"`
}

// The Sub Technique object describes the sub technique ID and/or name associated to an attack, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>.
type SubTechnique struct {
	// The name of the attack sub technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>. For example: <code>Scanning IP Blocks</code>.
	Name *string `json:"name,omitempty"`
	// The versioned permalink of the attack sub technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>. For example: <code>https://attack.mitre.org/versions/v14/techniques/T1595/001/</code>.
	SrcUrl *UrlString `json:"src_url,omitempty"`
	// The unique identifier of the attack sub technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>. For example: <code>T1595.001</code>.
	Uid *string `json:"uid,omitempty"`
}

// The Tactic object describes the tactic ID and/or name that is associated to an attack, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>.
type Tactic struct {
	// The tactic name that is associated with the attack technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>. For example: <code>Reconnaissance</code>.
	Name *string `json:"name,omitempty"`
	// The versioned permalink of the attack tactic, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>. For example: <code>https://attack.mitre.org/versions/v14/tactics/TA0043/</code>.
	SrcUrl *UrlString `json:"src_url,omitempty"`
	// The tactic ID that is associated with the attack technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>. For example: <code>TA0043</code>.
	Uid *string `json:"uid,omitempty"`
}

// The Technique object describes the technique ID and/or name associated to an attack, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>.
type Technique struct {
	// The name of the attack technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>. For example: <code>Active Scanning</code>.
	Name *string `json:"name,omitempty"`
	// The versioned permalink of the attack technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>. For example: <code>https://attack.mitre.org/versions/v14/techniques/T1595/</code>.
	SrcUrl *UrlString `json:"src_url,omitempty"`
	// The unique identifier of the attack technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>. For example: <code>T1595</code>.
	Uid *string `json:"uid,omitempty"`
}

// The User object describes the characteristics of a user/person or a security principal. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:UserAccount/'>d3f:UserAccount</a>.
type User struct {
	// The user's account or the account associated with the user.
	Account *Account `json:"account,omitempty"`
	// The unique identifier of the user's credential. For example, AWS Access Key ID.
	CredentialUid *string `json:"credential_uid,omitempty"`
	// The domain where the user is defined. For example: the LDAP or Active Directory domain.
	Domain *string `json:"domain,omitempty"`
	// The user's primary email address.
	EmailAddr *EmailAddress `json:"email_addr,omitempty"`
	// The full name of the person, as per the LDAP Common Name attribute (cn).
	FullName *string `json:"full_name,omitempty"`
	// The administrative groups to which the user belongs.
	Groups []*Group `json:"groups,omitempty"`
	// The additional LDAP attributes that describe a person.
	LdapPerson *LdapPerson `json:"ldap_person,omitempty"`
	// The username. For example, <code>janedoe1</code>.
	Name *UserName `json:"name,omitempty"`
	// Organization and org unit related to the user.
	Org *Organization `json:"org,omitempty"`
	// The type of the user. For example, System, AWS IAM User, etc.
	Type *string `json:"type,omitempty"`
	// The account type identifier.
	TypeId *UserTypeId `json:"type_id,omitempty"`
	// The unique user identifier. For example, the Windows user SID, ActiveDirectory DN or AWS user ARN.
	Uid *string `json:"uid,omitempty"`
	// The alternate user identifier. For example, the Active Directory user GUID or AWS user Principal ID.
	UidAlt *string `json:"uid_alt,omitempty"`
}

// UserTypeId is an enum, and the following values are allowed.
// 0 - Unknown: The type is unknown.
// 1 - User: Regular user account.
// 2 - Admin: Admin/root user account.
// 3 - System: System account. For example, Windows computer accounts with a trailing dollar sign ($).
// 99 - Other: The type is not mapped. See the <code>type</code> attribute, which contains a data source specific value.
type UserTypeId = int

// The vulnerability is an unintended characteristic of a computing component or system configuration that multiplies the risk of an adverse event or a loss occurring either due to accidental exposure, deliberate attack, or conflict with new system components.
type Vulnerability struct {
	// List of Affected Code objects that describe details about code blocks identified as vulnerable.
	AffectedCode []*AffectedCode `json:"affected_code,omitempty"`
	// List of software packages identified as affected by a vulnerability/vulnerabilities.
	AffectedPackages []*AffectedPackage `json:"affected_packages,omitempty"`
	// The Common Vulnerabilities and Exposures (<a target='_blank' href='https://cve.mitre.org/'>CVE</a>).
	Cve *Cve `json:"cve,omitempty"`
	// The CWE object represents a weakness in a software system that can be exploited by a threat actor to perform an attack. The CWE object is based on the <a target='_blank' href='https://cwe.mitre.org/'>Common Weakness Enumeration (CWE)</a> catalog.
	Cwe *Cwe `json:"cwe,omitempty"`
	// The description of the vulnerability.
	Desc *string `json:"desc,omitempty"`
	// The time when the vulnerability was first observed.
	FirstSeenTime *Timestamp `json:"first_seen_time,omitempty"`
	// The time when the vulnerability was first observed.
	FirstSeenTimeDt *time.Time `json:"first_seen_time_dt,omitempty"`
	// Indicates if a fix is available for the reported vulnerability.
	FixAvailable *bool `json:"fix_available,omitempty"`
	// Indicates if an exploit or a PoC (proof-of-concept) is available for the reported vulnerability.
	IsExploitAvailable *bool `json:"is_exploit_available,omitempty"`
	// Indicates if a fix is available for the reported vulnerability.
	IsFixAvailable *bool `json:"is_fix_available,omitempty"`
	// A list of KB articles or patches related to an endpoint. A KB Article contains metadata that describes the patch or an update.
	KbArticleList []*KbArticle `json:"kb_article_list,omitempty"`
	// The KB article/s related to the entity. A KB Article contains metadata that describes the patch or an update.
	KbArticles []string `json:"kb_articles,omitempty"`
	// The time when the vulnerability was most recently observed.
	LastSeenTime *Timestamp `json:"last_seen_time,omitempty"`
	// The time when the vulnerability was most recently observed.
	LastSeenTimeDt *time.Time `json:"last_seen_time_dt,omitempty"`
	// List of vulnerable packages as identified by the security product
	Packages []*Package `json:"packages,omitempty"`
	// A list of reference URLs with additional information about the vulnerability.
	References []string `json:"references,omitempty"`
	// List of vulnerabilities that are related to this vulnerability.
	RelatedVulnerabilities []string `json:"related_vulnerabilities,omitempty"`
	// The remediation recommendations on how to mitigate the identified vulnerability.
	Remediation *Remediation `json:"remediation,omitempty"`
	// The vendor assigned severity of the vulnerability.
	Severity *string `json:"severity,omitempty"`
	// A title or a brief phrase summarizing the discovered vulnerability.
	Title *string `json:"title,omitempty"`
	// The name of the vendor that identified the vulnerability.
	VendorName *string `json:"vendor_name,omitempty"`
}
