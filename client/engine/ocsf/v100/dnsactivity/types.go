// This file was auto-generated by Fern from our API Definition.

package dnsactivity

import (
	time "time"
)

// Email address. For example: <code>john_doe@example.com</code>.
type EmailAddress = string

// File hash. A unique value that corresponds to the content of the file.
type FileHash = string

// File name. For example: <code>text-file.txt</code>.
type FileName = string

// Unique name assigned to a device connected to a computer network. A domain name in general is an Internet address that can be resolved through the Domain Name System (DNS). For example: <code>r2-d2.example.com</code>.
type Hostname = string

// Internet Protocol address (IP address), in either IPv4 or IPv6 format.
type IpAddress = string

// Media Access Control (MAC) address. For example: <code>18:36:F3:98:4F:9A</code>.
type MacAddress = string

// The TCP/UDP port number. For example: <code>80</code> or <code>22</code>.
type Port = int

// Process name. For example: <code>Notepad</code>.
type ProcessName = string

// Resource unique identifier. For example, S3 Bucket name or EC2 Instance ID.
type ResourceUid = string

// Subnet mask in Classless Inter-Domain Routing (CIDR) notation. For example <code>192.168.200.0/24</code>.
type Subnet = string

// The timestamp format is the number of milliseconds since the Epoch 01/01/1970 00:00:00 UTC. For example <code>1618524549901</code>.
type Timestamp = int

// Uniform Resource Locator (URL) string. For example: <code>http://www.example.com/download/trouble.exe</code>.
type UrlString = string

// User name. For example: <code>john_doe</code>.
type UserName = string

// ActivityId is an enum, and the following values are allowed.
// 0 - Unknown: The event activity is unknown.
// 1 - Query: The DNS query request.
// 2 - Response: The DNS query response.
// 3 - Reset: The network connection was abnormally terminated or closed by a middle device like firewalls.
// 4 - Fail: The network connection failed. For example a connection timeout or no route to host.
// 5 - Refuse: The network connection was refused. For example an attempt to connect to a server port which is not open.
// 6 - Traffic: Network traffic report.
// 99 - Other: The event activity is not mapped.
type ActivityId = int

// CategoryUid is an enum, and the following values are allowed.
// 4 - NetworkActivity: Network Activity events.
type CategoryUid = int

// ClassUid is an enum, and the following values are allowed.
// 4003 - DNSActivity: DNS Activity events report DNS queries and answers as seen on the network.
type ClassUid = int

// DispositionId is an enum, and the following values are allowed.
// 0 - Unknown
// 1 - Allowed
// 2 - Blocked
// 3 - Quarantined
// 4 - Isolated
// 5 - Deleted
// 6 - Dropped
// 7 - CustomAction: Executed custom action such as run a command script.
// 8 - Approved
// 9 - Restored
// 10 - Exonerated: No longer suspicious (re-scored).
// 11 - Corrected
// 12 - PartiallyCorrected
// 13 - Uncorrected
// 14 - Delayed: Requires reboot to finish the operation.
// 15 - Detected
// 16 - NoAction
// 17 - Logged
// 18 - Tagged: Marked with extended attributes.
// 99 - Other
type DispositionId = int

// DNS Activity events report DNS queries and answers as seen on the network.
type DnsActivity struct {
	// The normalized identifier of the activity that triggered the event.
	ActivityId ActivityId `json:"activity_id"`
	// The event activity name, as defined by the activity_id.
	ActivityName *string `json:"activity_name,omitempty"`
	// The actor object describes details about the user/role/process that was the source of the activity.
	Actor *Actor `json:"actor,omitempty"`
	// The Domain Name System (DNS) answers.
	Answers []*DnsAnswer `json:"answers,omitempty"`
	// Describes details about a typical API (Application Programming Interface) call.
	Api *Api `json:"api,omitempty"`
	// The name of the application that is associated with the event or object.
	AppName *string `json:"app_name,omitempty"`
	// An array of attacks associated with an event.
	Attacks []*Attack `json:"attacks,omitempty"`
	// The event category name, as defined by category_uid value: <code>Network Activity</code>.
	CategoryName *string `json:"category_name,omitempty"`
	// The category unique identifier of the event.
	CategoryUid CategoryUid `json:"category_uid"`
	// The unique identifier of a class. A Class describes the attributes available in an event.
	ClassUid ClassUid `json:"class_uid"`
	// Describes details about the Cloud environment where the event was originally created or logged.
	Cloud *Cloud `json:"cloud,omitempty"`
	// The network connection information.
	ConnectionInfo *NetworkConnectionInfo `json:"connection_info,omitempty"`
	// The number of times that events in the same logical group occurred during the event <strong>Start Time</strong> to <strong>End Time</strong> period.
	Count *int `json:"count,omitempty"`
	// An addressable device, computer system or host.
	Device *Device `json:"device,omitempty"`
	// The event disposition name, normalized to the caption of the disposition_id value. In the case of 'Other', it is defined by the event source.
	Disposition *string `json:"disposition,omitempty"`
	// When security issues, such as malware or policy violations, are detected and possibly corrected, then <code>disposition_id</code> describes the action taken by the security product.
	DispositionId DispositionId `json:"disposition_id"`
	// The responder (server) in a network connection.
	DstEndpoint *NetworkEndpoint `json:"dst_endpoint,omitempty"`
	// The event duration or aggregate time, the amount of time the event covers from <code>start_time</code> to <code>end_time</code> in milliseconds.
	Duration *int `json:"duration,omitempty"`
	// The end time of a time period, or the time of the most recent event included in the aggregate event.
	EndTime *Timestamp `json:"end_time,omitempty"`
	// The end time of a time period, or the time of the most recent event included in the aggregate event.
	EndTimeDt *time.Time `json:"end_time_dt,omitempty"`
	// The additional information from an external data source, which is associated with the event. For example add location information for the IP address in the DNS answers:</p><code>[{"name": "answers.ip", "value": "92.24.47.250", "type": "location", "data": {"city": "Socotra", "continent": "Asia", "coordinates": [-25.4153, 17.0743], "country": "YE", "desc": "Yemen"}}]</code>
	Enrichments []*Enrichment `json:"enrichments,omitempty"`
	// The list of malware identified by a finding.
	Malware []*Malware `json:"malware,omitempty"`
	// The description of the event, as defined by the event source.
	Message *string `json:"message,omitempty"`
	// The metadata associated with the event.
	Metadata *Metadata `json:"metadata,omitempty"`
	// The observables associated with the event.
	Observables []*Observable `json:"observables,omitempty"`
	// If a proxy connection is present, the connection from the client to the proxy server.
	Proxy *NetworkProxy `json:"proxy,omitempty"`
	// The Domain Name System (DNS) query.
	Query *DnsQuery `json:"query,omitempty"`
	// The Domain Name System (DNS) query time.
	QueryTime *Timestamp `json:"query_time,omitempty"`
	// The Domain Name System (DNS) query time.
	QueryTimeDt *time.Time `json:"query_time_dt,omitempty"`
	// The event data as received from the event source.
	RawData *string `json:"raw_data,omitempty"`
	// The DNS server response code, normalized to the caption of the rcode_id value. In the case of 'Other', it is defined by the event source.
	Rcode *string `json:"rcode,omitempty"`
	// The normalized identifier of the DNS server response code. See <a target='_blank' href='https://datatracker.ietf.org/doc/html/rfc6895'>RFC-6895</a>.
	RcodeId *RcodeId `json:"rcode_id,omitempty"`
	// The Domain Name System (DNS) response time.
	ResponseTime *Timestamp `json:"response_time,omitempty"`
	// The Domain Name System (DNS) response time.
	ResponseTimeDt *time.Time `json:"response_time_dt,omitempty"`
	// The event severity, normalized to the caption of the severity_id value. In the case of 'Other', it is defined by the event source.
	Severity *string `json:"severity,omitempty"`
	// <p>The normalized identifier of the event severity.</p>The normalized severity is a measurement the effort and expense required to manage and resolve an event or incident. Smaller numerical values represent lower impact events, and larger numerical values represent higher impact events.
	SeverityId SeverityId `json:"severity_id"`
	// The initiator (client) of the network connection.
	SrcEndpoint *NetworkEndpoint `json:"src_endpoint,omitempty"`
	// The start time of a time period, or the time of the least recent event included in the aggregate event.
	StartTime *Timestamp `json:"start_time,omitempty"`
	// The start time of a time period, or the time of the least recent event included in the aggregate event.
	StartTimeDt *time.Time `json:"start_time_dt,omitempty"`
	// The event status, normalized to the caption of the status_id value. In the case of 'Other', it is defined by the event source.
	Status *string `json:"status,omitempty"`
	// The event status code, as reported by the event source.<br /><br />For example, in a Windows Failed Authentication event, this would be the value of 'Failure Code', e.g. 0x18.
	StatusCode *string `json:"status_code,omitempty"`
	// The status details contains additional information about the event outcome.
	StatusDetail *string `json:"status_detail,omitempty"`
	// The normalized identifier of the event status.
	StatusId *StatusId `json:"status_id,omitempty"`
	// The normalized event occurrence time.
	Time Timestamp `json:"time"`
	// The normalized event occurrence time.
	TimeDt *time.Time `json:"time_dt,omitempty"`
	// The number of minutes that the reported event <code>time</code> is ahead or behind UTC, in the range -1,080 to +1,080.
	TimezoneOffset *int `json:"timezone_offset,omitempty"`
	// The Transport Layer Security (TLS) attributes.
	Tls *Tls `json:"tls,omitempty"`
	// The network traffic refers to the amount of data moving across a network at a given point of time. Intended to be used alongside Network Connection.
	Traffic *NetworkTraffic `json:"traffic,omitempty"`
	// The event type name, as defined by the type_uid.
	TypeName *string `json:"type_name,omitempty"`
	// The event type ID. It identifies the event's semantics and structure. The value is calculated by the logging system as: <code>class_uid \* 100 + activity_id</code>.
	TypeUid TypeUid `json:"type_uid"`
	// The attributes that are not mapped to the event schema. The names and values of those attributes are specific to the event source.
	Unmapped *Object `json:"unmapped,omitempty"`
}

// RcodeId is an enum, and the following values are allowed.
// 0 - NoError: No Error.
// 1 - FormError: Format Error.
// 2 - ServError: Server Failure.
// 3 - NXDomain: Non-Existent Domain.
// 4 - NotImp: Not Implemented.
// 5 - Refused: Query Refused.
// 6 - YXDomain: Name Exists when it should not.
// 7 - YXRRSet: RR Set Exists when it should not.
// 8 - NXRRSet: RR Set that should exist does not.
// 9 - NotAuth: Not Authorized or Server Not Authoritative for zone.
// 10 - NotZone: Name not contained in zone.
// 11 - DSOTYPENI: DSO-TYPE Not Implemented.
// 16 - VERS: TSIG Signature Failure or Bad OPT Version.
// 17 - BADKEY: Key not recognized.
// 18 - BADTIME: Signature out of time window.
// 19 - BADMODE: Bad TKEY Mode.
// 20 - BADNAME: Duplicate key name.
// 21 - BADALG: Algorithm not supported.
// 22 - BADTRUNC: Bad Truncation.
// 23 - BADCOOKIE: Bad/missing Server Cookie.
// 24 - Unassigned: The codes deemed to be unassigned by the RFC (unassigned codes: 12-15, 24-3840, 4096-65534).
// 25 - Reserved: The codes deemed to be reserved by the RFC (codes: 3841-4095, 65535).
// 99 - Other: The dns response code is not defined by the RFC.
type RcodeId = int

// SeverityId is an enum, and the following values are allowed.
// 0 - Unknown: The event severity is not known.
// 1 - Informational: Informational message. No action required.
// 2 - Low: The user decides if action is needed.
// 3 - Medium: Action is required but the situation is not serious at this time.
// 4 - High: Action is required immediately.
// 5 - Critical: Action is required immediately and the scope is broad.
// 6 - Fatal: An error occurred but it is too late to take remedial action.
// 99 - Other: The event severity is not mapped. See the <code>severity</code> attribute, which contains a data source specific value.
type SeverityId = int

// StatusId is an enum, and the following values are allowed.
// 0 - Unknown
// 1 - Success
// 2 - Failure
// 99 - Other: The event status is not mapped. See the <code>status</code> attribute, which contains a data source specific value.
type StatusId = int

// TypeUid is an enum, and the following values are allowed.
// 400300 - Unknown
// 400301 - Query: The DNS query request.
// 400302 - Response: The DNS query response.
// 400303 - Reset: The network connection was abnormally terminated or closed by a middle device like firewalls.
// 400304 - Fail: The network connection failed. For example a connection timeout or no route to host.
// 400305 - Refuse: The network connection was refused. For example an attempt to connect to a server port which is not open.
// 400306 - Traffic: Network traffic report.
// 400399 - Other
type TypeUid = int

// The Account object contains details about the account that initiated or performed a specific activity within a system or application.
type Account struct {
	// The name of the account (e.g. GCP Account Name).
	Name *string `json:"name,omitempty"`
	// The account type, normalized to the caption of 'account_type_id'. In the case of 'Other', it is defined by the event source.
	Type *string `json:"type,omitempty"`
	// The normalized account type identifier.
	TypeId *AccountTypeId `json:"type_id,omitempty"`
	// The unique identifier of the account (e.g. AWS Account ID).
	Uid *string `json:"uid,omitempty"`
}

// AccountTypeId is an enum, and the following values are allowed.
// 0 - Unknown: The account type is unknown.
// 1 - LDAPAccount
// 2 - WindowsAccount
// 3 - AWSIAMUser
// 4 - AWSIAMRole
// 5 - GCPAccount
// 6 - AzureADAccount
// 7 - MacOSAccount
// 8 - AppleAccount
// 9 - LinuxAccount
// 10 - AWSAccount
// 99 - Other: The account type is not mapped.
type AccountTypeId = int

// The Actor object contains details about the user, role, or process that initiated or performed a specific activity.
type Actor struct {
	// This object provides details such as authorization outcome, associated policies related to activity/event.
	Authorizations []*Authorization `json:"authorizations,omitempty"`
	// This object describes details about the Identity Provider used.
	Idp *Idp `json:"idp,omitempty"`
	// The name of the service that invoked the activity as described in the event.
	InvokedBy *string `json:"invoked_by,omitempty"`
	// The process that initiated the activity.
	Process *Process `json:"process,omitempty"`
	// The user session from which the activity was initiated.
	Session *Session `json:"session,omitempty"`
	// The user that initiated the activity or the user context from which the activity was initiated.
	User *User `json:"user,omitempty"`
}

// The API, or Application Programming Interface, object represents information pertaining to an API request and response.
type Api struct {
	// Verb/Operation associated with the request
	Operation string `json:"operation"`
	// Details pertaining to the API request.
	Request *Request `json:"request,omitempty"`
	// Details pertaining to the API response.
	Response *Response `json:"response,omitempty"`
	// The information pertaining to the API service.
	Service *Service `json:"service,omitempty"`
	// The version of the API service.
	Version *string `json:"version,omitempty"`
}

// The Attack object describes the technique and associated tactics related to an attack. See <a target='_blank' href='https://attack.mitre.org'>MITRE ATT&CK®</a>.
type Attack struct {
	// The a list of tactic ID's/names that are associated with the attack technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>.
	Tactics []*Tactic `json:"tactics,omitempty"`
	// The attack technique.
	Technique *Technique `json:"technique,omitempty"`
	// The ATT&CK Matrix version.
	Version string `json:"version"`
}

// The Authorization Result object provides details about the authorization outcome and associated policies related to activity.
type Authorization struct {
	// Authorization Result/outcome, e.g. allowed, denied.
	Decision *string `json:"decision,omitempty"`
	// Details about the Identity/Access management policies that are applicable.
	Policy *Policy `json:"policy,omitempty"`
}

// The Digital Certificate, also known as a Public Key Certificate, object contains information about the ownership and usage of a public key. It serves as a means to establish trust in the authenticity and integrity of the public key and the associated entity. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Certificate/'>d3f:Certificate</a>.
type Certificate struct {
	// The time when the certificate was created.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The time when the certificate was created.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The expiration time of the certificate.
	ExpirationTime *Timestamp `json:"expiration_time,omitempty"`
	// The expiration time of the certificate.
	ExpirationTimeDt *time.Time `json:"expiration_time_dt,omitempty"`
	// The fingerprint list of the certificate.
	Fingerprints []*Fingerprint `json:"fingerprints,omitempty"`
	// The certificate issuer distinguished name.
	Issuer string `json:"issuer"`
	// The serial number of the certificate used to create the digital signature.
	SerialNumber string `json:"serial_number"`
	// The certificate subject distinguished name.
	Subject *string `json:"subject,omitempty"`
	// The certificate version.
	Version *string `json:"version,omitempty"`
}

// The Cloud object contains information about a cloud account such as AWS Account ID, regions, etc.
type Cloud struct {
	// The account object describes details about the account that was the source or target of the activity.
	Account *Account `json:"account,omitempty"`
	// Organization and org unit relevant to the event or object.
	Org *Organization `json:"org,omitempty"`
	// The unique identifier of a Cloud project.
	ProjectUid *string `json:"project_uid,omitempty"`
	// The unique name of the Cloud services provider, such as AWS, MS Azure, GCP, etc.
	Provider string `json:"provider"`
	// The name of the cloud region, as defined by the cloud provider.
	Region *string `json:"region,omitempty"`
	// The availability zone in the cloud region, as defined by the cloud provider.
	Zone *string `json:"zone,omitempty"`
}

// The Container object describes an instance of a specific container. A container is a prepackaged, portable system image that runs isolated on an existing system using a container runtime like containerd.
type Container struct {
	// Commit hash of image created for docker or the SHA256 hash of the container. For example: <code>13550340a8681c84c861aac2e5b440161c2b33a3e4f302ac680ca5b686de48de</code>.
	Hash *Fingerprint `json:"hash,omitempty"`
	// The container image used as a template to run the container.
	Image *Image `json:"image,omitempty"`
	// The container name.
	Name *string `json:"name,omitempty"`
	// The network driver used by the container. For example, bridge, overlay, host, none, etc.
	NetworkDriver *string `json:"network_driver,omitempty"`
	// The orchestrator managing the container, such as ECS, EKS, K8s, or OpenShift.
	Orchestrator *string `json:"orchestrator,omitempty"`
	// The unique identifier of the pod (or equivalent) that the container is executing on.
	PodUuid *string `json:"pod_uuid,omitempty"`
	// The backend running the container, such as containerd or cri-o.
	Runtime *string `json:"runtime,omitempty"`
	// The size of the container image.
	Size *int `json:"size,omitempty"`
	// The tag used by the container. It can indicate version, format, OS.
	Tag *string `json:"tag,omitempty"`
	// The full container unique identifier for this instantiation of the container. For example: <code>ac2ea168264a08f9aaca0dfc82ff3551418dfd22d02b713142a6843caa2f61bf</code>.
	Uid string `json:"uid"`
}

// The Common Vulnerabilities and Exposures (CVE) object represents publicly disclosed cybersecurity vulnerabilities defined in CVE Program catalog (<a target='_blank' href='https://cve.mitre.org/'>CVE</a>). There is one CVE Record for each vulnerability in the catalog.
type Cve struct {
	// The Record Creation Date identifies when the CVE ID was issued to a CVE Numbering Authority (CNA) or the CVE Record was published on the CVE List. Note that the Record Creation Date does not necessarily indicate when this vulnerability was discovered, shared with the affected vendor, publicly disclosed, or updated in CVE.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The Record Creation Date identifies when the CVE ID was issued to a CVE Numbering Authority (CNA) or the CVE Record was published on the CVE List. Note that the Record Creation Date does not necessarily indicate when this vulnerability was discovered, shared with the affected vendor, publicly disclosed, or updated in CVE.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The CVSS object details Common Vulnerability Scoring System (<a target='_blank' href='https://www.first.org/cvss/'>CVSS</a>) scores from the advisory that are related to the vulnerability.
	Cvss *Cvss `json:"cvss,omitempty"`
	// The <a target='_blank' href='https://cwe.mitre.org/'>Common Weakness Enumeration (CWE)</a> unique identifier. For example: <code>CWE-787</code>.
	CweUid *string `json:"cwe_uid,omitempty"`
	// Common Weakness Enumeration (CWE) definition URL. For example: <code>https://cwe.mitre.org/data/definitions/787.html</code>.
	CweUrl *UrlString `json:"cwe_url,omitempty"`
	// The Record Modified Date identifies when the CVE record was last updated.
	ModifiedTime *Timestamp `json:"modified_time,omitempty"`
	// The Record Modified Date identifies when the CVE record was last updated.
	ModifiedTimeDt *time.Time `json:"modified_time_dt,omitempty"`
	// The product where the vulnerability was discovered.
	Product *Product `json:"product,omitempty"`
	// <p>The vulnerability type as selected from a large dropdown menu during CVE refinement.</p>Most frequently used vulnerability types are: <code>DoS</code>, <code>Code Execution</code>, <code>Overflow</code>, <code>Memory Corruption</code>, <code>Sql Injection</code>, <code>XSS</code>, <code>Directory Traversal</code>, <code>Http Response Splitting</code>, <code>Bypass something</code>, <code>Gain Information</code>, <code>Gain Privileges</code>, <code>CSRF</code>, <code>File Inclusion</code>. For more information see <a target='_blank' href='https://www.cvedetails.com/vulnerabilities-by-types.php'>Vulnerabilities By Type</a> distributions.
	Type *string `json:"type,omitempty"`
	// The Common Vulnerabilities and Exposures unique number assigned to a specific computer vulnerability. A CVE Identifier begins with 4 digits representing the year followed by a sequence of digits that acts as a unique identifier. For example: <code>CVE-2021-12345</code>.
	Uid string `json:"uid"`
}

// The Common Vulnerability Scoring System (<a target='_blank' href='https://www.first.org/cvss/'>CVSS</a>) object provides a way to capture the principal characteristics of a vulnerability and produce a numerical score reflecting its severity.
type Cvss struct {
	// The CVSS base score. For example: <code>9.1</code>.
	BaseScore float64 `json:"base_score"`
	// The CVSS depth represents a depth of the equation used to calculate CVSS score.
	Depth *CvssDepth `json:"depth,omitempty"`
	// The Common Vulnerability Scoring System metrics.This attribute contains information on the CVE's impact. If the CVE has been analyzed, this attribute will contain any CVSSv2 or CVSSv3 information associated with the vulnerability. For example: <code> {{"Access Vector", "Network"}, {"Access Complexity", "Low"}, ...}</code>.
	Metrics []*Metric `json:"metrics,omitempty"`
	// The CVSS overall score, impacted by base, temporal, and environmental metrics. For example: <code>9.1</code>.
	OverallScore *float64 `json:"overall_score,omitempty"`
	// <p>The Common Vulnerability Scoring System (CVSS) Qualitative Severity Rating. A textual representation of the numeric score.</p><strong>CVSS v2.0</strong><ul><li>Low (0.0 – 3.9)</li><li>Medium (4.0 – 6.9)</li><li>High (7.0 – 10.0)</li></ul></p><strong>CVSS v3.0</strong><ul><li>None (0.0)</li><li>Low (0.1 - 3.9)</li><li>Medium (4.0 - 6.9)</li><li>High (7.0 - 8.9)</li><li>Critical (9.0 - 10.0)</li></ul>
	Severity *string `json:"severity,omitempty"`
	// The CVSS vector string is a text representation of a set of CVSS metrics. It is commonly used to record or transfer CVSS metric information in a concise form. For example: <code>3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H</code>.
	VectorString *string `json:"vector_string,omitempty"`
	// The CVSS version. For example: <code>3.1</code>.
	Version string `json:"version"`
}

// CvssDepth is an enum, and the following values are allowed.
// Base - Base
// Environmental - Environmental
// Temporal - Temporal
type CvssDepth = string

// The Device object represents an addressable computer system or host, which is typically connected to a computer network and participates in the transmission or processing of data within the computer network. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Host/'>d3f:Host</a>.
type Device struct {
	// The unique identifier of the cloud autoscale configuration.
	AutoscaleUid *string `json:"autoscale_uid,omitempty"`
	// The time when the device was known to have been created.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The time when the device was known to have been created.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The description of the device, ordinarily as reported by the operating system.
	Desc *string `json:"desc,omitempty"`
	// The network domain where the device resides. For example: <code>work.example.com</code>.
	Domain *string `json:"domain,omitempty"`
	// The initial discovery time of the device.
	FirstSeenTime *Timestamp `json:"first_seen_time,omitempty"`
	// The initial discovery time of the device.
	FirstSeenTimeDt *time.Time `json:"first_seen_time_dt,omitempty"`
	// The group names to which the device belongs. For example: <code>["Windows Laptops", "Engineering"]<code/>.
	Groups []*Group `json:"groups,omitempty"`
	// The device hostname.
	Hostname *Hostname `json:"hostname,omitempty"`
	// The device hardware information.
	HwInfo *DeviceHwInfo `json:"hw_info,omitempty"`
	// The name of the hypervisor running on the device. For example, <code>Xen</code>, <code>VMware</code>, <code>Hyper-V</code>, <code>VirtualBox</code>, etc.
	Hypervisor *string `json:"hypervisor,omitempty"`
	// The image used as a template to run the virtual machine.
	Image *Image `json:"image,omitempty"`
	// The International Mobile Station Equipment Identifier that is associated with the device.
	Imei *string `json:"imei,omitempty"`
	// The unique identifier of a VM instance.
	InstanceUid *string `json:"instance_uid,omitempty"`
	// The name of the network interface (e.g. eth2).
	InterfaceName *string `json:"interface_name,omitempty"`
	// The unique identifier of the network interface.
	InterfaceUid *string `json:"interface_uid,omitempty"`
	// The device IP address, in either IPv4 or IPv6 format.
	Ip *IpAddress `json:"ip,omitempty"`
	// The event occurred on a compliant device.
	IsCompliant *bool `json:"is_compliant,omitempty"`
	// The event occurred on a managed device.
	IsManaged *bool `json:"is_managed,omitempty"`
	// The event occurred on a personal device.
	IsPersonal *bool `json:"is_personal,omitempty"`
	// The event occurred on a trusted device.
	IsTrusted *bool `json:"is_trusted,omitempty"`
	// The most recent discovery time of the device.
	LastSeenTime *Timestamp `json:"last_seen_time,omitempty"`
	// The most recent discovery time of the device.
	LastSeenTimeDt *time.Time `json:"last_seen_time_dt,omitempty"`
	// The geographical location of the device.
	Location *Location `json:"location,omitempty"`
	// The device Media Access Control (MAC) address.
	Mac *MacAddress `json:"mac,omitempty"`
	// The time when the device was last known to have been modified.
	ModifiedTime *Timestamp `json:"modified_time,omitempty"`
	// The time when the device was last known to have been modified.
	ModifiedTimeDt *time.Time `json:"modified_time_dt,omitempty"`
	// The alternate device name, ordinarily as assigned by an administrator. <p><b>Note:</b> The <b>Name</b> could be any other string that helps to identify the device, such as a phone number; for example <code>310-555-1234</code>.</p>
	Name *string `json:"name,omitempty"`
	// The network interfaces that are associated with the device, one for each unique MAC address/IP address/hostname/name combination.<p><b>Note:</b> The first element of the array is the network information that pertains to the event.</p>
	NetworkInterfaces []*NetworkInterface `json:"network_interfaces,omitempty"`
	// Organization and org unit related to the device.
	Org *Organization `json:"org,omitempty"`
	// The device operating system.
	Os *Os `json:"os,omitempty"`
	// The region where the virtual machine is located. For example, an AWS Region.
	Region *string `json:"region,omitempty"`
	// The risk level, normalized to the caption of the risk_level_id value. In the case of 'Other', it is defined by the event source.
	RiskLevel *string `json:"risk_level,omitempty"`
	// The normalized risk level id.
	RiskLevelId *DeviceRiskLevelId `json:"risk_level_id,omitempty"`
	// The risk score as reported by the event source.
	RiskScore *int `json:"risk_score,omitempty"`
	// The subnet mask.
	Subnet *Subnet `json:"subnet,omitempty"`
	// The unique identifier of a virtual subnet.
	SubnetUid *string `json:"subnet_uid,omitempty"`
	// The device type. For example: <code>unknown</code>, <code>server</code>, <code>desktop</code>, <code>laptop</code>, <code>tablet</code>, <code>mobile</code>, <code>virtual</code>, <code>browser</code>, or <code>other</code>.
	Type *string `json:"type,omitempty"`
	// The device type ID.
	TypeId DeviceTypeId `json:"type_id"`
	// The unique identifier of the device. For example the Windows TargetSID or AWS EC2 ARN.
	Uid *string `json:"uid,omitempty"`
	// An alternate unique identifier of the device if any. For example the ActiveDirectory DN.
	UidAlt *string `json:"uid_alt,omitempty"`
	// The Virtual LAN identifier.
	VlanUid *string `json:"vlan_uid,omitempty"`
	// The unique identifier of the Virtual Private Cloud (VPC).
	VpcUid *string `json:"vpc_uid,omitempty"`
}

// The Device Hardware Information object contains details and specifications of the physical components that make up a device. This information provides an overview of the hardware capabilities, configuration, and characteristics of the device.
type DeviceHwInfo struct {
	// The BIOS date. For example: <code>03/31/16</code>.
	BiosDate *string `json:"bios_date,omitempty"`
	// The BIOS manufacturer. For example: <code>LENOVO</code>.
	BiosManufacturer *string `json:"bios_manufacturer,omitempty"`
	// The BIOS version. For example: <code>LENOVO G5ETA2WW (2.62)</code>.
	BiosVer *string `json:"bios_ver,omitempty"`
	// The chassis type describes the system enclosure or physical form factor. Such as the following examples for Windows <a target='_blank' href='https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-systemenclosure'>Windows Chassis Types</a>
	Chassis *string `json:"chassis,omitempty"`
	// The cpu architecture, the number of bits used for addressing in memory. For example: <code>32</code> or <code>64</code>.
	CpuBits *int `json:"cpu_bits,omitempty"`
	// The number of processor cores in all installed processors. For Example: <code>42</code>.
	CpuCores *int `json:"cpu_cores,omitempty"`
	// The number of physical processors on a system. For example: <code>1</code>.
	CpuCount *int `json:"cpu_count,omitempty"`
	// The speed of the processor in Mhz. For Example: <code>4200</code>.
	CpuSpeed *int `json:"cpu_speed,omitempty"`
	// The processor type. For example: <code>x86 Family 6 Model 37 Stepping 5</code>.
	CpuType *string `json:"cpu_type,omitempty"`
	// The desktop display affiliated with the event
	DesktopDisplay *Display `json:"desktop_display,omitempty"`
	// The keyboard detailed information.
	KeyboardInfo *KeyboardInfo `json:"keyboard_info,omitempty"`
	// The total amount of installed RAM, in Megabytes. For example: <code>2048</code>.
	RamSize *int `json:"ram_size,omitempty"`
	// The device manufacturer serial number.
	SerialNumber *string `json:"serial_number,omitempty"`
}

// DeviceRiskLevelId is an enum, and the following values are allowed.
// 0 - Info
// 1 - Low
// 2 - Medium
// 3 - High
// 4 - Critical
type DeviceRiskLevelId = int

// DeviceTypeId is an enum, and the following values are allowed.
// 0 - Unknown: The type is unknown.
// 1 - Server
// 2 - Desktop
// 3 - Laptop
// 4 - Tablet
// 5 - Mobile
// 6 - Virtual
// 7 - IOT
// 8 - Browser
// 99 - Other: The type is not mapped. See the <code>type</code> attribute, which may contain a data source specific value.
type DeviceTypeId = int

// The Digital Signature object contains information about the cryptographic mechanism used to verify the authenticity, integrity, and origin of the file or application.
type DigitalSignature struct {
	// The digital signature algorithm used to create the signature, normalized to the caption of 'algorithm_id'. In the case of 'Other', it is defined by the event source.
	Algorithm *string `json:"algorithm,omitempty"`
	// The identifier of the normalized digital signature algorithm.
	AlgorithmId DigitalSignatureAlgorithmId `json:"algorithm_id"`
	// The certificate object containing information about the digital certificate.
	Certificate *Certificate `json:"certificate,omitempty"`
	// The time when the digital signature was created.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The time when the digital signature was created.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The developer ID on the certificate that signed the file.
	DeveloperUid *string `json:"developer_uid,omitempty"`
	// The message digest attribute contains the fixed length message hash representation and the corresponding hashing algorithm information.
	Digest *Fingerprint `json:"digest,omitempty"`
}

// DigitalSignatureAlgorithmId is an enum, and the following values are allowed.
// 0 - Unknown
// 1 - DSA: Digital Signature Algorithm (DSA).
// 2 - RSA: Rivest-Shamir-Adleman (RSA) Algorithm.
// 3 - ECDSA: Elliptic Curve Digital Signature Algorithm.
// 4 - Authenticode: Microsoft Authenticode Digital Signature Algorithm.
// 99 - Other
type DigitalSignatureAlgorithmId = int

// The Display object contains information about the physical or virtual display connected to a computer system.
type Display struct {
	// The numeric color depth.
	ColorDepth *int `json:"color_depth,omitempty"`
	// The numeric physical height of display.
	PhysicalHeight *int `json:"physical_height,omitempty"`
	// The numeric physical orientation of display.
	PhysicalOrientation *int `json:"physical_orientation,omitempty"`
	// The numeric physical width of display.
	PhysicalWidth *int `json:"physical_width,omitempty"`
	// The numeric scale factor of display.
	ScaleFactor *int `json:"scale_factor,omitempty"`
}

// The DNS Answer object represents a specific response provided by the Domain Name System (DNS) when querying for information about a domain or performing a DNS operation. It encapsulates the relevant details and data returned by the DNS server in response to a query.
type DnsAnswer struct {
	// The class of DNS data contained in this resource record. See <a target='_blank' href='https://www.rfc-editor.org/rfc/rfc1035.txt'>RFC1035</a>. For example: <code>IN</code>.
	Class string `json:"class"`
	// The list of DNS answer header flag IDs.
	FlagIds []DnsAnswerFlagIds `json:"flag_ids,omitempty"`
	// The list of DNS answer header flags.
	Flags []string `json:"flags,omitempty"`
	// The DNS packet identifier assigned by the program that generated the query. The identifier is copied to the response.
	PacketUid *int `json:"packet_uid,omitempty"`
	// The data describing the DNS resource. The meaning of this data depends on the type and class of the resource record.
	Rdata string `json:"rdata"`
	// The time interval that the resource record may be cached. Zero value means that the resource record can only be used for the transaction in progress, and should not be cached.
	Ttl *int `json:"ttl,omitempty"`
	// The type of data contained in this resource record. See <a target='_blank' href='https://www.rfc-editor.org/rfc/rfc1035.txt'>RFC1035</a>. For example: <code>CNAME</code>.
	Type string `json:"type"`
}

// DnsAnswerFlagIds is an enum, and the following values are allowed.
// 0 - Unknown
// 1 - AuthoritativeAnswer
// 2 - TruncatedResponse
// 3 - RecursionDesired
// 4 - RecursionAvailable
// 5 - AuthenticData
// 6 - CheckingDisabled
// 99 - Other: The event DNS header flag is not mapped.
type DnsAnswerFlagIds = int

// The DNS query object represents a specific request made to the Domain Name System (DNS) to retrieve information about a domain or perform a DNS operation. This object encapsulates the necessary attributes and methods to construct and send DNS queries, specify the query type (e.g., A, AAAA, MX). Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:DNSLookup/'>d3f:DNSLookup</a>.
type DnsQuery struct {
	// The class of resource records being queried. See <a target='_blank' href='https://www.rfc-editor.org/rfc/rfc1035.txt'>RFC1035</a>. For example: <code>IN</code>.
	Class string `json:"class"`
	// The hostname or domain being queried. For example: <code>www.example.com</code>
	Hostname Hostname `json:"hostname"`
	// The DNS opcode specifies the type of the query message.
	Opcode *string `json:"opcode,omitempty"`
	// The DNS opcode ID specifies the normalized query message type.
	OpcodeId *DnsQueryOpcodeId `json:"opcode_id,omitempty"`
	// The DNS packet identifier assigned by the program that generated the query. The identifier is copied to the response.
	PacketUid *int `json:"packet_uid,omitempty"`
	// The type of resource records being queried. See <a target='_blank' href='https://www.rfc-editor.org/rfc/rfc1035.txt'>RFC1035</a>. For example: A, AAAA, CNAME, MX, and NS.
	Type string `json:"type"`
}

// DnsQueryOpcodeId is an enum, and the following values are allowed.
// 0 - Query: Standard query
// 1 - InverseQuery: Inverse query, obsolete
// 2 - Status: Server status request
// 3 - Reserved: Reserved, not used
// 4 - Notify: Zone change notification
// 5 - Update: Dynamic DNS update
// 6 - DSOMessage: DNS Stateful Operations (DSO)
type DnsQueryOpcodeId = int

// The Enrichment object provides inline enrichment data for specific attributes of interest within an event. It serves as a mechanism to enhance or supplement the information associated with the event by adding additional relevant details or context.
type Enrichment struct {
	// The enrichment data associated with the attribute and value. The meaning of this data depends on the type the enrichment record.
	Data interface{} `json:"data,omitempty"`
	// The name of the attribute to which the enriched data pertains.
	Name string `json:"name"`
	// The enrichment data provider name.
	Provider *string `json:"provider,omitempty"`
	// The enrichment type. For example: <code>location</code>.
	Type *string `json:"type,omitempty"`
	// The value of the attribute to which the enriched data pertains.
	Value string `json:"value"`
}

// The OCSF Schema Extension object provides detailed information about the schema extension used to construct the event. The schema extensions are registered in the <a target='_blank' href='https://github.com/ocsf/ocsf-schema/blob/main/extensions.md'>extensions.md</a> file.
type Extension struct {
	// The schema extension name. For example: <code>dev</code>.
	Name string `json:"name"`
	// The schema extension unique identifier. For example: <code>999</code>.
	Uid string `json:"uid"`
	// The schema extension version. For example: <code>1.0.0-alpha.2</code>.
	Version string `json:"version"`
}

// The Feature object provides information about the software product feature that generated a specific event. It encompasses details related to the capabilities, components, user interface (UI) design, and performance upgrades associated with the feature.
type Feature struct {
	// The name of the feature.
	Name *string `json:"name,omitempty"`
	// The unique identifier of the feature.
	Uid *string `json:"uid,omitempty"`
	// The version of the feature.
	Version *string `json:"version,omitempty"`
}

// The File object represents the metadata associated with a file stored in a computer system. It encompasses information about the file itself, including its attributes, properties, and organizational details. Defined by D3FEND <a target='_blank' href='https://next.d3fend.mitre.org/dao/artifact/d3f:File/'>d3f:File</a>.
type File struct {
	// The time when the file was last accessed.
	AccessedTime *Timestamp `json:"accessed_time,omitempty"`
	// The time when the file was last accessed.
	AccessedTimeDt *time.Time `json:"accessed_time_dt,omitempty"`
	// The name of the user who last accessed the object.
	Accessor *User `json:"accessor,omitempty"`
	// The bitmask value that represents the file attributes.
	Attributes *int `json:"attributes,omitempty"`
	// The name of the company that published the file. For example: <code>Microsoft Corporation</code>.
	CompanyName *string `json:"company_name,omitempty"`
	// The file content confidentiality, normalized to the confidentiality_id value. In the case of 'Other', it is defined by the event source.
	Confidentiality *string `json:"confidentiality,omitempty"`
	// The normalized identifier of the file content confidentiality indicator.
	ConfidentialityId *FileConfidentialityId `json:"confidentiality_id,omitempty"`
	// The time when the file was created.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The time when the file was created.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The user that created the file.
	Creator *User `json:"creator,omitempty"`
	// The description of the file, as returned by file system. For example: the description as returned by the Unix file command or the Windows file type.
	Desc *string `json:"desc,omitempty"`
	// An array of hash attributes.
	Hashes []*Fingerprint `json:"hashes,omitempty"`
	// The indication of whether the object is part of the operating system.
	IsSystem *bool `json:"is_system,omitempty"`
	// The Multipurpose Internet Mail Extensions (MIME) type of the file, if applicable.
	MimeType *string `json:"mime_type,omitempty"`
	// The time when the file was last modified.
	ModifiedTime *Timestamp `json:"modified_time,omitempty"`
	// The time when the file was last modified.
	ModifiedTimeDt *time.Time `json:"modified_time_dt,omitempty"`
	// The user that last modified the file.
	Modifier *User `json:"modifier,omitempty"`
	// The name of the file. For example: <code>svchost.exe</code>
	Name FileName `json:"name"`
	// The user that owns the file/object.
	Owner *User `json:"owner,omitempty"`
	// The parent folder in which the file resides. For example: <code>c:\windows\system32</code>
	ParentFolder *string `json:"parent_folder,omitempty"`
	// The full path to the file. For example: <code>c:\windows\system32\svchost.exe</code>.
	Path *string `json:"path,omitempty"`
	// The product that created or installed the file.
	Product *Product `json:"product,omitempty"`
	// The object security descriptor.
	SecurityDescriptor *string `json:"security_descriptor,omitempty"`
	// The digital signature of the file.
	Signature *DigitalSignature `json:"signature,omitempty"`
	// The size of data, in bytes.
	Size *int `json:"size,omitempty"`
	// The file type.
	Type *string `json:"type,omitempty"`
	// The file type ID.
	TypeId FileTypeId `json:"type_id"`
	// The unique identifier of the file as defined by the storage system, such the file system file ID.
	Uid *string `json:"uid,omitempty"`
	// The file version. For example: <code>8.0.7601.17514</code>.
	Version *string `json:"version,omitempty"`
	// An unordered collection of zero or more name/value pairs where each pair represents a file or folder extended attribute.</p>For example: Windows alternate data stream attributes (ADS stream name, ADS size, etc.), user-defined or application-defined attributes, ACL, owner, primary group, etc. Examples from DCS: </p><ul><li><strong>ads_name</strong></li><li><strong>ads_size</strong></li><li><strong>dacl</strong></li><li><strong>owner</strong></li><li><strong>primary_group</strong></li><li><strong>link_name</strong> - name of the link associated to the file.</li><li><strong>hard_link_count</strong> - the number of links that are associated to the file.</li></ul>
	Xattributes *Object `json:"xattributes,omitempty"`
}

// FileConfidentialityId is an enum, and the following values are allowed.
// 0 - Unknown
// 1 - NotConfidential
// 2 - Confidential
// 3 - Secret
// 4 - TopSecret
// 99 - Other
type FileConfidentialityId = int

// FileTypeId is an enum, and the following values are allowed.
// 0 - Unknown: The type is unknown.
// 1 - RegularFile
// 2 - Folder
// 3 - CharacterDevice
// 4 - BlockDevice
// 5 - LocalSocket
// 6 - NamedPipe
// 7 - SymbolicLink
// 99 - Other: The type is not mapped. See the <code>type</code> attribute, which may contain a data source specific value.
type FileTypeId = int

// The Fingerprint object provides detailed information about a digital fingerprint, which is a compact representation of data used to identify a longer piece of information, such as a public key or file content. It contains the algorithm and value of the fingerprint, enabling efficient and reliable identification of the associated data.
type Fingerprint struct {
	// The hash algorithm used to create the digital fingerprint, normalized to the caption of 'algorithm_id'. In the case of 'Other', it is defined by the event source.
	Algorithm *string `json:"algorithm,omitempty"`
	// The identifier of the normalized hash algorithm, which was used to create the digital fingerprint.
	AlgorithmId FingerprintAlgorithmId `json:"algorithm_id"`
	// The digital fingerprint value.
	Value FileHash `json:"value"`
}

// FingerprintAlgorithmId is an enum, and the following values are allowed.
// 0 - Unknown
// 1 - MD5: MD5 message-digest algorithm producing a 128-bit (16-byte) hash value.
// 2 - 1: Secure Hash Algorithm 1 producing a 160-bit (20-byte) hash value.
// 3 - 256: Secure Hash Algorithm 2 producing a 256-bit (32-byte) hash value.
// 4 - 512: Secure Hash Algorithm 2 producing a 512-bit (64-byte) hash value.
// 5 - CTPH: The ssdeep generated fuzzy checksum. Also known as Context Triggered Piecewise Hash (CTPH).
// 6 - TLSH: The TLSH fuzzy hashing algorithm.
// 7 - quickXorHash: Microsoft simple non-cryptographic hash algorithm that works by XORing the bytes in a circular-shifting fashion.
// 99 - Other
type FingerprintAlgorithmId = int

// The Group object represents a collection or association of entities, such as users, policies, or devices. It serves as a logical grouping mechanism to organize and manage entities with similar characteristics or permissions within a system or organization.
type Group struct {
	// The group description.
	Desc *string `json:"desc,omitempty"`
	// The group name.
	Name *string `json:"name,omitempty"`
	// The group privileges.
	Privileges []string `json:"privileges,omitempty"`
	// The type of the group or account.
	Type *string `json:"type,omitempty"`
	// The unique identifier of the group. For example, for Windows events this is the security identifier (SID) of the group.
	Uid *string `json:"uid,omitempty"`
}

// The Identity Provider object contains detailed information about a provider responsible for creating, maintaining, and managing identity information while offering authentication services to applications. An Identity Provider (IdP) serves as a trusted authority that verifies the identity of users and issues authentication tokens or assertions to enable secure access to applications or services.
type Idp struct {
	// The name of the identity provider.
	Name *string `json:"name,omitempty"`
	// The unique identifier of the identity provider.
	Uid *string `json:"uid,omitempty"`
}

// The Image object provides a description of a specific Virtual Machine (VM) or Container image. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:ContainerImage/'>d3f:ContainerImage</a>.
type Image struct {
	// The image labels.
	Labels []string `json:"labels,omitempty"`
	// The image name. For example: <code>elixir</code>.
	Name *string `json:"name,omitempty"`
	// The full path to the image file.
	Path *string `json:"path,omitempty"`
	// The image tag. For example: <code>1.11-alpine</code>.
	Tag *string `json:"tag,omitempty"`
	// The unique image ID. For example: <code>77af4d6b9913</code>.
	Uid string `json:"uid"`
}

// The Keyboard Information object contains details and attributes related to a computer or device keyboard. It encompasses information that describes the characteristics, capabilities, and configuration of the keyboard.
type KeyboardInfo struct {
	// The number of function keys on client keyboard.
	FunctionKeys *int `json:"function_keys,omitempty"`
	// The Input Method Editor (IME) file name.
	Ime *string `json:"ime,omitempty"`
	// The keyboard locale identifier name (e.g., en-US).
	KeyboardLayout *string `json:"keyboard_layout,omitempty"`
	// The keyboard numeric code.
	KeyboardSubtype *int `json:"keyboard_subtype,omitempty"`
	// The keyboard type (e.g., xt, ico).
	KeyboardType *string `json:"keyboard_type,omitempty"`
}

// The Geo Location object describes a geographical location, usually associated with an IP address. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:PhysicalLocation/'>d3f:PhysicalLocation</a>.
type Location struct {
	// The name of the city.
	City *string `json:"city,omitempty"`
	// The name of the continent.
	Continent *string `json:"continent,omitempty"`
	// A two-element array, containing a longitude/latitude pair. The format conforms with <a target='_blank' href='https://geojson.org'>GeoJSON</a>. For example: <code>[-73.983, 40.719]</code>.
	Coordinates []float64 `json:"coordinates,omitempty"`
	// The ISO 3166-1 Alpha-2 country code. For the complete list of country codes see <a target='_blank' href='https://www.iso.org/obp/ui/#iso:pub:PUB500001:en' >ISO 3166-1 alpha-2 codes</a>.<p><b>Note:</b> The two letter country code should be capitalized. For example: <code>US</code> or <code>CA</code>.</p>
	Country *string `json:"country,omitempty"`
	// The description of the geographical location.
	Desc *string `json:"desc,omitempty"`
	// The indication of whether the location is on premises.
	IsOnPremises *bool `json:"is_on_premises,omitempty"`
	// The name of the Internet Service Provider (ISP).
	Isp *string `json:"isp,omitempty"`
	// The postal code of the location.
	PostalCode *string `json:"postal_code,omitempty"`
	// The provider of the geographical location data.
	Provider *string `json:"provider,omitempty"`
	// The alphanumeric code that identifies the principal subdivision (e.g. province or state) of the country. Region codes are defined at <a target='_blank' href='https://www.iso.org/iso-3166-country-codes.html'>ISO 3166-2</a> and have a limit of three characters. For example, see <a target='_blank' href='https://www.iso.org/obp/ui/#iso:code:3166:US'>the region codes for the US</a>.
	Region *string `json:"region,omitempty"`
}

// The Malware object describes the classification of known malicious software, which is intentionally designed to cause damage to a computer, server, client, or computer network.
type Malware struct {
	// The list of normalized identifiers of the malware classifications. Reference: <a target='_blank' href='https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_oxlc4df65spl'>STIX Malware Types</a>
	ClassificationIds []MalwareClassificationIds `json:"classification_ids,omitempty"`
	// The list of malware classifications, normalized to the captions of the classification_id values. In the case of 'Other', they are defined by the event source.
	Classifications []string `json:"classifications,omitempty"`
	// List of Common Vulnerabilities and Exposures (<a target='_blank' href='https://cve.mitre.org/'>CVE</a>).
	Cves []*Cve `json:"cves,omitempty"`
	// The malware name, as reported by the detection engine.
	Name *string `json:"name,omitempty"`
	// The filesystem path of the malware that was observed.
	Path *string `json:"path,omitempty"`
	// The provider of the malware information.
	Provider *string `json:"provider,omitempty"`
	// The malware unique identifier, as reported by the detection engine. For example a virus id or an IPS signature id.
	Uid *string `json:"uid,omitempty"`
}

// MalwareClassificationIds is an enum, and the following values are allowed.
// 0 - Unknown
// 1 - Adware
// 2 - Backdoor
// 3 - Bot
// 4 - Bootkit
// 5 - DDOS
// 6 - Downloader
// 7 - Dropper
// 8 - Kit
// 9 - Keylogger
// 10 - Ransomware
// 11 - Access_Trojan
// 13 - Exploitation
// 14 - Security_Software
// 15 - Rootkit
// 16 - Capture
// 17 - Spyware
// 18 - Trojan
// 19 - Virus
// 20 - Webshell
// 21 - Wiper
// 22 - Worm
// 99 - Other
type MalwareClassificationIds = int

// The Metadata object describes the metadata associated with the event. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Metadata/'>d3f:Metadata</a>.
type Metadata struct {
	// The unique identifier used to correlate events.
	CorrelationUid *string `json:"correlation_uid,omitempty"`
	// The Event ID or Code that the product uses to describe the event.
	EventCode *string `json:"event_code,omitempty"`
	// The schema extension used to create the event.
	Extension *Extension `json:"extension,omitempty"`
	// <p>The list of category labels attached to the event or specific attributes. Labels are user defined tags or aliases added at normalization time.</p>For example: <code>["network", "connection.ip:destination", "device.ip:source"]</code>
	Labels []string `json:"labels,omitempty"`
	// The event log name. For example, syslog file name or Windows logging subsystem: Security.
	LogName *string `json:"log_name,omitempty"`
	// The logging provider or logging service that logged the event. For example, Microsoft-Windows-Security-Auditing.
	LogProvider *string `json:"log_provider,omitempty"`
	// The event log schema version that specifies the format of the original event. For example syslog version or Cisco Log Schema Version.
	LogVersion *string `json:"log_version,omitempty"`
	// <p>The time when the logging system collected and logged the event.</p>This attribute is distinct from the event time in that event time typically contain the time extracted from the original event. Most of the time, these two times will be different.
	LoggedTime *Timestamp `json:"logged_time,omitempty"`
	// <p>The time when the logging system collected and logged the event.</p>This attribute is distinct from the event time in that event time typically contain the time extracted from the original event. Most of the time, these two times will be different.
	LoggedTimeDt *time.Time `json:"logged_time_dt,omitempty"`
	// The time when the event was last modified or enriched.
	ModifiedTime *Timestamp `json:"modified_time,omitempty"`
	// The time when the event was last modified or enriched.
	ModifiedTimeDt *time.Time `json:"modified_time_dt,omitempty"`
	// The original event time as reported by the event source. For example, the time in the original format from system event log such as Syslog on Unix/Linux and the System event file on Windows. Omit if event is generated instead of collected via logs.
	OriginalTime *string `json:"original_time,omitempty"`
	// The event processed time, such as an ETL operation.
	ProcessedTime *Timestamp `json:"processed_time,omitempty"`
	// The event processed time, such as an ETL operation.
	ProcessedTimeDt *time.Time `json:"processed_time_dt,omitempty"`
	// The product that reported the event.
	Product *Product `json:"product,omitempty"`
	// The list of profiles used to create the event.
	Profiles []string `json:"profiles,omitempty"`
	// Sequence number of the event. The sequence number is a value available in some events, to make the exact ordering of events unambiguous, regardless of the event time precision.
	Sequence *int `json:"sequence,omitempty"`
	// The logging system-assigned unique identifier of an event instance.
	Uid *string `json:"uid,omitempty"`
	// The version of the OCSF schema, using Semantic Versioning Specification (<a target='_blank' href='https://semver.org'>SemVer</a>). For example: 1.0.0. Event consumers use the version to determine the available event attributes.
	Version string `json:"version"`
}

// The Metric object defines a simple name/value pair entity for a metric.
type Metric struct {
	// The name of the metric.
	Name string `json:"name"`
	// The value of the metric.
	Value string `json:"value"`
}

// The Network Connection Information object describes characteristics of a network connection. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:NetworkSession/'>d3f:NetworkSession</a>.
type NetworkConnectionInfo struct {
	// The boundary of the connection, normalized to the caption of 'boundary_id'. In the case of 'Other', it is defined by the event source. <p> For cloud connections, this translates to the traffic-boundary(same VPC, through IGW, etc.). For traditional networks, this is described as Local, Internal, or External.</p>
	Boundary *string `json:"boundary,omitempty"`
	// <p>The normalized identifier of the boundary of the connection. </p><p> For cloud connections, this translates to the traffic-boundary (same VPC, through IGW, etc.). For traditional networks, this is described as Local, Internal, or External.</p>
	BoundaryId *NetworkConnectionInfoBoundaryId `json:"boundary_id,omitempty"`
	// The direction of the initiated connection, traffic, or email, normalized to the caption of the direction_id value. In the case of 'Other', it is defined by the event source.
	Direction *string `json:"direction,omitempty"`
	// The normalized identifier of the direction of the initiated connection, traffic, or email.
	DirectionId NetworkConnectionInfoDirectionId `json:"direction_id"`
	// The TCP/IP protocol name in lowercase, as defined by the Internet Assigned Numbers Authority (IANA). See <a target='_blank' href='https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml'>Protocol Numbers</a>. For example: <code>tcp</code> or <code>udp</code>.
	ProtocolName *string `json:"protocol_name,omitempty"`
	// The TCP/IP protocol number, as defined by the Internet Assigned Numbers Authority (IANA). Use -1 if the protocol is not defined by IANA. See <a target='_blank' href='https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml'>Protocol Numbers</a>. For example: <code>6</code> for TCP and <code>17</code> for UDP.
	ProtocolNum *int `json:"protocol_num,omitempty"`
	// The Internet Protocol version.
	ProtocolVer *string `json:"protocol_ver,omitempty"`
	// The Internet Protocol version identifier.
	ProtocolVerId *NetworkConnectionInfoProtocolVerId `json:"protocol_ver_id,omitempty"`
	// The network connection TCP header flags (i.e., control bits).
	TcpFlags *int `json:"tcp_flags,omitempty"`
	// The unique identifier of the connection.
	Uid *string `json:"uid,omitempty"`
}

// NetworkConnectionInfoBoundaryId is an enum, and the following values are allowed.
// 0 - Unknown: The connection boundary is unknown.
// 1 - Localhost: Local network traffic on the same endpoint.
// 2 - Internal: Internal network traffic between two endpoints inside network.
// 3 - External: External network traffic between two endpoints on the Internet or outside the network.
// 4 - SameVPC: Through another resource in the same VPC
// 5 - VPCGateway: Through an Internet gateway or a gateway VPC endpoint
// 6 - VirtualPrivateGateway: Through a virtual private gateway
// 7 - regionVPC: Through an intra-region VPC peering connection
// 8 - regionVPC: Through an inter-region VPC peering connection
// 9 - LocalGateway: Through a local gateway
// 10 - GatewayVPC: Through a gateway VPC endpoint (Nitro-based instances only)
// 11 - InternetGateway: Through an Internet gateway (Nitro-based instances only)
// 99 - Other
type NetworkConnectionInfoBoundaryId = int

// NetworkConnectionInfoDirectionId is an enum, and the following values are allowed.
// 0 - Unknown: Connection direction is unknown.
// 1 - Inbound: Inbound network connection. The connection was originated from the Internet or outside network, destined for services on the inside network.
// 2 - Outbound: Outbound network connection. The connection was originated from inside the network, destined for services on the Internet or outside network.
// 3 - Lateral: Lateral network connection. The connection was originated from inside the network, destined for services on the inside network.
// 99 - Other
type NetworkConnectionInfoDirectionId = int

// NetworkConnectionInfoProtocolVerId is an enum, and the following values are allowed.
// 0 - Unknown
// 4 - IPv4*
// 6 - IPv6*
// 99 - Other
type NetworkConnectionInfoProtocolVerId = int

// The Network Endpoint object describes characteristics of a network endpoint. These can be a source or destination of a network connection.
type NetworkEndpoint struct {
	// The name of the domain.
	Domain *string `json:"domain,omitempty"`
	// The fully qualified name of the endpoint.
	Hostname *Hostname `json:"hostname,omitempty"`
	// The unique identifier of a VM instance.
	InstanceUid *string `json:"instance_uid,omitempty"`
	// The name of the network interface (e.g. eth2).
	InterfaceName *string `json:"interface_name,omitempty"`
	// The unique identifier of the network interface.
	InterfaceUid *string `json:"interface_uid,omitempty"`
	// The intermediate IP Addresses. For example, the IP addresses in the HTTP X-Forwarded-For header.
	IntermediateIps []IpAddress `json:"intermediate_ips,omitempty"`
	// The IP address of the endpoint, in either IPv4 or IPv6 format.
	Ip *IpAddress `json:"ip,omitempty"`
	// The geographical location of the endpoint.
	Location *Location `json:"location,omitempty"`
	// The Media Access Control (MAC) address of the endpoint.
	Mac *MacAddress `json:"mac,omitempty"`
	// The short name of the endpoint.
	Name *string `json:"name,omitempty"`
	// The port used for communication within the network connection.
	Port *Port `json:"port,omitempty"`
	// The unique identifier of a virtual subnet.
	SubnetUid *string `json:"subnet_uid,omitempty"`
	// The service name in service-to-service connections. For example, AWS VPC logs the pkt-src-aws-service and pkt-dst-aws-service fields identify the connection is coming from or going to an AWS service.
	SvcName *string `json:"svc_name,omitempty"`
	// The unique identifier of the endpoint.
	Uid *string `json:"uid,omitempty"`
	// The Virtual LAN identifier.
	VlanUid *string `json:"vlan_uid,omitempty"`
	// The unique identifier of the Virtual Private Cloud (VPC).
	VpcUid *string `json:"vpc_uid,omitempty"`
}

// The Network Interface object describes the type and associated attributes of a network interface.
type NetworkInterface struct {
	// The hostname associated with the network interface.
	Hostname *Hostname `json:"hostname,omitempty"`
	// The IP address associated with the network interface.
	Ip *IpAddress `json:"ip,omitempty"`
	// The MAC address of the network interface.
	Mac *MacAddress `json:"mac,omitempty"`
	// The name of the network interface.
	Name *string `json:"name,omitempty"`
	// The namespace is useful in merger or acquisition situations. For example, when similar entities exists that you need to keep separate.
	Namespace *string `json:"namespace,omitempty"`
	// The subnet prefix length determines the number of bits used to represent the network part of the IP address. The remaining bits are reserved for identifying individual hosts within that subnet.
	SubnetPrefix *int `json:"subnet_prefix,omitempty"`
	// The type of network interface.
	Type *string `json:"type,omitempty"`
	// The network interface type identifier.
	TypeId NetworkInterfaceTypeId `json:"type_id"`
	// The unique identifier for the network interface.
	Uid *string `json:"uid,omitempty"`
}

// NetworkInterfaceTypeId is an enum, and the following values are allowed.
// 0 - Unknown: The type is unknown.
// 1 - Wired
// 2 - Wireless
// 3 - Mobile
// 4 - Tunnel
// 99 - Other: The type is not mapped. See the <code>type</code> attribute, which may contain a data source specific value.
type NetworkInterfaceTypeId = int

// The Network Proxy Endpoint describes characteristics of a network proxy. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:ProxyServer/'>d3f:ProxyServer</a>.
type NetworkProxy struct {
	// The name of the domain.
	Domain *string `json:"domain,omitempty"`
	// The fully qualified name of the endpoint.
	Hostname *Hostname `json:"hostname,omitempty"`
	// The unique identifier of a VM instance.
	InstanceUid *string `json:"instance_uid,omitempty"`
	// The name of the network interface (e.g. eth2).
	InterfaceName *string `json:"interface_name,omitempty"`
	// The unique identifier of the network interface.
	InterfaceUid *string `json:"interface_uid,omitempty"`
	// The intermediate IP Addresses. For example, the IP addresses in the HTTP X-Forwarded-For header.
	IntermediateIps []IpAddress `json:"intermediate_ips,omitempty"`
	// The IP address of the endpoint, in either IPv4 or IPv6 format.
	Ip *IpAddress `json:"ip,omitempty"`
	// The geographical location of the endpoint.
	Location *Location `json:"location,omitempty"`
	// The Media Access Control (MAC) address of the endpoint.
	Mac *MacAddress `json:"mac,omitempty"`
	// The short name of the endpoint.
	Name *string `json:"name,omitempty"`
	// The port used for communication within the network connection.
	Port *Port `json:"port,omitempty"`
	// The unique identifier of a virtual subnet.
	SubnetUid *string `json:"subnet_uid,omitempty"`
	// The service name in service-to-service connections. For example, AWS VPC logs the pkt-src-aws-service and pkt-dst-aws-service fields identify the connection is coming from or going to an AWS service.
	SvcName *string `json:"svc_name,omitempty"`
	// The unique identifier of the endpoint.
	Uid *string `json:"uid,omitempty"`
	// The Virtual LAN identifier.
	VlanUid *string `json:"vlan_uid,omitempty"`
	// The unique identifier of the Virtual Private Cloud (VPC).
	VpcUid *string `json:"vpc_uid,omitempty"`
}

// The Network Traffic object describes characteristics of network traffic. Network traffic refers to data moving across a network at a given point of time. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:NetworkTraffic/'>d3f:NetworkTraffic</a>.
type NetworkTraffic struct {
	// The total number of bytes (in and out).
	Bytes *int `json:"bytes,omitempty"`
	// The number of bytes sent from the destination to the source.
	BytesIn *int `json:"bytes_in,omitempty"`
	// The number of bytes sent from the source to the destination.
	BytesOut *int `json:"bytes_out,omitempty"`
	// The total number of packets (in and out).
	Packets *int `json:"packets,omitempty"`
	// The number of packets sent from the destination to the source.
	PacketsIn *int `json:"packets_in,omitempty"`
	// The number of packets sent from the source to the destination.
	PacketsOut *int `json:"packets_out,omitempty"`
}

// An unordered collection of attributes. It defines a set of attributes available in all objects. It can be also used as a generic object to log objects that are not otherwise defined by the schema.
type Object struct {
}

// The observable object is a pivot element that contains related information found in many places in the event.
type Observable struct {
	// The full name of the observable attribute. The <code>name</code> is a pointer/reference to an attribute within the event data. For example: <code>file.name</code>.
	Name string `json:"name"`
	// Contains the original and normalized reputation scores.
	Reputation *Reputation `json:"reputation,omitempty"`
	// The observable value type name.
	Type *string `json:"type,omitempty"`
	// The observable value type identifier.
	TypeId ObservableTypeId `json:"type_id"`
	// The value associated with the observable attribute. The meaning of the value depends on the observable type.<br/>If the <code>name</code> refers to a scalar attribute, then the <code>value</code> is the value of the attribute.<br/>If the <code>name</code> refers to an object attribute, then the <code>value</code> is not populated.
	Value *string `json:"value,omitempty"`
}

// ObservableTypeId is an enum, and the following values are allowed.
// 0 - Unknown: Unknown observable data type.
// 1 - Hostname: Unique name assigned to a device connected to a computer network. A domain name in general is an Internet address that can be resolved through the Domain Name System (DNS). For example: <code>r2-d2.example.com</code>.
// 2 - IPAddress: Internet Protocol address (IP address), in either IPv4 or IPv6 format.
// 3 - MACAddress: Media Access Control (MAC) address. For example: <code>18:36:F3:98:4F:9A</code>.
// 4 - UserName: User name. For example: <code>john_doe</code>.
// 5 - EmailAddress: Email address. For example: <code>john_doe@example.com</code>.
// 6 - URLString: Uniform Resource Locator (URL) string. For example: <code>http://www.example.com/download/trouble.exe</code>.
// 7 - FileName: File name. For example: <code>text-file.txt</code>.
// 8 - FileHash: File hash. A unique value that corresponds to the content of the file.
// 9 - ProcessName: Process name. For example: <code>Notepad</code>.
// 10 - ResourceUID: Resource unique identifier. For example, S3 Bucket name or EC2 Instance ID.
// 20 - Endpoint: The Endpoint object describes a physical or virtual device that connects to and exchanges information with a computer network. Some examples of endpoints are mobile devices, desktop computers, virtual machines, embedded devices, and servers. Internet-of-Things devices—like cameras, lighting, refrigerators, security systems, smart speakers, and thermostats—are also endpoints.
// 21 - User: The User object describes the characteristics of a user/person or a security principal. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:UserAccount/'>d3f:UserAccount</a>.
// 22 - Email: The Email object describes the email metadata such as sender, recipients, and direction. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Email/'>d3f:Email</a>.
// 23 - UniformResourceLocator: The Uniform Resource Locator(URL) object describes the characteristics of a URL. Defined in <a target='_blank' href='https://datatracker.ietf.org/doc/html/rfc1738'>RFC 1738</a> and by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:URL/'>d3f:URL</a>.
// 24 - File: The File object represents the metadata associated with a file stored in a computer system. It encompasses information about the file itself, including its attributes, properties, and organizational details. Defined by D3FEND <a target='_blank' href='https://next.d3fend.mitre.org/dao/artifact/d3f:File/'>d3f:File</a>.
// 25 - Process: The Process object describes a running instance of a launched program. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Process/'>d3f:Process</a>.
// 26 - GeoLocation: The Geo Location object describes a geographical location, usually associated with an IP address. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:PhysicalLocation/'>d3f:PhysicalLocation</a>.
// 27 - Container: The Container object describes an instance of a specific container. A container is a prepackaged, portable system image that runs isolated on an existing system using a container runtime like containerd.
// 30 - Fingerprint: The Fingerprint object provides detailed information about a digital fingerprint, which is a compact representation of data used to identify a longer piece of information, such as a public key or file content. It contains the algorithm and value of the fingerprint, enabling efficient and reliable identification of the associated data.
// 99 - Other: The observable data type is not mapped. See the <code>type</code> attribute, which may contain data source specific value.
type ObservableTypeId = int

// The Organization object describes characteristics of an organization or company and its division if any.
type Organization struct {
	// The name of the organization. For example, Widget, Inc.
	Name *string `json:"name,omitempty"`
	// The name of the organizational unit, within an organization. For example, Finance, IT, R&D
	OuName *string `json:"ou_name,omitempty"`
	// The alternate identifier for an entity's unique identifier. For example, its Active Directory OU DN or AWS OU ID.
	OuUid *string `json:"ou_uid,omitempty"`
	// The unique identifier of the organization. For example, its Active Directory or AWS Org ID.
	Uid *string `json:"uid,omitempty"`
}

// The Operating System (OS) object describes characteristics of an OS, such as Linux or Windows. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:OperatingSystem/'>d3f:OperatingSystem</a>.
type Os struct {
	// The operating system build number.
	Build *string `json:"build,omitempty"`
	// The operating system country code, as defined by the ISO 3166-1 standard (Alpha-2 code). For the complete list of country codes, see <a target='_blank' href='https://www.iso.org/obp/ui/#iso:pub:PUB500001:en'>ISO 3166-1 alpha-2 codes</a>.
	Country *string `json:"country,omitempty"`
	// The cpu architecture, the number of bits used for addressing in memory. For example: <code>32</code> or <code>64</code>.
	CpuBits *int `json:"cpu_bits,omitempty"`
	// The operating system edition. For example: <code>Professional</code>.
	Edition *string `json:"edition,omitempty"`
	// The two letter lower case language codes, as defined by <a target='_blank' href='https://en.wikipedia.org/wiki/ISO_639-1'>ISO 639-1</a>. For example: <code>en</code> (English), <code>de</code> (German), or <code>fr</code> (French).
	Lang *string `json:"lang,omitempty"`
	// The operating system name.
	Name string `json:"name"`
	// The name of the latest Service Pack.
	SpName *string `json:"sp_name,omitempty"`
	// The version number of the latest Service Pack.
	SpVer *int `json:"sp_ver,omitempty"`
	// The type of the operating system.
	Type *string `json:"type,omitempty"`
	// The type identifier of the operating system.
	TypeId OsTypeId `json:"type_id"`
	// The version of the OS running on the device that originated the event. For example: "Windows 10", "OS X 10.7", or "iOS 9".
	Version *string `json:"version,omitempty"`
}

// OsTypeId is an enum, and the following values are allowed.
// 0 - Unknown: The type is unknown.
// 99 - Other: The type is not mapped. See the <code>type</code> attribute, which may contain a data source specific value.
// 100 - Windows
// 101 - WindowsMobile
// 200 - Linux
// 201 - Android
// 300 - macOS
// 301 - iOS
// 302 - iPadOS
// 400 - Solaris
// 401 - AIX
// 402 - UX
type OsTypeId = int

// The Policy object describes the policies that are applicable. <p>Policy attributes provide traceability to the operational state of the security product at the time that the event was captured, facilitating forensics, troubleshooting, and policy tuning/adjustments.</p>
type Policy struct {
	// The description of the policy.
	Desc *string `json:"desc,omitempty"`
	// The policy group.
	Group *Group `json:"group,omitempty"`
	// The policy name. For example: <code>IAM Policy</code>.
	Name *string `json:"name,omitempty"`
	// A unique identifier of the policy instance.
	Uid *string `json:"uid,omitempty"`
	// The policy version number.
	Version *string `json:"version,omitempty"`
}

// The Process object describes a running instance of a launched program. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Process/'>d3f:Process</a>.
type Process struct {
	// The audit user assigned at login by the audit subsystem.
	Auid *int `json:"auid,omitempty"`
	// The full command line used to launch an application, service, process, or job. For example: <code>ssh user@10.0.0.10</code>. If the command line is unavailable or missing, the empty string <code>”</code> is to be used
	CmdLine *string `json:"cmd_line,omitempty"`
	// The information describing an instance of a container. A container is a prepackaged, portable system image that runs isolated on an existing system using a container runtime like containerd.
	Container *Container `json:"container,omitempty"`
	// The time when the process was created/started.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The time when the process was created/started.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The effective group under which this process is running.
	Egid *int `json:"egid,omitempty"`
	// The effective user under which this process is running.
	Euid *int `json:"euid,omitempty"`
	// The process file object.
	File *File `json:"file,omitempty"`
	// The group under which this process is running.
	Group *Group `json:"group,omitempty"`
	// The process integrity level, normalized to the caption of the direction_id value. In the case of 'Other', it is defined by the event source (Windows only).
	Integrity *string `json:"integrity,omitempty"`
	// The normalized identifier of the process integrity level (Windows only).
	IntegrityId *ProcessIntegrityId `json:"integrity_id,omitempty"`
	// The lineage of the process, represented by a list of paths for each ancestor process. For example: <code>['/usr/sbin/sshd', '/usr/bin/bash', '/usr/bin/whoami']</code>
	Lineage []string `json:"lineage,omitempty"`
	// The list of loaded module names.
	LoadedModules []string `json:"loaded_modules,omitempty"`
	// The friendly name of the process, for example: <code>Notepad++</code>.
	Name *ProcessName `json:"name,omitempty"`
	// If running under a process namespace (such as in a container), the process identifier within that process namespace.
	NamespacePid *int `json:"namespace_pid,omitempty"`
	// The parent process of this process object. It is recommended to only populate this field for the first process object, to prevent deep nesting.
	ParentProcess *Object `json:"parent_process,omitempty"`
	// The process identifier, as reported by the operating system. Process ID (PID) is a number used by the operating system to uniquely identify an active process.
	Pid *int `json:"pid,omitempty"`
	// The name of the containment jail (i.e., sandbox). For example, hardened_ps, high_security_ps, oracle_ps, netsvcs_ps, or default_ps.
	Sandbox *string `json:"sandbox,omitempty"`
	// The user session under which this process is running.
	Session *Session `json:"session,omitempty"`
	// The time when the process was terminated.
	TerminatedTime *Timestamp `json:"terminated_time,omitempty"`
	// The time when the process was terminated.
	TerminatedTimeDt *time.Time `json:"terminated_time_dt,omitempty"`
	// The Identifier of the thread associated with the event, as returned by the operating system.
	Tid *int `json:"tid,omitempty"`
	// A unique identifier for this process assigned by the producer (tool). Facilitates correlation of a process event with other events for that process.
	Uid *string `json:"uid,omitempty"`
	// The user under which this process is running.
	User *User `json:"user,omitempty"`
	// An unordered collection of zero or more name/value pairs that represent a process extended attribute.
	Xattributes *Object `json:"xattributes,omitempty"`
}

// ProcessIntegrityId is an enum, and the following values are allowed.
// 0 - Unknown
// 1 - Untrusted
// 2 - Low
// 3 - Medium
// 4 - High
// 5 - System
// 6 - Protected
// 99 - Other
type ProcessIntegrityId = int

// The Product object describes characteristics of a software product.
type Product struct {
	// The feature that reported the event.
	Feature *Feature `json:"feature,omitempty"`
	// The two letter lower case language codes, as defined by <a target='_blank' href='https://en.wikipedia.org/wiki/ISO_639-1'>ISO 639-1</a>. For example: <code>en</code> (English), <code>de</code> (German), or <code>fr</code> (French).
	Lang *string `json:"lang,omitempty"`
	// The name of the product.
	Name *string `json:"name,omitempty"`
	// The installation path of the product.
	Path *string `json:"path,omitempty"`
	// The unique identifier of the product.
	Uid *string `json:"uid,omitempty"`
	// The URL pointing towards the product.
	UrlString *UrlString `json:"url_string,omitempty"`
	// The name of the vendor of the product.
	VendorName string `json:"vendor_name"`
	// The version of the product, as defined by the event source. For example: <code>2013.1.3-beta</code>.
	Version *string `json:"version,omitempty"`
}

// The Reputation object describes the reputation/risk score of an entity (e.g. device, user, domain).
type Reputation struct {
	// The reputation score as reported by the event source.
	BaseScore float64 `json:"base_score"`
	// The provider of the reputation information.
	Provider *string `json:"provider,omitempty"`
	// The reputation score, normalized to the caption of the score_id value. In the case of 'Other', it is defined by the event source.
	Score *string `json:"score,omitempty"`
	// The normalized reputation score identifier.
	ScoreId ReputationScoreId `json:"score_id"`
}

// ReputationScoreId is an enum, and the following values are allowed.
// 0 - Unknown: The reputation score is unknown.
// 1 - VerySafe: Long history of good behavior.
// 2 - Safe: Consistently good behavior.
// 3 - ProbablySafe: Reasonable history of good behavior.
// 4 - LeansSafe: Starting to establish a history of normal behavior.
// 5 - MaynotbeSafe: No established history of normal behavior.
// 6 - ExerciseCaution: Starting to establish a history of suspicious or risky behavior.
// 7 - Risky: A site with a history of suspicious or risky behavior. (spam, scam, potentially unwanted software, potentially malicious).
// 8 - PossiblyMalicious: Strong possibility of maliciousness.
// 9 - ProbablyMalicious: Indicators of maliciousness.
// 10 - Malicious: Proven evidence of maliciousness.
// 99 - Other: The reputation score is not mapped. See the <code>rep_score</code> attribute, which contains a data source specific value.
type ReputationScoreId = int

// The Request Elements object describes characteristics of an API request.
type Request struct {
	// The list of communication flags, normalized to the captions of the flag_ids values. In the case of 'Other', they are defined by the event source.
	Flags []string `json:"flags,omitempty"`
	// The unique request identifier.
	Uid string `json:"uid"`
}

// The Response Elements object describes characteristics of an API response.
type Response struct {
	// The numeric response sent to a request.
	Code *int `json:"code,omitempty"`
	// Error Code
	Error *string `json:"error,omitempty"`
	// Error Message
	ErrorMessage *string `json:"error_message,omitempty"`
	// The list of communication flags, normalized to the captions of the flag_ids values. In the case of 'Other', they are defined by the event source.
	Flags []string `json:"flags,omitempty"`
	// The description of the event, as defined by the event source.
	Message *string `json:"message,omitempty"`
}

// The Subject Alternative name (SAN) object describes a SAN secured by a digital certificate
type San struct {
	// Name of SAN (e.g. The actual IP Address or domain.)
	Name string `json:"name"`
	// Type descriptor of SAN (e.g. IP Address/domain/etc.)
	Type string `json:"type"`
}

// The Service object describes characteristics of a service, <code> e.g. AWS EC2. </code>
type Service struct {
	// The list of labels associated with the service.
	Labels []string `json:"labels,omitempty"`
	// The name of the service.
	Name *string `json:"name,omitempty"`
	// The unique identifier of the service.
	Uid *string `json:"uid,omitempty"`
	// The version of the service.
	Version *string `json:"version,omitempty"`
}

// The Session object describes details about an authenticated session. e.g. Session Creation Time, Session Issuer. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Session/'>d3f:Session</a>.
type Session struct {
	// The time when the session was created.
	CreatedTime *Timestamp `json:"created_time,omitempty"`
	// The time when the session was created.
	CreatedTimeDt *time.Time `json:"created_time_dt,omitempty"`
	// The unique identifier of the user's credential. For example, AWS Access Key ID.
	CredentialUid *string `json:"credential_uid,omitempty"`
	// The session expiration time.
	ExpirationTime *Timestamp `json:"expiration_time,omitempty"`
	// The session expiration time.
	ExpirationTimeDt *time.Time `json:"expiration_time_dt,omitempty"`
	// The indication of whether the session is remote.
	IsRemote *bool `json:"is_remote,omitempty"`
	// The identifier of the session issuer.
	Issuer *string `json:"issuer,omitempty"`
	// The unique identifier of the session.
	Uid *string `json:"uid,omitempty"`
	// The universally unique identifier of the session.
	Uuid *string `json:"uuid,omitempty"`
}

// The Tactic object describes the tactic IDs and/or name that are associated with the attack technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>.
type Tactic struct {
	// The tactic name that is associated with the attack technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>.
	Name *string `json:"name,omitempty"`
	// The tactic ID that is associated with the attack technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>.
	Uid *string `json:"uid,omitempty"`
}

// The Technique object describes the technique related to an attack, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>.
type Technique struct {
	// The name of the attack technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>. For example: <code>Drive-by Compromise</code>.
	Name *string `json:"name,omitempty"`
	// The unique identifier of the attack technique, as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>. For example: <code>T1189</code>.
	Uid *string `json:"uid,omitempty"`
}

// The Transport Layer Security (TLS) object describes the negotiated TLS protocol used for secure communications over an establish network connection.
type Tls struct {
	// The integer value of TLS alert if present. The alerts are defined in the TLS specification in <a target='_blank' href='https://datatracker.ietf.org/doc/html/rfc2246'>RFC-2246</a>.
	Alert *int `json:"alert,omitempty"`
	// The certificate object containing information about the digital certificate.
	Certificate *Certificate `json:"certificate,omitempty"`
	// The Chain of Certificate Serial Numbers field provides a chain of Certificate Issuer Serial Numbers leading to the Root Certificate Issuer.
	CertificateChain []string `json:"certificate_chain,omitempty"`
	// The negotiated cipher suite.
	Cipher *string `json:"cipher,omitempty"`
	// The client cipher suites that were exchanged during the TLS handshake negotiation.
	ClientCiphers []string `json:"client_ciphers,omitempty"`
	// The list of TLS extensions.
	ExtensionList []*TlsExtension `json:"extension_list,omitempty"`
	// The amount of total time for the TLS handshake to complete after the TCP connection is established, including client-side delays, in milliseconds.
	HandshakeDur *int `json:"handshake_dur,omitempty"`
	// The MD5 hash of a JA3 string.
	Ja3Hash *Fingerprint `json:"ja3_hash,omitempty"`
	// The MD5 hash of a JA3S string.
	Ja3SHash *Fingerprint `json:"ja3s_hash,omitempty"`
	// The length of the encryption key.
	KeyLength *int `json:"key_length,omitempty"`
	// The list of subject alternative names that are secured by a specific certificate.
	Sans []*San `json:"sans,omitempty"`
	// The server cipher suites that were exchanged during the TLS handshake negotiation.
	ServerCiphers []string `json:"server_ciphers,omitempty"`
	// The Server Name Indication (SNI) extension sent by the client.
	Sni *string `json:"sni,omitempty"`
	// The TLS protocol version.
	Version string `json:"version"`
}

// The TLS Extension object describes additional attributes that extend the base Transport Layer Security (TLS) object.
type TlsExtension struct {
	// The data contains information specific to the particular extension type.
	Data interface{} `json:"data,omitempty"`
	// The TLS extension type. For example: <code>Server Name</code>.
	Type *string `json:"type,omitempty"`
	// The TLS extension type identifier. See <a target='_blank' href='https://datatracker.ietf.org/doc/html/rfc8446#page-35'>The Transport Layer Security (TLS) extension page</a>.
	TypeId TlsExtensionTypeId `json:"type_id"`
}

// TlsExtensionTypeId is an enum, and the following values are allowed.
// 0 - name: The Server Name Indication extension.
// 1 - fragment_length: The Maximum Fragment Length Negotiation extension.
// 5 - request: The Certificate Status Request extension.
// 10 - groups: The Supported Groups extension.
// 13 - algorithms: The Signature Algorithms extension.
// 14 - srtp: The Use SRTP data protection extension.
// 15 - heartbeat: The Heartbeat extension.
// 16 - layer_protocol_negotiation: The Application-Layer Protocol Negotiation extension.
// 18 - certificate_timestamp: The Signed Certificate Timestamp extension.
// 19 - certificate_type: The Client Certificate Type extension.
// 20 - certificate_type: The Server Certificate Type extension.
// 21 - padding: The Padding extension.
// 41 - shared_key: The Pre Shared Key extension.
// 42 - data: The Early Data extension.
// 43 - versions: The Supported Versions extension.
// 44 - cookie: The Cookie extension.
// 45 - key_exchange_modes: The Pre-Shared Key Exchange Modes extension.
// 47 - authorities: The Certificate Authorities extension.
// 48 - filters: The OID Filters extension.
// 49 - handshake_auth: The Post-Handshake Client Authentication extension.
// 50 - algorithms_cert: The Signature Algorithms extension.
// 51 - share: The Key Share extension.
// 99 - Other: The type is not mapped. See the <code>type</code> attribute, which may contain a data source specific value.
type TlsExtensionTypeId = int

// The User object describes the characteristics of a user/person or a security principal. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:UserAccount/'>d3f:UserAccount</a>.
type User struct {
	// The user's account or the account associated with the user.
	Account *Account `json:"account,omitempty"`
	// The unique identifier of the user's credential. For example, AWS Access Key ID.
	CredentialUid *string `json:"credential_uid,omitempty"`
	// The domain where the user is defined. For example: the LDAP or Active Directory domain.
	Domain *string `json:"domain,omitempty"`
	// The user's email address.
	EmailAddr *EmailAddress `json:"email_addr,omitempty"`
	// The full name of the person, as per the LDAP Common Name attribute (cn).
	FullName *string `json:"full_name,omitempty"`
	// The administrative groups to which the user belongs.
	Groups []*Group `json:"groups,omitempty"`
	// The username. For example, <code>janedoe1</code>.
	Name *UserName `json:"name,omitempty"`
	// Organization and org unit related to the user.
	Org *Organization `json:"org,omitempty"`
	// The type of the user. For example, System, AWS IAM User, etc.
	Type *string `json:"type,omitempty"`
	// The account type identifier.
	TypeId UserTypeId `json:"type_id"`
	// The unique user identifier. For example, the Windows user SID, ActiveDirectory DN or AWS user ARN.
	Uid *string `json:"uid,omitempty"`
	// The alternate user identifier. For example, the Active Directory user GUID or AWS user Principal ID.
	UidAlt *string `json:"uid_alt,omitempty"`
}

// UserTypeId is an enum, and the following values are allowed.
// 0 - Unknown: The type is unknown.
// 1 - User: Regular user account.
// 2 - Admin: Admin/root user account.
// 3 - System: System account. For example, Windows computer accounts with a trailing dollar sign ($).
// 99 - Other: The type is not mapped. See the <code>type</code> attribute, which may contain a data source specific value.
type UserTypeId = int
