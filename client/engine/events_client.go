// This file was auto-generated by Fern from our API Definition.

package engine

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	io "io"
	http "net/http"
	url "net/url"

	core "github.com/synqly/go-sdk/client/engine/core"
)

type EventsClient interface {
	PostEvent(ctx context.Context, request *Event) error
	BatchEvent(ctx context.Context, request []*Event) error
	ListEvents(ctx context.Context, request *ListEventsRequest) (*ListEventsResponse, error)
}

func NewEventsClient(opts ...core.ClientOption) EventsClient {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &eventsClient{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type eventsClient struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

// Post event to intergration
func (e *eventsClient) PostEvent(ctx context.Context, request *Event) error {
	baseURL := ""
	if e.baseURL != "" {
		baseURL = e.baseURL
	}
	endpointURL := baseURL + "/" + "v1/events/post"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	if err := core.DoRequest(
		ctx,
		e.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		nil,
		e.header,
		errorDecoder,
	); err != nil {
		return err
	}
	return nil
}

// Post batch to integration
func (e *eventsClient) BatchEvent(ctx context.Context, request []*Event) error {
	baseURL := ""
	if e.baseURL != "" {
		baseURL = e.baseURL
	}
	endpointURL := baseURL + "/" + "v1/events/batch"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	if err := core.DoRequest(
		ctx,
		e.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		nil,
		e.header,
		errorDecoder,
	); err != nil {
		return err
	}
	return nil
}

// List events
func (e *eventsClient) ListEvents(ctx context.Context, request *ListEventsRequest) (*ListEventsResponse, error) {
	baseURL := ""
	if e.baseURL != "" {
		baseURL = e.baseURL
	}
	endpointURL := baseURL + "/" + "v1/events/list"

	queryParams := make(url.Values)
	var limitDefaultValue int
	if request.Limit != limitDefaultValue {
		queryParams.Add("limit", fmt.Sprintf("%v", request.Limit))
	}
	var cursorDefaultValue string
	if request.Cursor != cursorDefaultValue {
		queryParams.Add("cursor", fmt.Sprintf("%v", request.Cursor))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(ListEventsResponse)
	if err := core.DoRequest(
		ctx,
		e.httpClient,
		endpointURL,
		http.MethodGet,
		request,
		&response,
		e.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}
