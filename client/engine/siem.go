// This file was auto-generated by Fern from our API Definition.

package engine

type GetInvestigationEvidenceRequest struct {
	// Include the raw data from the SIEM in the response. Defaults to `false`.
	IncludeRawData *bool `json:"-"`
}

type GetInvestigationRequest struct {
	// Include the raw data from the SIEM in the response. Defaults to `false`.
	IncludeRawData *bool `json:"-"`
}

type QuerySiemEventsRequest struct {
	// Cursor to use to retrieve the next page of results.
	Cursor *string `json:"-"`
	// Number of `Account` objects to return in this page. Defaults to 100.
	Limit *int `json:"-"`
	// Select a field to order the results by. Defaults to `time`. To control the direction of the sorting, append
	// `[asc]` or `[desc]` to the field name. For example, `name[desc]` will sort the results by `name` in descending order.
	// The ordering defaults to `asc` if not specified. May be used multiple times to order by multiple fields, and the
	// ordering is applied in the order the fields are specified.
	Order []*string `json:"-"`
	// Filter results by this query. For more information on filtering, refer to our Filtering Guide. Defaults to no filter.
	// If used more than once, the queries are ANDed together.
	Filter []*string `json:"-"`
	// Add metadata to the response by invoking meta functions.
	Meta []*string `json:"-"`
	// Provider-specific query to pass through to the SIEM. This is useful for advanced queries that are not
	// supported by the API. The keys and values are provider-specific. For example, to perform a specific query in
	// Rapid7 IDR, you can use the `query: "{advanced query}"` key-value pair.
	PassthroughParam []*string `json:"-"`
	// Include the raw data from the SIEM in the response. This is useful for debugging and troubleshooting.
	// Defaults to `false`.
	IncludeRawData *bool `json:"-"`
}

type QueryInvestigationsRequest struct {
	// Cursor to use to retrieve the next page of results.
	Cursor *string `json:"-"`
	// Number of `Investigation` objects to return in this page. Defaults to 100.
	Limit *int `json:"-"`
	// Select a field to order the results by.
	Order []*string `json:"-"`
	// Filter results by this query.
	Filter []*string `json:"-"`
	// Include the raw data from the SIEM in the response. Defaults to `false`.
	IncludeRawData *bool `json:"-"`
}

type GetEvidenceResponse struct {
	// List of evidence associated with an investigation
	Result *Evidence `json:"result,omitempty"`
}

type GetInvestigationResponse struct {
	// The investigation object
	Result *Investigation `json:"result,omitempty"`
}

// JSON patch to apply to an investigation. A JSON patch is a list of operations, and each operation
// is a map with the following keys:
//
// - `op`: The operation to perform. Supported values are `add`, `replace`, `remove`, `copy`, and `move`.
// - `path`: The path to the field to update. The path is a JSON Pointer.
// - `value`: The value to set the field to. This is required for `add` and `replace` operations.
// - `from`: The path to the field to copy from. This is required for `copy` and `move` operations.
type PatchInvestigationRequest = []map[string]interface{}

type QueryInvestigationResponse struct {
	// List of investigations
	Result []*Investigation `json:"result,omitempty"`
	// Cursor to use to retrieve the next page of results
	Cursor string `json:"cursor"`
}

type QuerySiemEventsResponse struct {
	// List of events
	Result []map[string]interface{} `json:"result,omitempty"`
	// Metadata about the query results organized by group, then type, then field.
	Meta *MetaResponse `json:"meta,omitempty"`
	// Cursor to use to retrieve the next page of results
	Cursor string `json:"cursor"`
}
