// This file was auto-generated by Fern from our API Definition.

package engine

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	io "io"
	http "net/http"
	url "net/url"

	core "github.com/synqly/go-sdk/client/engine/core"
)

type TicketingClient interface {
	ListTickets(ctx context.Context, request *ListTicketsRequest) (*ListTicketsResponse, error)
	ListProjects(ctx context.Context) (*ListProjectsResponse, error)
	GetTicket(ctx context.Context, id TicketId) (*GetTicketResponse, error)
	CreateTicket(ctx context.Context, request CreateTicketRequest) (*CreateTicketResponse, error)
	PatchTicket(ctx context.Context, id TicketId, request []map[string]any) (*PatchTicketResponse, error)
}

func NewTicketingClient(opts ...core.ClientOption) TicketingClient {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &ticketingClient{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type ticketingClient struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

// List tickets
func (t *ticketingClient) ListTickets(ctx context.Context, request *ListTicketsRequest) (*ListTicketsResponse, error) {
	baseURL := ""
	if t.baseURL != "" {
		baseURL = t.baseURL
	}
	endpointURL := baseURL + "/" + "v1/tickets/list"

	queryParams := make(url.Values)
	var searchDefaultValue string
	if request.Search != searchDefaultValue {
		queryParams.Add("search", fmt.Sprintf("%v", request.Search))
	}
	var projectDefaultValue string
	if request.Project != projectDefaultValue {
		queryParams.Add("project", fmt.Sprintf("%v", request.Project))
	}
	var cursorDefaultValue string
	if request.Cursor != cursorDefaultValue {
		queryParams.Add("cursor", fmt.Sprintf("%v", request.Cursor))
	}
	var limitDefaultValue int
	if request.Limit != limitDefaultValue {
		queryParams.Add("limit", fmt.Sprintf("%v", request.Limit))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(ListTicketsResponse)
	if err := core.DoRequest(
		ctx,
		t.httpClient,
		endpointURL,
		http.MethodGet,
		request,
		&response,
		t.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// List projects.
func (t *ticketingClient) ListProjects(ctx context.Context) (*ListProjectsResponse, error) {
	baseURL := ""
	if t.baseURL != "" {
		baseURL = t.baseURL
	}
	endpointURL := baseURL + "/" + "v1/tickets/projects"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(ListProjectsResponse)
	if err := core.DoRequest(
		ctx,
		t.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		t.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Get ticket
func (t *ticketingClient) GetTicket(ctx context.Context, id TicketId) (*GetTicketResponse, error) {
	baseURL := ""
	if t.baseURL != "" {
		baseURL = t.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/tickets/get/%v", id)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(GetTicketResponse)
	if err := core.DoRequest(
		ctx,
		t.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		t.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Download file from storage
func (t *ticketingClient) CreateTicket(ctx context.Context, request CreateTicketRequest) (*CreateTicketResponse, error) {
	baseURL := ""
	if t.baseURL != "" {
		baseURL = t.baseURL
	}
	endpointURL := baseURL + "/" + "v1/tickets/create"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(CreateTicketResponse)
	if err := core.DoRequest(
		ctx,
		t.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		t.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Patch ticket
func (t *ticketingClient) PatchTicket(ctx context.Context, id TicketId, request []map[string]any) (*PatchTicketResponse, error) {
	baseURL := ""
	if t.baseURL != "" {
		baseURL = t.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/tickets/patch/%v", id)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(PatchTicketResponse)
	if err := core.DoRequest(
		ctx,
		t.httpClient,
		endpointURL,
		http.MethodPatch,
		request,
		&response,
		t.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}
