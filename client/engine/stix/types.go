// This file was auto-generated by Fern from our API Definition.

package stix

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/synqly/go-sdk/client/engine/core"
	time "time"
)

type Bundle struct {
	// The id property is a required property that uniquely identifies the bundle.
	Id BundleId `json:"id" url:"id"`
	// The objects property is an array of STIX Objects (json representation) that are part of the bundle.
	Objects []interface{} `json:"objects" url:"objects"`
	type_   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *Bundle) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *Bundle) Type() string {
	return b.type_
}

func (b *Bundle) UnmarshalJSON(data []byte) error {
	type embed Bundle
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = Bundle(unmarshaler.embed)
	if unmarshaler.Type != "bundle" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", b, "bundle", unmarshaler.Type)
	}
	b.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *b, "type")
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = nil
	return nil
}

func (b *Bundle) MarshalJSON() ([]byte, error) {
	type embed Bundle
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*b),
		Type:  "bundle",
	}
	return json.Marshal(marshaler)
}

func (b *Bundle) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// The id property is a required property that uniquely identifies the bundle.
type BundleId = Id

type CommonProperties struct {
	// The id property uniquely identifies this object.
	Id Id `json:"id" url:"id"`
	// The created_by_ref property specifies the id property of the identity object that describes the entity that created this object.
	CreatedByRef *Identity `json:"created_by_ref,omitempty" url:"created_by_ref,omitempty"`
	// The created property represents the time at which the object was originally created.
	Created time.Time `json:"created" url:"created"`
	// The modified property is only used by STIX Objects that support versioning and represents the time that this particular version of the object was last modified.
	Modified time.Time `json:"modified" url:"modified"`
	// The revoked property indicates whether this object has been revoked. If the revoked property is present and set to true, then the object has been revoked.
	Revoked *bool `json:"revoked,omitempty" url:"revoked,omitempty"`
	// The labels property is an array of strings that are used to categorize this object.
	Labels []string `json:"labels,omitempty" url:"labels,omitempty"`
	// The confidence property is an integer from 0 to 100 that represents the confidence that this object is accurate and valid.
	Confidence *int `json:"confidence,omitempty" url:"confidence,omitempty"`
	// The lang property specifies the language used in the properties of the object.
	Lang *string `json:"lang,omitempty" url:"lang,omitempty"`
	// The external_references property is an array of external references that are relevant to this object.
	ExternalReferences []*ExternalReference `json:"external_references,omitempty" url:"external_references,omitempty"`
	// The object_marking_refs property is an array of ids of marking_definition objects that apply to this object.
	ObjectMarkingRefs []*MarkingDefinition `json:"object_marking_refs,omitempty" url:"object_marking_refs,omitempty"`
	// The granular_markings property is an array of granular markings that are applied to this object.
	GranularMarkings []*GranularMarking `json:"granular_markings,omitempty" url:"granular_markings,omitempty"`
	// The extensions property is an object that contains custom properties or objects that extend the object.
	Extensions  map[string]interface{} `json:"extensions,omitempty" url:"extensions,omitempty"`
	specVersion string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CommonProperties) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CommonProperties) SpecVersion() string {
	return c.specVersion
}

func (c *CommonProperties) UnmarshalJSON(data []byte) error {
	type embed CommonProperties
	var unmarshaler = struct {
		embed
		Created     *core.DateTime `json:"created"`
		Modified    *core.DateTime `json:"modified"`
		SpecVersion string         `json:"spec_version"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CommonProperties(unmarshaler.embed)
	c.Created = unmarshaler.Created.Time()
	c.Modified = unmarshaler.Modified.Time()
	if unmarshaler.SpecVersion != "2.1" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "2.1", unmarshaler.SpecVersion)
	}
	c.specVersion = unmarshaler.SpecVersion

	extraProperties, err := core.ExtractExtraProperties(data, *c, "spec_version")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = nil
	return nil
}

func (c *CommonProperties) MarshalJSON() ([]byte, error) {
	type embed CommonProperties
	var marshaler = struct {
		embed
		Created     *core.DateTime `json:"created"`
		Modified    *core.DateTime `json:"modified"`
		SpecVersion string         `json:"spec_version"`
	}{
		embed:       embed(*c),
		Created:     core.NewDateTime(c.Created),
		Modified:    core.NewDateTime(c.Modified),
		SpecVersion: "2.1",
	}
	return json.Marshal(marshaler)
}

func (c *CommonProperties) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ExternalReference struct {
	// The source_name property specifies the name of the source that provided the external reference.
	SourceName string `json:"source_name" url:"source_name"`
	// The description property provides a human-readable explanation of the external reference.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The url property specifies the URL of the external reference.
	Url *string `json:"url,omitempty" url:"url,omitempty"`
	// The hash property specifies a hash value that uniquely identifies the external reference.
	Hash *string `json:"hash,omitempty" url:"hash,omitempty"`
	// The external_id property specifies an identifier used by the source of the external reference.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExternalReference) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExternalReference) UnmarshalJSON(data []byte) error {
	type unmarshaler ExternalReference
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExternalReference(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = nil
	return nil
}

func (e *ExternalReference) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type GranularMarking struct {
	// The lang property specifies the language used in the properties of the marking_definition object.
	Lang *string `json:"lang,omitempty" url:"lang,omitempty"`
	// The marking_ref property specifies the id property of the marking_definition object that applies to this object.
	MarkingRef *MarkingDefinition `json:"marking_ref,omitempty" url:"marking_ref,omitempty"`
	// The selectors property is an array of strings that represent the selectors that are used to apply the marking_definition object to this object.
	Selectors []string `json:"selectors" url:"selectors"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GranularMarking) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GranularMarking) UnmarshalJSON(data []byte) error {
	type unmarshaler GranularMarking
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GranularMarking(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = nil
	return nil
}

func (g *GranularMarking) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type Id = string

type Identity struct {
	// The id property uniquely identifies this object.
	Id Id `json:"id" url:"id"`
	// The created_by_ref property specifies the id property of the identity object that describes the entity that created this object.
	CreatedByRef *Identity `json:"created_by_ref,omitempty" url:"created_by_ref,omitempty"`
	// The created property represents the time at which the object was originally created.
	Created time.Time `json:"created" url:"created"`
	// The modified property is only used by STIX Objects that support versioning and represents the time that this particular version of the object was last modified.
	Modified time.Time `json:"modified" url:"modified"`
	// The revoked property indicates whether this object has been revoked. If the revoked property is present and set to true, then the object has been revoked.
	Revoked *bool `json:"revoked,omitempty" url:"revoked,omitempty"`
	// The labels property is an array of strings that are used to categorize this object.
	Labels []string `json:"labels,omitempty" url:"labels,omitempty"`
	// The confidence property is an integer from 0 to 100 that represents the confidence that this object is accurate and valid.
	Confidence *int `json:"confidence,omitempty" url:"confidence,omitempty"`
	// The lang property specifies the language used in the properties of the object.
	Lang *string `json:"lang,omitempty" url:"lang,omitempty"`
	// The external_references property is an array of external references that are relevant to this object.
	ExternalReferences []*ExternalReference `json:"external_references,omitempty" url:"external_references,omitempty"`
	// The object_marking_refs property is an array of ids of marking_definition objects that apply to this object.
	ObjectMarkingRefs []*MarkingDefinition `json:"object_marking_refs,omitempty" url:"object_marking_refs,omitempty"`
	// The granular_markings property is an array of granular markings that are applied to this object.
	GranularMarkings []*GranularMarking `json:"granular_markings,omitempty" url:"granular_markings,omitempty"`
	// The extensions property is an object that contains custom properties or objects that extend the object.
	Extensions map[string]interface{} `json:"extensions,omitempty" url:"extensions,omitempty"`
	// The value of this property MUST be identity.
	Type string `json:"type" url:"type"`
	// The name of this Identity. When referring to a specific entity (e.g., an individual or organization), this property SHOULD contain the canonical name of the specific entity.
	Name        string  `json:"name" url:"name"`
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The list of roles that this Identity performs. No open vocabulary is yet defined for this property.
	Roles         *string          `json:"roles,omitempty" url:"roles,omitempty"`
	IdentityClass *IdentityClassOv `json:"identity_class,omitempty" url:"identity_class,omitempty"`
	specVersion   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *Identity) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *Identity) SpecVersion() string {
	return i.specVersion
}

func (i *Identity) UnmarshalJSON(data []byte) error {
	type embed Identity
	var unmarshaler = struct {
		embed
		Created     *core.DateTime `json:"created"`
		Modified    *core.DateTime `json:"modified"`
		SpecVersion string         `json:"spec_version"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = Identity(unmarshaler.embed)
	i.Created = unmarshaler.Created.Time()
	i.Modified = unmarshaler.Modified.Time()
	if unmarshaler.SpecVersion != "2.1" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "2.1", unmarshaler.SpecVersion)
	}
	i.specVersion = unmarshaler.SpecVersion

	extraProperties, err := core.ExtractExtraProperties(data, *i, "spec_version")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = nil
	return nil
}

func (i *Identity) MarshalJSON() ([]byte, error) {
	type embed Identity
	var marshaler = struct {
		embed
		Created     *core.DateTime `json:"created"`
		Modified    *core.DateTime `json:"modified"`
		SpecVersion string         `json:"spec_version"`
	}{
		embed:       embed(*i),
		Created:     core.NewDateTime(i.Created),
		Modified:    core.NewDateTime(i.Modified),
		SpecVersion: "2.1",
	}
	return json.Marshal(marshaler)
}

func (i *Identity) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type KillChainPhase struct {
	// The kill_chain_name property specifies the name of the kill chain to which the phase belongs.
	KillChainName string `json:"kill_chain_name" url:"kill_chain_name"`
	// The phase_name property specifies the name of the phase within the kill chain.
	PhaseName string `json:"phase_name" url:"phase_name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (k *KillChainPhase) GetExtraProperties() map[string]interface{} {
	return k.extraProperties
}

func (k *KillChainPhase) UnmarshalJSON(data []byte) error {
	type unmarshaler KillChainPhase
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*k = KillChainPhase(value)

	extraProperties, err := core.ExtractExtraProperties(data, *k)
	if err != nil {
		return err
	}
	k.extraProperties = extraProperties

	k._rawJSON = nil
	return nil
}

func (k *KillChainPhase) String() string {
	if len(k._rawJSON) > 0 {
		if value, err := core.StringifyJSON(k._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(k); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", k)
}

type MarkingDefinition struct {
	// The type property identifies the type of object. The value of this property MUST be marking_definition.
	Type string  `json:"type" url:"type"`
	Name *string `json:"name,omitempty" url:"name,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MarkingDefinition) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MarkingDefinition) UnmarshalJSON(data []byte) error {
	type unmarshaler MarkingDefinition
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MarkingDefinition(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = nil
	return nil
}

func (m *MarkingDefinition) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type Relationships struct {
	// The id property uniquely identifies this object.
	Id Id `json:"id" url:"id"`
	// The created_by_ref property specifies the id property of the identity object that describes the entity that created this object.
	CreatedByRef *Identity `json:"created_by_ref,omitempty" url:"created_by_ref,omitempty"`
	// The created property represents the time at which the object was originally created.
	Created time.Time `json:"created" url:"created"`
	// The modified property is only used by STIX Objects that support versioning and represents the time that this particular version of the object was last modified.
	Modified time.Time `json:"modified" url:"modified"`
	// The revoked property indicates whether this object has been revoked. If the revoked property is present and set to true, then the object has been revoked.
	Revoked *bool `json:"revoked,omitempty" url:"revoked,omitempty"`
	// The labels property is an array of strings that are used to categorize this object.
	Labels []string `json:"labels,omitempty" url:"labels,omitempty"`
	// The confidence property is an integer from 0 to 100 that represents the confidence that this object is accurate and valid.
	Confidence *int `json:"confidence,omitempty" url:"confidence,omitempty"`
	// The lang property specifies the language used in the properties of the object.
	Lang *string `json:"lang,omitempty" url:"lang,omitempty"`
	// The external_references property is an array of external references that are relevant to this object.
	ExternalReferences []*ExternalReference `json:"external_references,omitempty" url:"external_references,omitempty"`
	// The object_marking_refs property is an array of ids of marking_definition objects that apply to this object.
	ObjectMarkingRefs []*MarkingDefinition `json:"object_marking_refs,omitempty" url:"object_marking_refs,omitempty"`
	// The granular_markings property is an array of granular markings that are applied to this object.
	GranularMarkings []*GranularMarking `json:"granular_markings,omitempty" url:"granular_markings,omitempty"`
	// The extensions property is an object that contains custom properties or objects that extend the object.
	Extensions       map[string]interface{} `json:"extensions,omitempty" url:"extensions,omitempty"`
	RelationshipType string                 `json:"relationship_type" url:"relationship_type"`
	Description      *string                `json:"description,omitempty" url:"description,omitempty"`
	SourceRef        Id                     `json:"source_ref" url:"source_ref"`
	TargetRef        Id                     `json:"target_ref" url:"target_ref"`
	StartTime        *time.Time             `json:"start_time,omitempty" url:"start_time,omitempty"`
	StopTime         *time.Time             `json:"stop_time,omitempty" url:"stop_time,omitempty"`
	specVersion      string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *Relationships) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *Relationships) SpecVersion() string {
	return r.specVersion
}

func (r *Relationships) UnmarshalJSON(data []byte) error {
	type embed Relationships
	var unmarshaler = struct {
		embed
		Created     *core.DateTime `json:"created"`
		Modified    *core.DateTime `json:"modified"`
		StartTime   *core.DateTime `json:"start_time,omitempty"`
		StopTime    *core.DateTime `json:"stop_time,omitempty"`
		SpecVersion string         `json:"spec_version"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = Relationships(unmarshaler.embed)
	r.Created = unmarshaler.Created.Time()
	r.Modified = unmarshaler.Modified.Time()
	r.StartTime = unmarshaler.StartTime.TimePtr()
	r.StopTime = unmarshaler.StopTime.TimePtr()
	if unmarshaler.SpecVersion != "2.1" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "2.1", unmarshaler.SpecVersion)
	}
	r.specVersion = unmarshaler.SpecVersion

	extraProperties, err := core.ExtractExtraProperties(data, *r, "spec_version")
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = nil
	return nil
}

func (r *Relationships) MarshalJSON() ([]byte, error) {
	type embed Relationships
	var marshaler = struct {
		embed
		Created     *core.DateTime `json:"created"`
		Modified    *core.DateTime `json:"modified"`
		StartTime   *core.DateTime `json:"start_time,omitempty"`
		StopTime    *core.DateTime `json:"stop_time,omitempty"`
		SpecVersion string         `json:"spec_version"`
	}{
		embed:       embed(*r),
		Created:     core.NewDateTime(r.Created),
		Modified:    core.NewDateTime(r.Modified),
		StartTime:   core.NewOptionalDateTime(r.StartTime),
		StopTime:    core.NewOptionalDateTime(r.StopTime),
		SpecVersion: "2.1",
	}
	return json.Marshal(marshaler)
}

func (r *Relationships) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type Software struct {
	// The id property uniquely identifies this object.
	Id Id `json:"id" url:"id"`
	// The created_by_ref property specifies the id property of the identity object that describes the entity that created this object.
	CreatedByRef *Identity `json:"created_by_ref,omitempty" url:"created_by_ref,omitempty"`
	// The created property represents the time at which the object was originally created.
	Created time.Time `json:"created" url:"created"`
	// The modified property is only used by STIX Objects that support versioning and represents the time that this particular version of the object was last modified.
	Modified time.Time `json:"modified" url:"modified"`
	// The revoked property indicates whether this object has been revoked. If the revoked property is present and set to true, then the object has been revoked.
	Revoked *bool `json:"revoked,omitempty" url:"revoked,omitempty"`
	// The labels property is an array of strings that are used to categorize this object.
	Labels []string `json:"labels,omitempty" url:"labels,omitempty"`
	// The confidence property is an integer from 0 to 100 that represents the confidence that this object is accurate and valid.
	Confidence *int `json:"confidence,omitempty" url:"confidence,omitempty"`
	// The lang property specifies the language used in the properties of the object.
	Lang *string `json:"lang,omitempty" url:"lang,omitempty"`
	// The external_references property is an array of external references that are relevant to this object.
	ExternalReferences []*ExternalReference `json:"external_references,omitempty" url:"external_references,omitempty"`
	// The object_marking_refs property is an array of ids of marking_definition objects that apply to this object.
	ObjectMarkingRefs []*MarkingDefinition `json:"object_marking_refs,omitempty" url:"object_marking_refs,omitempty"`
	// The granular_markings property is an array of granular markings that are applied to this object.
	GranularMarkings []*GranularMarking `json:"granular_markings,omitempty" url:"granular_markings,omitempty"`
	// The extensions property is an object that contains custom properties or objects that extend the object.
	Extensions map[string]interface{} `json:"extensions,omitempty" url:"extensions,omitempty"`
	Name       string                 `json:"name" url:"name"`
	// Specifies the Common Platform Enumeration
	Cpe         *string `json:"cpe,omitempty" url:"cpe,omitempty"`
	Swid        *string `json:"swid,omitempty" url:"swid,omitempty"`
	Languages   *string `json:"languages,omitempty" url:"languages,omitempty"`
	Vendor      *string `json:"vendor,omitempty" url:"vendor,omitempty"`
	Version     *string `json:"version,omitempty" url:"version,omitempty"`
	specVersion string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *Software) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Software) SpecVersion() string {
	return s.specVersion
}

func (s *Software) UnmarshalJSON(data []byte) error {
	type embed Software
	var unmarshaler = struct {
		embed
		Created     *core.DateTime `json:"created"`
		Modified    *core.DateTime `json:"modified"`
		SpecVersion string         `json:"spec_version"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = Software(unmarshaler.embed)
	s.Created = unmarshaler.Created.Time()
	s.Modified = unmarshaler.Modified.Time()
	if unmarshaler.SpecVersion != "2.1" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "2.1", unmarshaler.SpecVersion)
	}
	s.specVersion = unmarshaler.SpecVersion

	extraProperties, err := core.ExtractExtraProperties(data, *s, "spec_version")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = nil
	return nil
}

func (s *Software) MarshalJSON() ([]byte, error) {
	type embed Software
	var marshaler = struct {
		embed
		Created     *core.DateTime `json:"created"`
		Modified    *core.DateTime `json:"modified"`
		SpecVersion string         `json:"spec_version"`
	}{
		embed:       embed(*s),
		Created:     core.NewDateTime(s.Created),
		Modified:    core.NewDateTime(s.Modified),
		SpecVersion: "2.1",
	}
	return json.Marshal(marshaler)
}

func (s *Software) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type Indicator struct {
	// The id property uniquely identifies this object.
	Id Id `json:"id" url:"id"`
	// The created_by_ref property specifies the id property of the identity object that describes the entity that created this object.
	CreatedByRef *Identity `json:"created_by_ref,omitempty" url:"created_by_ref,omitempty"`
	// The created property represents the time at which the object was originally created.
	Created time.Time `json:"created" url:"created"`
	// The modified property is only used by STIX Objects that support versioning and represents the time that this particular version of the object was last modified.
	Modified time.Time `json:"modified" url:"modified"`
	// The revoked property indicates whether this object has been revoked. If the revoked property is present and set to true, then the object has been revoked.
	Revoked *bool `json:"revoked,omitempty" url:"revoked,omitempty"`
	// The labels property is an array of strings that are used to categorize this object.
	Labels []string `json:"labels,omitempty" url:"labels,omitempty"`
	// The confidence property is an integer from 0 to 100 that represents the confidence that this object is accurate and valid.
	Confidence *int `json:"confidence,omitempty" url:"confidence,omitempty"`
	// The lang property specifies the language used in the properties of the object.
	Lang *string `json:"lang,omitempty" url:"lang,omitempty"`
	// The external_references property is an array of external references that are relevant to this object.
	ExternalReferences []*ExternalReference `json:"external_references,omitempty" url:"external_references,omitempty"`
	// The object_marking_refs property is an array of ids of marking_definition objects that apply to this object.
	ObjectMarkingRefs []*MarkingDefinition `json:"object_marking_refs,omitempty" url:"object_marking_refs,omitempty"`
	// The granular_markings property is an array of granular markings that are applied to this object.
	GranularMarkings []*GranularMarking `json:"granular_markings,omitempty" url:"granular_markings,omitempty"`
	// The extensions property is an object that contains custom properties or objects that extend the object.
	Extensions map[string]interface{} `json:"extensions,omitempty" url:"extensions,omitempty"`
	// A name used to identify the Indicator.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// A description that provides more details and context about the Indicator, potentially including its purpose and its key characteristics.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// A set of categorizations for this indicator.
	IndicatorTypes []IndicatorTypeOv `json:"indicator_types,omitempty" url:"indicator_types,omitempty"`
	// The detection pattern for this Indicator MAY be expressed as a STIX Pattern as specified in section 9 or another appropriate language such as SNORT, YARA, etc.
	Pattern *string `json:"pattern,omitempty" url:"pattern,omitempty"`
	// The type of pattern expression used in the pattern property.
	PatternType *PatternTypeOv `json:"pattern_type,omitempty" url:"pattern_type,omitempty"`
	// The version of the pattern expression used in the pattern property.
	PatternVersion *string `json:"pattern_version,omitempty" url:"pattern_version,omitempty"`
	// The time from which this Indicator is considered a valid indicator of the behaviors it is related or represents.
	ValidFrom time.Time `json:"valid_from" url:"valid_from"`
	// The time at which this Indicator is no longer considered valid.
	ValidUntil *time.Time `json:"valid_until,omitempty" url:"valid_until,omitempty"`
	// The kill chain phase to which this Indicator corresponds.
	KillChainPhases []*KillChainPhase `json:"kill_chain_phases,omitempty" url:"kill_chain_phases,omitempty"`
	// The data as received from the source.
	RawData     *string `json:"raw_data,omitempty" url:"raw_data,omitempty"`
	specVersion string
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *Indicator) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *Indicator) SpecVersion() string {
	return i.specVersion
}

func (i *Indicator) Type() string {
	return i.type_
}

func (i *Indicator) UnmarshalJSON(data []byte) error {
	type embed Indicator
	var unmarshaler = struct {
		embed
		Created     *core.DateTime `json:"created"`
		Modified    *core.DateTime `json:"modified"`
		ValidFrom   *core.DateTime `json:"valid_from"`
		ValidUntil  *core.DateTime `json:"valid_until,omitempty"`
		SpecVersion string         `json:"spec_version"`
		Type        string         `json:"type"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = Indicator(unmarshaler.embed)
	i.Created = unmarshaler.Created.Time()
	i.Modified = unmarshaler.Modified.Time()
	i.ValidFrom = unmarshaler.ValidFrom.Time()
	i.ValidUntil = unmarshaler.ValidUntil.TimePtr()
	if unmarshaler.SpecVersion != "2.1" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "2.1", unmarshaler.SpecVersion)
	}
	i.specVersion = unmarshaler.SpecVersion
	if unmarshaler.Type != "indicator" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "indicator", unmarshaler.Type)
	}
	i.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *i, "spec_version", "type")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = nil
	return nil
}

func (i *Indicator) MarshalJSON() ([]byte, error) {
	type embed Indicator
	var marshaler = struct {
		embed
		Created     *core.DateTime `json:"created"`
		Modified    *core.DateTime `json:"modified"`
		ValidFrom   *core.DateTime `json:"valid_from"`
		ValidUntil  *core.DateTime `json:"valid_until,omitempty"`
		SpecVersion string         `json:"spec_version"`
		Type        string         `json:"type"`
	}{
		embed:       embed(*i),
		Created:     core.NewDateTime(i.Created),
		Modified:    core.NewDateTime(i.Modified),
		ValidFrom:   core.NewDateTime(i.ValidFrom),
		ValidUntil:  core.NewOptionalDateTime(i.ValidUntil),
		SpecVersion: "2.1",
		Type:        "indicator",
	}
	return json.Marshal(marshaler)
}

func (i *Indicator) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type Malware struct {
	// The id property uniquely identifies this object.
	Id Id `json:"id" url:"id"`
	// The created_by_ref property specifies the id property of the identity object that describes the entity that created this object.
	CreatedByRef *Identity `json:"created_by_ref,omitempty" url:"created_by_ref,omitempty"`
	// The created property represents the time at which the object was originally created.
	Created time.Time `json:"created" url:"created"`
	// The modified property is only used by STIX Objects that support versioning and represents the time that this particular version of the object was last modified.
	Modified time.Time `json:"modified" url:"modified"`
	// The revoked property indicates whether this object has been revoked. If the revoked property is present and set to true, then the object has been revoked.
	Revoked *bool `json:"revoked,omitempty" url:"revoked,omitempty"`
	// The labels property is an array of strings that are used to categorize this object.
	Labels []string `json:"labels,omitempty" url:"labels,omitempty"`
	// The confidence property is an integer from 0 to 100 that represents the confidence that this object is accurate and valid.
	Confidence *int `json:"confidence,omitempty" url:"confidence,omitempty"`
	// The lang property specifies the language used in the properties of the object.
	Lang *string `json:"lang,omitempty" url:"lang,omitempty"`
	// The external_references property is an array of external references that are relevant to this object.
	ExternalReferences []*ExternalReference `json:"external_references,omitempty" url:"external_references,omitempty"`
	// The object_marking_refs property is an array of ids of marking_definition objects that apply to this object.
	ObjectMarkingRefs []*MarkingDefinition `json:"object_marking_refs,omitempty" url:"object_marking_refs,omitempty"`
	// The granular_markings property is an array of granular markings that are applied to this object.
	GranularMarkings []*GranularMarking `json:"granular_markings,omitempty" url:"granular_markings,omitempty"`
	// The extensions property is an object that contains custom properties or objects that extend the object.
	Extensions map[string]interface{} `json:"extensions,omitempty" url:"extensions,omitempty"`
	// A description that provides more details and context about the Malware, potentially including its purpose and its key characteristics.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// A set of categorizations for this malware.
	MalwareTypes []MalwareTypeOv `json:"malware_types,omitempty" url:"malware_types,omitempty"`
	// Whether the object represents a malware family (if true) or a malware instance (if false).
	IsFamily bool `json:"is_family" url:"is_family"`
	// Alternative names used to identify this malware or malware family.
	Aliases         []string          `json:"aliases,omitempty" url:"aliases,omitempty"`
	KillChainPhases []*KillChainPhase `json:"kill_chain_phases,omitempty" url:"kill_chain_phases,omitempty"`
	FirstSeen       *time.Time        `json:"first_seen,omitempty" url:"first_seen,omitempty"`
	LastSeen        *time.Time        `json:"last_seen,omitempty" url:"last_seen,omitempty"`
	// The operating systems that the malware family or malware instance is executable on. This applies to virtualized operating systems as well as those running on bare metal.
	OperatingSystemRefs       []*Software                `json:"operating_system_refs,omitempty" url:"operating_system_refs,omitempty"`
	ArchitectureExecutionEnvs []ProcessorArchitectureOv  `json:"architecture_execution_envs,omitempty" url:"architecture_execution_envs,omitempty"`
	ImplementationLanguages   []ImplementationLanguageOv `json:"implementation_languages,omitempty" url:"implementation_languages,omitempty"`
	Capabilities              []MalwareCapabilitiesOv    `json:"capabilities,omitempty" url:"capabilities,omitempty"`
	specVersion               string
	type_                     string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *Malware) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *Malware) SpecVersion() string {
	return m.specVersion
}

func (m *Malware) Type() string {
	return m.type_
}

func (m *Malware) UnmarshalJSON(data []byte) error {
	type embed Malware
	var unmarshaler = struct {
		embed
		Created     *core.DateTime `json:"created"`
		Modified    *core.DateTime `json:"modified"`
		FirstSeen   *core.DateTime `json:"first_seen,omitempty"`
		LastSeen    *core.DateTime `json:"last_seen,omitempty"`
		SpecVersion string         `json:"spec_version"`
		Type        string         `json:"type"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = Malware(unmarshaler.embed)
	m.Created = unmarshaler.Created.Time()
	m.Modified = unmarshaler.Modified.Time()
	m.FirstSeen = unmarshaler.FirstSeen.TimePtr()
	m.LastSeen = unmarshaler.LastSeen.TimePtr()
	if unmarshaler.SpecVersion != "2.1" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", m, "2.1", unmarshaler.SpecVersion)
	}
	m.specVersion = unmarshaler.SpecVersion
	if unmarshaler.Type != "malware" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", m, "malware", unmarshaler.Type)
	}
	m.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *m, "spec_version", "type")
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = nil
	return nil
}

func (m *Malware) MarshalJSON() ([]byte, error) {
	type embed Malware
	var marshaler = struct {
		embed
		Created     *core.DateTime `json:"created"`
		Modified    *core.DateTime `json:"modified"`
		FirstSeen   *core.DateTime `json:"first_seen,omitempty"`
		LastSeen    *core.DateTime `json:"last_seen,omitempty"`
		SpecVersion string         `json:"spec_version"`
		Type        string         `json:"type"`
	}{
		embed:       embed(*m),
		Created:     core.NewDateTime(m.Created),
		Modified:    core.NewDateTime(m.Modified),
		FirstSeen:   core.NewOptionalDateTime(m.FirstSeen),
		LastSeen:    core.NewOptionalDateTime(m.LastSeen),
		SpecVersion: "2.1",
		Type:        "malware",
	}
	return json.Marshal(marshaler)
}

func (m *Malware) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type IdentityClassOv string

const (
	IdentityClassOvIndividual   IdentityClassOv = "individual"
	IdentityClassOvGroup        IdentityClassOv = "group"
	IdentityClassOvSystem       IdentityClassOv = "system"
	IdentityClassOvOrganization IdentityClassOv = "organization"
	IdentityClassOvClass        IdentityClassOv = "class"
	IdentityClassOvUnknown      IdentityClassOv = "unknown"
)

func NewIdentityClassOvFromString(s string) (IdentityClassOv, error) {
	switch s {
	case "individual":
		return IdentityClassOvIndividual, nil
	case "group":
		return IdentityClassOvGroup, nil
	case "system":
		return IdentityClassOvSystem, nil
	case "organization":
		return IdentityClassOvOrganization, nil
	case "class":
		return IdentityClassOvClass, nil
	case "unknown":
		return IdentityClassOvUnknown, nil
	}
	var t IdentityClassOv
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IdentityClassOv) Ptr() *IdentityClassOv {
	return &i
}

type ImplementationLanguageOv string

const (
	ImplementationLanguageOvApplescript ImplementationLanguageOv = "applescript"
	ImplementationLanguageOvBash        ImplementationLanguageOv = "bash"
	ImplementationLanguageOvC           ImplementationLanguageOv = "c"
	ImplementationLanguageOvCpp         ImplementationLanguageOv = "cpp"
	ImplementationLanguageOvCsharp      ImplementationLanguageOv = "csharp"
	ImplementationLanguageOvGo          ImplementationLanguageOv = "go"
	ImplementationLanguageOvJava        ImplementationLanguageOv = "java"
	ImplementationLanguageOvJavascript  ImplementationLanguageOv = "javascript"
	ImplementationLanguageOvLua         ImplementationLanguageOv = "lua"
	ImplementationLanguageOvObjectiveC  ImplementationLanguageOv = "objective_c"
	ImplementationLanguageOvPerl        ImplementationLanguageOv = "perl"
	ImplementationLanguageOvPhp         ImplementationLanguageOv = "php"
	ImplementationLanguageOvPowershell  ImplementationLanguageOv = "powershell"
	ImplementationLanguageOvPython      ImplementationLanguageOv = "python"
	ImplementationLanguageOvRuby        ImplementationLanguageOv = "ruby"
	ImplementationLanguageOvScala       ImplementationLanguageOv = "scala"
	ImplementationLanguageOvSwift       ImplementationLanguageOv = "swift"
	ImplementationLanguageOvTypescript  ImplementationLanguageOv = "typescript"
	ImplementationLanguageOvVisualBasic ImplementationLanguageOv = "visual_basic"
	ImplementationLanguageOvX8632       ImplementationLanguageOv = "x86_32"
	ImplementationLanguageOvX8664       ImplementationLanguageOv = "x86_64"
)

func NewImplementationLanguageOvFromString(s string) (ImplementationLanguageOv, error) {
	switch s {
	case "applescript":
		return ImplementationLanguageOvApplescript, nil
	case "bash":
		return ImplementationLanguageOvBash, nil
	case "c":
		return ImplementationLanguageOvC, nil
	case "cpp":
		return ImplementationLanguageOvCpp, nil
	case "csharp":
		return ImplementationLanguageOvCsharp, nil
	case "go":
		return ImplementationLanguageOvGo, nil
	case "java":
		return ImplementationLanguageOvJava, nil
	case "javascript":
		return ImplementationLanguageOvJavascript, nil
	case "lua":
		return ImplementationLanguageOvLua, nil
	case "objective_c":
		return ImplementationLanguageOvObjectiveC, nil
	case "perl":
		return ImplementationLanguageOvPerl, nil
	case "php":
		return ImplementationLanguageOvPhp, nil
	case "powershell":
		return ImplementationLanguageOvPowershell, nil
	case "python":
		return ImplementationLanguageOvPython, nil
	case "ruby":
		return ImplementationLanguageOvRuby, nil
	case "scala":
		return ImplementationLanguageOvScala, nil
	case "swift":
		return ImplementationLanguageOvSwift, nil
	case "typescript":
		return ImplementationLanguageOvTypescript, nil
	case "visual_basic":
		return ImplementationLanguageOvVisualBasic, nil
	case "x86_32":
		return ImplementationLanguageOvX8632, nil
	case "x86_64":
		return ImplementationLanguageOvX8664, nil
	}
	var t ImplementationLanguageOv
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i ImplementationLanguageOv) Ptr() *ImplementationLanguageOv {
	return &i
}

type IndicatorTypeOv string

const (
	IndicatorTypeOvAnomalousActivity IndicatorTypeOv = "anomalous_activity"
	IndicatorTypeOvAnonymization     IndicatorTypeOv = "anonymization"
	IndicatorTypeOvBenign            IndicatorTypeOv = "benign"
	IndicatorTypeOvCompromised       IndicatorTypeOv = "compromised"
	IndicatorTypeOvMaliciousActivity IndicatorTypeOv = "malicious_activity"
	IndicatorTypeOvAttribution       IndicatorTypeOv = "attribution"
	IndicatorTypeOvUnknown           IndicatorTypeOv = "unknown"
)

func NewIndicatorTypeOvFromString(s string) (IndicatorTypeOv, error) {
	switch s {
	case "anomalous_activity":
		return IndicatorTypeOvAnomalousActivity, nil
	case "anonymization":
		return IndicatorTypeOvAnonymization, nil
	case "benign":
		return IndicatorTypeOvBenign, nil
	case "compromised":
		return IndicatorTypeOvCompromised, nil
	case "malicious_activity":
		return IndicatorTypeOvMaliciousActivity, nil
	case "attribution":
		return IndicatorTypeOvAttribution, nil
	case "unknown":
		return IndicatorTypeOvUnknown, nil
	}
	var t IndicatorTypeOv
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IndicatorTypeOv) Ptr() *IndicatorTypeOv {
	return &i
}

type MalwareCapabilitiesOv string

const (
	MalwareCapabilitiesOvAccessesRemoteMachines             MalwareCapabilitiesOv = "accesses_remote_machines"
	MalwareCapabilitiesOvAntiDebugging                      MalwareCapabilitiesOv = "anti_debugging"
	MalwareCapabilitiesOvAntiDisassembly                    MalwareCapabilitiesOv = "anti_disassembly"
	MalwareCapabilitiesOvAntiEmulation                      MalwareCapabilitiesOv = "anti_emulation"
	MalwareCapabilitiesOvAntiMemoryForensics                MalwareCapabilitiesOv = "anti_memory_forensics"
	MalwareCapabilitiesOvAntiSandbox                        MalwareCapabilitiesOv = "anti_sandbox"
	MalwareCapabilitiesOvAntiVm                             MalwareCapabilitiesOv = "anti_vm"
	MalwareCapabilitiesOvCapturesInputPeripherals           MalwareCapabilitiesOv = "captures_input_peripherals"
	MalwareCapabilitiesOvCapturesOutputPeripherals          MalwareCapabilitiesOv = "captures_output_peripherals"
	MalwareCapabilitiesOvCapturesSystemStateData            MalwareCapabilitiesOv = "captures_system_state_data"
	MalwareCapabilitiesOvCapturesTracesOfInfection          MalwareCapabilitiesOv = "captures_traces_of_infection"
	MalwareCapabilitiesOvCommitsFraud                       MalwareCapabilitiesOv = "commits_fraud"
	MalwareCapabilitiesOvCommunicatesWithC2                 MalwareCapabilitiesOv = "communicates_with_c2"
	MalwareCapabilitiesOvCompromisesDataAvailability        MalwareCapabilitiesOv = "compromises_data_availability"
	MalwareCapabilitiesOvCompromisesDataIntegrity           MalwareCapabilitiesOv = "compromises_data_integrity"
	MalwareCapabilitiesOvCompromisesSystemAvailability      MalwareCapabilitiesOv = "compromises_system_availability"
	MalwareCapabilitiesOvControlsLocalMachine               MalwareCapabilitiesOv = "controls_local_machine"
	MalwareCapabilitiesOvDegradesSecuritySoftware           MalwareCapabilitiesOv = "degrades_security_software"
	MalwareCapabilitiesOvDegradesUpdates                    MalwareCapabilitiesOv = "degrades_updates"
	MalwareCapabilitiesOvDeterminesC2Server                 MalwareCapabilitiesOv = "determines_c2_server"
	MalwareCapabilitiesOvEmailsSpam                         MalwareCapabilitiesOv = "emails_spam"
	MalwareCapabilitiesOvEscalatesPrivileges                MalwareCapabilitiesOv = "escalates_privileges"
	MalwareCapabilitiesOvEvadesAv                           MalwareCapabilitiesOv = "evades_av"
	MalwareCapabilitiesOvExfiltratesData                    MalwareCapabilitiesOv = "exfiltrates_data"
	MalwareCapabilitiesOvFingerprintsHost                   MalwareCapabilitiesOv = "fingerprints_host"
	MalwareCapabilitiesOvHidesArtifacts                     MalwareCapabilitiesOv = "hides_artifacts"
	MalwareCapabilitiesOvHidesExecutingCode                 MalwareCapabilitiesOv = "hides_executing_code"
	MalwareCapabilitiesOvInfectsFiles                       MalwareCapabilitiesOv = "infects_files"
	MalwareCapabilitiesOvInfectsRemoteMachines              MalwareCapabilitiesOv = "infects_remote_machines"
	MalwareCapabilitiesOvInstallsOtherComponents            MalwareCapabilitiesOv = "installs_other_components"
	MalwareCapabilitiesOvPersistsAfterSystemReboot          MalwareCapabilitiesOv = "persists_after_system_reboot"
	MalwareCapabilitiesOvPreventsArtifactAccess             MalwareCapabilitiesOv = "prevents_artifact_access"
	MalwareCapabilitiesOvPreventsArtifactDeletion           MalwareCapabilitiesOv = "prevents_artifact_deletion"
	MalwareCapabilitiesOvProbesNetworkEnvironment           MalwareCapabilitiesOv = "probes_network_environment"
	MalwareCapabilitiesOvSelfModifies                       MalwareCapabilitiesOv = "self_modifies"
	MalwareCapabilitiesOvStealsAuthenticationCredentials    MalwareCapabilitiesOv = "steals_authentication_credentials"
	MalwareCapabilitiesOvViolatesSystemOperationalIntegrity MalwareCapabilitiesOv = "violates_system_operational_integrity"
)

func NewMalwareCapabilitiesOvFromString(s string) (MalwareCapabilitiesOv, error) {
	switch s {
	case "accesses_remote_machines":
		return MalwareCapabilitiesOvAccessesRemoteMachines, nil
	case "anti_debugging":
		return MalwareCapabilitiesOvAntiDebugging, nil
	case "anti_disassembly":
		return MalwareCapabilitiesOvAntiDisassembly, nil
	case "anti_emulation":
		return MalwareCapabilitiesOvAntiEmulation, nil
	case "anti_memory_forensics":
		return MalwareCapabilitiesOvAntiMemoryForensics, nil
	case "anti_sandbox":
		return MalwareCapabilitiesOvAntiSandbox, nil
	case "anti_vm":
		return MalwareCapabilitiesOvAntiVm, nil
	case "captures_input_peripherals":
		return MalwareCapabilitiesOvCapturesInputPeripherals, nil
	case "captures_output_peripherals":
		return MalwareCapabilitiesOvCapturesOutputPeripherals, nil
	case "captures_system_state_data":
		return MalwareCapabilitiesOvCapturesSystemStateData, nil
	case "captures_traces_of_infection":
		return MalwareCapabilitiesOvCapturesTracesOfInfection, nil
	case "commits_fraud":
		return MalwareCapabilitiesOvCommitsFraud, nil
	case "communicates_with_c2":
		return MalwareCapabilitiesOvCommunicatesWithC2, nil
	case "compromises_data_availability":
		return MalwareCapabilitiesOvCompromisesDataAvailability, nil
	case "compromises_data_integrity":
		return MalwareCapabilitiesOvCompromisesDataIntegrity, nil
	case "compromises_system_availability":
		return MalwareCapabilitiesOvCompromisesSystemAvailability, nil
	case "controls_local_machine":
		return MalwareCapabilitiesOvControlsLocalMachine, nil
	case "degrades_security_software":
		return MalwareCapabilitiesOvDegradesSecuritySoftware, nil
	case "degrades_updates":
		return MalwareCapabilitiesOvDegradesUpdates, nil
	case "determines_c2_server":
		return MalwareCapabilitiesOvDeterminesC2Server, nil
	case "emails_spam":
		return MalwareCapabilitiesOvEmailsSpam, nil
	case "escalates_privileges":
		return MalwareCapabilitiesOvEscalatesPrivileges, nil
	case "evades_av":
		return MalwareCapabilitiesOvEvadesAv, nil
	case "exfiltrates_data":
		return MalwareCapabilitiesOvExfiltratesData, nil
	case "fingerprints_host":
		return MalwareCapabilitiesOvFingerprintsHost, nil
	case "hides_artifacts":
		return MalwareCapabilitiesOvHidesArtifacts, nil
	case "hides_executing_code":
		return MalwareCapabilitiesOvHidesExecutingCode, nil
	case "infects_files":
		return MalwareCapabilitiesOvInfectsFiles, nil
	case "infects_remote_machines":
		return MalwareCapabilitiesOvInfectsRemoteMachines, nil
	case "installs_other_components":
		return MalwareCapabilitiesOvInstallsOtherComponents, nil
	case "persists_after_system_reboot":
		return MalwareCapabilitiesOvPersistsAfterSystemReboot, nil
	case "prevents_artifact_access":
		return MalwareCapabilitiesOvPreventsArtifactAccess, nil
	case "prevents_artifact_deletion":
		return MalwareCapabilitiesOvPreventsArtifactDeletion, nil
	case "probes_network_environment":
		return MalwareCapabilitiesOvProbesNetworkEnvironment, nil
	case "self_modifies":
		return MalwareCapabilitiesOvSelfModifies, nil
	case "steals_authentication_credentials":
		return MalwareCapabilitiesOvStealsAuthenticationCredentials, nil
	case "violates_system_operational_integrity":
		return MalwareCapabilitiesOvViolatesSystemOperationalIntegrity, nil
	}
	var t MalwareCapabilitiesOv
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MalwareCapabilitiesOv) Ptr() *MalwareCapabilitiesOv {
	return &m
}

type MalwareTypeOv string

const (
	MalwareTypeOvAdware                MalwareTypeOv = "adware"
	MalwareTypeOvBackdoor              MalwareTypeOv = "backdoor"
	MalwareTypeOvBot                   MalwareTypeOv = "bot"
	MalwareTypeOvBootkit               MalwareTypeOv = "bootkit"
	MalwareTypeOvDdos                  MalwareTypeOv = "ddos"
	MalwareTypeOvDownloader            MalwareTypeOv = "downloader"
	MalwareTypeOvDropper               MalwareTypeOv = "dropper"
	MalwareTypeOvExploitKit            MalwareTypeOv = "exploit_kit"
	MalwareTypeOvKeylogger             MalwareTypeOv = "keylogger"
	MalwareTypeOvRansomware            MalwareTypeOv = "ransomware"
	MalwareTypeOvRemoteAccessTrojan    MalwareTypeOv = "remote_access_trojan"
	MalwareTypeOvResourceExploitation  MalwareTypeOv = "resource_exploitation"
	MalwareTypeOvRogueSecuritySoftware MalwareTypeOv = "rogue_security_software"
	MalwareTypeOvRootkit               MalwareTypeOv = "rootkit"
	MalwareTypeOvScreenCapture         MalwareTypeOv = "screen_capture"
	MalwareTypeOvSpyware               MalwareTypeOv = "spyware"
	MalwareTypeOvTrojan                MalwareTypeOv = "trojan"
	MalwareTypeOvVirus                 MalwareTypeOv = "virus"
	MalwareTypeOvWiper                 MalwareTypeOv = "wiper"
	MalwareTypeOvWorm                  MalwareTypeOv = "worm"
	MalwareTypeOvUnknown               MalwareTypeOv = "unknown"
	MalwareTypeOvOther                 MalwareTypeOv = "other"
)

func NewMalwareTypeOvFromString(s string) (MalwareTypeOv, error) {
	switch s {
	case "adware":
		return MalwareTypeOvAdware, nil
	case "backdoor":
		return MalwareTypeOvBackdoor, nil
	case "bot":
		return MalwareTypeOvBot, nil
	case "bootkit":
		return MalwareTypeOvBootkit, nil
	case "ddos":
		return MalwareTypeOvDdos, nil
	case "downloader":
		return MalwareTypeOvDownloader, nil
	case "dropper":
		return MalwareTypeOvDropper, nil
	case "exploit_kit":
		return MalwareTypeOvExploitKit, nil
	case "keylogger":
		return MalwareTypeOvKeylogger, nil
	case "ransomware":
		return MalwareTypeOvRansomware, nil
	case "remote_access_trojan":
		return MalwareTypeOvRemoteAccessTrojan, nil
	case "resource_exploitation":
		return MalwareTypeOvResourceExploitation, nil
	case "rogue_security_software":
		return MalwareTypeOvRogueSecuritySoftware, nil
	case "rootkit":
		return MalwareTypeOvRootkit, nil
	case "screen_capture":
		return MalwareTypeOvScreenCapture, nil
	case "spyware":
		return MalwareTypeOvSpyware, nil
	case "trojan":
		return MalwareTypeOvTrojan, nil
	case "virus":
		return MalwareTypeOvVirus, nil
	case "wiper":
		return MalwareTypeOvWiper, nil
	case "worm":
		return MalwareTypeOvWorm, nil
	case "unknown":
		return MalwareTypeOvUnknown, nil
	case "other":
		return MalwareTypeOvOther, nil
	}
	var t MalwareTypeOv
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MalwareTypeOv) Ptr() *MalwareTypeOv {
	return &m
}

// covers common pattern languages
type PatternTypeOv string

const (
	PatternTypeOvStix     PatternTypeOv = "stix"
	PatternTypeOvPcre     PatternTypeOv = "pcre"
	PatternTypeOvSigma    PatternTypeOv = "sigma"
	PatternTypeOvSnort    PatternTypeOv = "snort"
	PatternTypeOvSuricata PatternTypeOv = "suricata"
	PatternTypeOvYara     PatternTypeOv = "yara"
)

func NewPatternTypeOvFromString(s string) (PatternTypeOv, error) {
	switch s {
	case "stix":
		return PatternTypeOvStix, nil
	case "pcre":
		return PatternTypeOvPcre, nil
	case "sigma":
		return PatternTypeOvSigma, nil
	case "snort":
		return PatternTypeOvSnort, nil
	case "suricata":
		return PatternTypeOvSuricata, nil
	case "yara":
		return PatternTypeOvYara, nil
	}
	var t PatternTypeOv
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PatternTypeOv) Ptr() *PatternTypeOv {
	return &p
}

type ProcessorArchitectureOv string

const (
	ProcessorArchitectureOvAlpha   ProcessorArchitectureOv = "alpha"
	ProcessorArchitectureOvArm     ProcessorArchitectureOv = "arm"
	ProcessorArchitectureOvAi64    ProcessorArchitectureOv = "ai_64"
	ProcessorArchitectureOvMips    ProcessorArchitectureOv = "mips"
	ProcessorArchitectureOvPowerpc ProcessorArchitectureOv = "powerpc"
	ProcessorArchitectureOvSparc   ProcessorArchitectureOv = "sparc"
	ProcessorArchitectureOvX86     ProcessorArchitectureOv = "x86"
	ProcessorArchitectureOvX8664   ProcessorArchitectureOv = "x86_64"
)

func NewProcessorArchitectureOvFromString(s string) (ProcessorArchitectureOv, error) {
	switch s {
	case "alpha":
		return ProcessorArchitectureOvAlpha, nil
	case "arm":
		return ProcessorArchitectureOvArm, nil
	case "ai_64":
		return ProcessorArchitectureOvAi64, nil
	case "mips":
		return ProcessorArchitectureOvMips, nil
	case "powerpc":
		return ProcessorArchitectureOvPowerpc, nil
	case "sparc":
		return ProcessorArchitectureOvSparc, nil
	case "x86":
		return ProcessorArchitectureOvX86, nil
	case "x86_64":
		return ProcessorArchitectureOvX8664, nil
	}
	var t ProcessorArchitectureOv
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p ProcessorArchitectureOv) Ptr() *ProcessorArchitectureOv {
	return &p
}

type Statement struct {
	// A Statement (e.g., copyright, terms of use) applied to the content marked by this marking definition.
	Statement string `json:"statement" url:"statement"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *Statement) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Statement) UnmarshalJSON(data []byte) error {
	type unmarshaler Statement
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Statement(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = nil
	return nil
}

func (s *Statement) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type Tlp struct {
	// The TLP level [TLP] of the content marked by this marking definition, as defined in this section.
	Tlp string `json:"tlp" url:"tlp"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *Tlp) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Tlp) UnmarshalJSON(data []byte) error {
	type unmarshaler Tlp
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Tlp(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = nil
	return nil
}

func (t *Tlp) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}
