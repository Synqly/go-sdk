// This file was auto-generated by Fern from our API Definition.

package stix

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/synqly/go-sdk/client/engine/core"
	time "time"
)

type CommonProperties struct {
	// The id property uniquely identifies this object.
	Id Id `json:"id" url:"id"`
	// The created_by_ref property specifies the id property of the identity object that describes the entity that created this object.
	CreatedByRef *Identity `json:"created_by_ref,omitempty" url:"created_by_ref,omitempty"`
	// The created property represents the time at which the object was originally created.
	Created time.Time `json:"created" url:"created"`
	// The modified property is only used by STIX Objects that support versioning and represents the time that this particular version of the object was last modified.
	Modified time.Time `json:"modified" url:"modified"`
	// The revoked property indicates whether this object has been revoked. If the revoked property is present and set to true, then the object has been revoked.
	Revoked *bool `json:"revoked,omitempty" url:"revoked,omitempty"`
	// The labels property is an array of strings that are used to categorize this object.
	Labels []string `json:"labels,omitempty" url:"labels,omitempty"`
	// The confidence property is an integer from 0 to 100 that represents the confidence that this object is accurate and valid.
	Confidence *int `json:"confidence,omitempty" url:"confidence,omitempty"`
	// The lang property specifies the language used in the properties of the object.
	Lang *string `json:"lang,omitempty" url:"lang,omitempty"`
	// The external_references property is an array of external references that are relevant to this object.
	ExternalReferences []*ExternalReference `json:"external_references,omitempty" url:"external_references,omitempty"`
	// The object_marking_refs property is an array of ids of marking_definition objects that apply to this object.
	ObjectMarkingRefs []*MarkingDefinition `json:"object_marking_refs,omitempty" url:"object_marking_refs,omitempty"`
	// The granular_markings property is an array of granular markings that are applied to this object.
	GranularMarkings []*GranularMarking `json:"granular_markings,omitempty" url:"granular_markings,omitempty"`
	// The extensions property is an object that contains custom properties or objects that extend the object.
	Extensions  map[string]interface{} `json:"extensions,omitempty" url:"extensions,omitempty"`
	specVersion string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CommonProperties) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CommonProperties) SpecVersion() string {
	return c.specVersion
}

func (c *CommonProperties) UnmarshalJSON(data []byte) error {
	type embed CommonProperties
	var unmarshaler = struct {
		embed
		Created     *core.DateTime `json:"created"`
		Modified    *core.DateTime `json:"modified"`
		SpecVersion string         `json:"spec_version"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CommonProperties(unmarshaler.embed)
	c.Created = unmarshaler.Created.Time()
	c.Modified = unmarshaler.Modified.Time()
	if unmarshaler.SpecVersion != "2.1" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "2.1", unmarshaler.SpecVersion)
	}
	c.specVersion = unmarshaler.SpecVersion

	extraProperties, err := core.ExtractExtraProperties(data, *c, "spec_version")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = nil
	return nil
}

func (c *CommonProperties) MarshalJSON() ([]byte, error) {
	type embed CommonProperties
	var marshaler = struct {
		embed
		Created     *core.DateTime `json:"created"`
		Modified    *core.DateTime `json:"modified"`
		SpecVersion string         `json:"spec_version"`
	}{
		embed:       embed(*c),
		Created:     core.NewDateTime(c.Created),
		Modified:    core.NewDateTime(c.Modified),
		SpecVersion: "2.1",
	}
	return json.Marshal(marshaler)
}

func (c *CommonProperties) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ExternalReference struct {
	// The source_name property specifies the name of the source that provided the external reference.
	SourceName string `json:"source_name" url:"source_name"`
	// The description property provides a human-readable explanation of the external reference.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The url property specifies the URL of the external reference.
	Url *string `json:"url,omitempty" url:"url,omitempty"`
	// The hash property specifies a hash value that uniquely identifies the external reference.
	Hash *string `json:"hash,omitempty" url:"hash,omitempty"`
	// The external_id property specifies an identifier used by the source of the external reference.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExternalReference) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExternalReference) UnmarshalJSON(data []byte) error {
	type unmarshaler ExternalReference
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExternalReference(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = nil
	return nil
}

func (e *ExternalReference) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type GranularMarking struct {
	// The lang property specifies the language used in the properties of the marking_definition object.
	Lang *string `json:"lang,omitempty" url:"lang,omitempty"`
	// The marking_ref property specifies the id property of the marking_definition object that applies to this object.
	MarkingRef *MarkingDefinition `json:"marking_ref,omitempty" url:"marking_ref,omitempty"`
	// The selectors property is an array of strings that represent the selectors that are used to apply the marking_definition object to this object.
	Selectors []string `json:"selectors" url:"selectors"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GranularMarking) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GranularMarking) UnmarshalJSON(data []byte) error {
	type unmarshaler GranularMarking
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GranularMarking(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = nil
	return nil
}

func (g *GranularMarking) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type Id = string

type Identity struct {
	// The id property uniquely identifies this object.
	Id Id `json:"id" url:"id"`
	// The created_by_ref property specifies the id property of the identity object that describes the entity that created this object.
	CreatedByRef *Identity `json:"created_by_ref,omitempty" url:"created_by_ref,omitempty"`
	// The created property represents the time at which the object was originally created.
	Created time.Time `json:"created" url:"created"`
	// The modified property is only used by STIX Objects that support versioning and represents the time that this particular version of the object was last modified.
	Modified time.Time `json:"modified" url:"modified"`
	// The revoked property indicates whether this object has been revoked. If the revoked property is present and set to true, then the object has been revoked.
	Revoked *bool `json:"revoked,omitempty" url:"revoked,omitempty"`
	// The labels property is an array of strings that are used to categorize this object.
	Labels []string `json:"labels,omitempty" url:"labels,omitempty"`
	// The confidence property is an integer from 0 to 100 that represents the confidence that this object is accurate and valid.
	Confidence *int `json:"confidence,omitempty" url:"confidence,omitempty"`
	// The lang property specifies the language used in the properties of the object.
	Lang *string `json:"lang,omitempty" url:"lang,omitempty"`
	// The external_references property is an array of external references that are relevant to this object.
	ExternalReferences []*ExternalReference `json:"external_references,omitempty" url:"external_references,omitempty"`
	// The object_marking_refs property is an array of ids of marking_definition objects that apply to this object.
	ObjectMarkingRefs []*MarkingDefinition `json:"object_marking_refs,omitempty" url:"object_marking_refs,omitempty"`
	// The granular_markings property is an array of granular markings that are applied to this object.
	GranularMarkings []*GranularMarking `json:"granular_markings,omitempty" url:"granular_markings,omitempty"`
	// The extensions property is an object that contains custom properties or objects that extend the object.
	Extensions map[string]interface{} `json:"extensions,omitempty" url:"extensions,omitempty"`
	// The value of this property MUST be identity.
	Type string `json:"type" url:"type"`
	// The name of this Identity. When referring to a specific entity (e.g., an individual or organization), this property SHOULD contain the canonical name of the specific entity.
	Name        string  `json:"name" url:"name"`
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The list of roles that this Identity performs. No open vocabulary is yet defined for this property.
	Roles         *string          `json:"roles,omitempty" url:"roles,omitempty"`
	IdentityClass *IdentityClassOv `json:"identity_class,omitempty" url:"identity_class,omitempty"`
	specVersion   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *Identity) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *Identity) SpecVersion() string {
	return i.specVersion
}

func (i *Identity) UnmarshalJSON(data []byte) error {
	type embed Identity
	var unmarshaler = struct {
		embed
		Created     *core.DateTime `json:"created"`
		Modified    *core.DateTime `json:"modified"`
		SpecVersion string         `json:"spec_version"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = Identity(unmarshaler.embed)
	i.Created = unmarshaler.Created.Time()
	i.Modified = unmarshaler.Modified.Time()
	if unmarshaler.SpecVersion != "2.1" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "2.1", unmarshaler.SpecVersion)
	}
	i.specVersion = unmarshaler.SpecVersion

	extraProperties, err := core.ExtractExtraProperties(data, *i, "spec_version")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = nil
	return nil
}

func (i *Identity) MarshalJSON() ([]byte, error) {
	type embed Identity
	var marshaler = struct {
		embed
		Created     *core.DateTime `json:"created"`
		Modified    *core.DateTime `json:"modified"`
		SpecVersion string         `json:"spec_version"`
	}{
		embed:       embed(*i),
		Created:     core.NewDateTime(i.Created),
		Modified:    core.NewDateTime(i.Modified),
		SpecVersion: "2.1",
	}
	return json.Marshal(marshaler)
}

func (i *Identity) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type KillChainPhase struct {
	// The kill_chain_name property specifies the name of the kill chain to which the phase belongs.
	KillChainName string `json:"kill_chain_name" url:"kill_chain_name"`
	// The phase_name property specifies the name of the phase within the kill chain.
	PhaseName string `json:"phase_name" url:"phase_name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (k *KillChainPhase) GetExtraProperties() map[string]interface{} {
	return k.extraProperties
}

func (k *KillChainPhase) UnmarshalJSON(data []byte) error {
	type unmarshaler KillChainPhase
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*k = KillChainPhase(value)

	extraProperties, err := core.ExtractExtraProperties(data, *k)
	if err != nil {
		return err
	}
	k.extraProperties = extraProperties

	k._rawJSON = nil
	return nil
}

func (k *KillChainPhase) String() string {
	if len(k._rawJSON) > 0 {
		if value, err := core.StringifyJSON(k._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(k); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", k)
}

type MarkingDefinition struct {
	// The type property identifies the type of object. The value of this property MUST be marking_definition.
	Type string  `json:"type" url:"type"`
	Name *string `json:"name,omitempty" url:"name,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MarkingDefinition) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MarkingDefinition) UnmarshalJSON(data []byte) error {
	type unmarshaler MarkingDefinition
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MarkingDefinition(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = nil
	return nil
}

func (m *MarkingDefinition) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type Indicator struct {
	// The id property uniquely identifies this object.
	Id Id `json:"id" url:"id"`
	// The created_by_ref property specifies the id property of the identity object that describes the entity that created this object.
	CreatedByRef *Identity `json:"created_by_ref,omitempty" url:"created_by_ref,omitempty"`
	// The created property represents the time at which the object was originally created.
	Created time.Time `json:"created" url:"created"`
	// The modified property is only used by STIX Objects that support versioning and represents the time that this particular version of the object was last modified.
	Modified time.Time `json:"modified" url:"modified"`
	// The revoked property indicates whether this object has been revoked. If the revoked property is present and set to true, then the object has been revoked.
	Revoked *bool `json:"revoked,omitempty" url:"revoked,omitempty"`
	// The labels property is an array of strings that are used to categorize this object.
	Labels []string `json:"labels,omitempty" url:"labels,omitempty"`
	// The confidence property is an integer from 0 to 100 that represents the confidence that this object is accurate and valid.
	Confidence *int `json:"confidence,omitempty" url:"confidence,omitempty"`
	// The lang property specifies the language used in the properties of the object.
	Lang *string `json:"lang,omitempty" url:"lang,omitempty"`
	// The external_references property is an array of external references that are relevant to this object.
	ExternalReferences []*ExternalReference `json:"external_references,omitempty" url:"external_references,omitempty"`
	// The object_marking_refs property is an array of ids of marking_definition objects that apply to this object.
	ObjectMarkingRefs []*MarkingDefinition `json:"object_marking_refs,omitempty" url:"object_marking_refs,omitempty"`
	// The granular_markings property is an array of granular markings that are applied to this object.
	GranularMarkings []*GranularMarking `json:"granular_markings,omitempty" url:"granular_markings,omitempty"`
	// The extensions property is an object that contains custom properties or objects that extend the object.
	Extensions map[string]interface{} `json:"extensions,omitempty" url:"extensions,omitempty"`
	// A name used to identify the Indicator.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// A description that provides more details and context about the Indicator, potentially including its purpose and its key characteristics.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// A set of categorizations for this indicator.
	IndicatorTypes []IndicatorTypeOv `json:"indicator_types,omitempty" url:"indicator_types,omitempty"`
	// The detection pattern for this Indicator MAY be expressed as a STIX Pattern as specified in section 9 or another appropriate language such as SNORT, YARA, etc.
	Pattern *string `json:"pattern,omitempty" url:"pattern,omitempty"`
	// The type of pattern expression used in the pattern property.
	PatternType *PatternTypeOv `json:"pattern_type,omitempty" url:"pattern_type,omitempty"`
	// The version of the pattern expression used in the pattern property.
	PatternVersion *string `json:"pattern_version,omitempty" url:"pattern_version,omitempty"`
	// The time from which this Indicator is considered a valid indicator of the behaviors it is related or represents.
	ValidFrom time.Time `json:"valid_from" url:"valid_from"`
	// The time at which this Indicator is no longer considered valid.
	ValidUntil *time.Time `json:"valid_until,omitempty" url:"valid_until,omitempty"`
	// The kill chain phase to which this Indicator corresponds.
	KillChainPhases []*KillChainPhase `json:"kill_chain_phases,omitempty" url:"kill_chain_phases,omitempty"`
	// The data as received from the source.
	RawData     *string `json:"raw_data,omitempty" url:"raw_data,omitempty"`
	specVersion string
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *Indicator) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *Indicator) SpecVersion() string {
	return i.specVersion
}

func (i *Indicator) Type() string {
	return i.type_
}

func (i *Indicator) UnmarshalJSON(data []byte) error {
	type embed Indicator
	var unmarshaler = struct {
		embed
		Created     *core.DateTime `json:"created"`
		Modified    *core.DateTime `json:"modified"`
		ValidFrom   *core.DateTime `json:"valid_from"`
		ValidUntil  *core.DateTime `json:"valid_until,omitempty"`
		SpecVersion string         `json:"spec_version"`
		Type        string         `json:"type"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = Indicator(unmarshaler.embed)
	i.Created = unmarshaler.Created.Time()
	i.Modified = unmarshaler.Modified.Time()
	i.ValidFrom = unmarshaler.ValidFrom.Time()
	i.ValidUntil = unmarshaler.ValidUntil.TimePtr()
	if unmarshaler.SpecVersion != "2.1" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "2.1", unmarshaler.SpecVersion)
	}
	i.specVersion = unmarshaler.SpecVersion
	if unmarshaler.Type != "indicator" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "indicator", unmarshaler.Type)
	}
	i.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *i, "spec_version", "type")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = nil
	return nil
}

func (i *Indicator) MarshalJSON() ([]byte, error) {
	type embed Indicator
	var marshaler = struct {
		embed
		Created     *core.DateTime `json:"created"`
		Modified    *core.DateTime `json:"modified"`
		ValidFrom   *core.DateTime `json:"valid_from"`
		ValidUntil  *core.DateTime `json:"valid_until,omitempty"`
		SpecVersion string         `json:"spec_version"`
		Type        string         `json:"type"`
	}{
		embed:       embed(*i),
		Created:     core.NewDateTime(i.Created),
		Modified:    core.NewDateTime(i.Modified),
		ValidFrom:   core.NewDateTime(i.ValidFrom),
		ValidUntil:  core.NewOptionalDateTime(i.ValidUntil),
		SpecVersion: "2.1",
		Type:        "indicator",
	}
	return json.Marshal(marshaler)
}

func (i *Indicator) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type IdentityClassOv string

const (
	IdentityClassOvIndividual   IdentityClassOv = "individual"
	IdentityClassOvGroup        IdentityClassOv = "group"
	IdentityClassOvSystem       IdentityClassOv = "system"
	IdentityClassOvOrganization IdentityClassOv = "organization"
	IdentityClassOvClass        IdentityClassOv = "class"
	IdentityClassOvUnknown      IdentityClassOv = "unknown"
)

func NewIdentityClassOvFromString(s string) (IdentityClassOv, error) {
	switch s {
	case "individual":
		return IdentityClassOvIndividual, nil
	case "group":
		return IdentityClassOvGroup, nil
	case "system":
		return IdentityClassOvSystem, nil
	case "organization":
		return IdentityClassOvOrganization, nil
	case "class":
		return IdentityClassOvClass, nil
	case "unknown":
		return IdentityClassOvUnknown, nil
	}
	var t IdentityClassOv
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IdentityClassOv) Ptr() *IdentityClassOv {
	return &i
}

type IndicatorTypeOv string

const (
	IndicatorTypeOvAnomalousActivity IndicatorTypeOv = "anomalous_activity"
	IndicatorTypeOvAnonymization     IndicatorTypeOv = "anonymization"
	IndicatorTypeOvBenign            IndicatorTypeOv = "benign"
	IndicatorTypeOvCompromised       IndicatorTypeOv = "compromised"
	IndicatorTypeOvMaliciousActivity IndicatorTypeOv = "malicious_activity"
	IndicatorTypeOvAttribution       IndicatorTypeOv = "attribution"
	IndicatorTypeOvUnknown           IndicatorTypeOv = "unknown"
)

func NewIndicatorTypeOvFromString(s string) (IndicatorTypeOv, error) {
	switch s {
	case "anomalous_activity":
		return IndicatorTypeOvAnomalousActivity, nil
	case "anonymization":
		return IndicatorTypeOvAnonymization, nil
	case "benign":
		return IndicatorTypeOvBenign, nil
	case "compromised":
		return IndicatorTypeOvCompromised, nil
	case "malicious_activity":
		return IndicatorTypeOvMaliciousActivity, nil
	case "attribution":
		return IndicatorTypeOvAttribution, nil
	case "unknown":
		return IndicatorTypeOvUnknown, nil
	}
	var t IndicatorTypeOv
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IndicatorTypeOv) Ptr() *IndicatorTypeOv {
	return &i
}

// covers common pattern languages
type PatternTypeOv string

const (
	PatternTypeOvStix     PatternTypeOv = "stix"
	PatternTypeOvPcre     PatternTypeOv = "pcre"
	PatternTypeOvSigma    PatternTypeOv = "sigma"
	PatternTypeOvSnort    PatternTypeOv = "snort"
	PatternTypeOvSuricata PatternTypeOv = "suricata"
	PatternTypeOvYara     PatternTypeOv = "yara"
)

func NewPatternTypeOvFromString(s string) (PatternTypeOv, error) {
	switch s {
	case "stix":
		return PatternTypeOvStix, nil
	case "pcre":
		return PatternTypeOvPcre, nil
	case "sigma":
		return PatternTypeOvSigma, nil
	case "snort":
		return PatternTypeOvSnort, nil
	case "suricata":
		return PatternTypeOvSuricata, nil
	case "yara":
		return PatternTypeOvYara, nil
	}
	var t PatternTypeOv
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PatternTypeOv) Ptr() *PatternTypeOv {
	return &p
}
