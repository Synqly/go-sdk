// This file was auto-generated by Fern from our API Definition.

package engine

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/synqly/go-sdk/client/engine/core"
)

type AppSecQueryApplicationFindingsRequest struct {
	// Add metadata to the response by invoking meta functions. Documentation for meta functions is available at https://docs.synqly.com/api-reference/meta-functions. Not all meta function are available at every endpoint.
	Meta []*string `json:"-" url:"meta,omitempty"`
	// Number of findings to return.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Filter results by this query. For more information on filtering, refer to our Filtering Guide. Defaults to no filter. If used more than once, the queries are ANDed together.
	Filter []*string `json:"-" url:"filter,omitempty"`
	// Start search from cursor position.
	Cursor *string `json:"-" url:"cursor,omitempty"`
}

type AppSecQueryApplicationsRequest struct {
	// Add metadata to the response by invoking meta functions. Documentation for meta functions is available at https://docs.synqly.com/api-reference/meta-functions. Not all meta function are available at every endpoint.
	Meta []*string `json:"-" url:"meta,omitempty"`
	// Number of applications to return.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Filter results by this query. For more information on filtering, refer to our Filtering Guide. Defaults to no filter. If used more than once, the queries are ANDed together.
	Filter []*string `json:"-" url:"filter,omitempty"`
	// Start search from cursor position.
	Cursor *string `json:"-" url:"cursor,omitempty"`
}

type AppSecQueryFindingsRequest struct {
	// Add metadata to the response by invoking meta functions. Documentation for meta functions is available at https://docs.synqly.com/api-reference/meta-functions. Not all meta function are available at every endpoint.
	Meta []*string `json:"-" url:"meta,omitempty"`
	// Number of findings to return.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Filter results by this query. For more information on filtering, refer to our Filtering Guide. Defaults to no filter. If used more than once, the queries are ANDed together.
	Filter []*string `json:"-" url:"filter,omitempty"`
	// Start search from cursor position.
	Cursor *string `json:"-" url:"cursor,omitempty"`
}

type AppSecGetApplicationFindingDetailsResponse struct {
	// Additional messages from the service response that may be helpful to the client.
	Messages *MessagesResponse `json:"messages,omitempty" url:"messages,omitempty"`
	// Various metadata about the results organized by group, then type, then field.
	Meta *MetaResponse `json:"meta,omitempty" url:"meta,omitempty"`
	// Cursor to use to retrieve the next page of results
	Cursor string `json:"cursor" url:"cursor"`
	// Details of an application's finding
	Result AppSecPostureFinding `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AppSecGetApplicationFindingDetailsResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AppSecGetApplicationFindingDetailsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AppSecGetApplicationFindingDetailsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AppSecGetApplicationFindingDetailsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = nil
	return nil
}

func (a *AppSecGetApplicationFindingDetailsResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AppSecQueryApplicationFindingsResponse struct {
	// Additional messages from the service response that may be helpful to the client.
	Messages *MessagesResponse `json:"messages,omitempty" url:"messages,omitempty"`
	// Various metadata about the results organized by group, then type, then field.
	Meta *MetaResponse `json:"meta,omitempty" url:"meta,omitempty"`
	// Cursor to use to retrieve the next page of results
	Cursor string `json:"cursor" url:"cursor"`
	// List of application findings
	Result []AppSecPostureFinding `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AppSecQueryApplicationFindingsResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AppSecQueryApplicationFindingsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AppSecQueryApplicationFindingsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AppSecQueryApplicationFindingsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = nil
	return nil
}

func (a *AppSecQueryApplicationFindingsResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AppSecQueryApplicationsResponse struct {
	// Additional messages from the service response that may be helpful to the client.
	Messages *MessagesResponse `json:"messages,omitempty" url:"messages,omitempty"`
	// Various metadata about the results organized by group, then type, then field.
	Meta *MetaResponse `json:"meta,omitempty" url:"meta,omitempty"`
	// Cursor to use to retrieve the next page of results
	Cursor string `json:"cursor" url:"cursor"`
	// List of applications
	Result []AppSecApplication `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AppSecQueryApplicationsResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AppSecQueryApplicationsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AppSecQueryApplicationsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AppSecQueryApplicationsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = nil
	return nil
}

func (a *AppSecQueryApplicationsResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The combined result of an application's finding and the application details from the token-linked application security integration.
type AppSecQueryFindingsResponse struct {
	// Additional messages from the service response that may be helpful to the client.
	Messages *MessagesResponse `json:"messages,omitempty" url:"messages,omitempty"`
	// Various metadata about the results organized by group, then type, then field.
	Meta *MetaResponse `json:"meta,omitempty" url:"meta,omitempty"`
	// Cursor to use to retrieve the next page of results
	Cursor string                 `json:"cursor" url:"cursor"`
	Result []AppSecPostureFinding `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AppSecQueryFindingsResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AppSecQueryFindingsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AppSecQueryFindingsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AppSecQueryFindingsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = nil
	return nil
}

func (a *AppSecQueryFindingsResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The unique identifier of the application
type ApplicationId = Id

// The unique identifier of the finding
type FindingId = Id
