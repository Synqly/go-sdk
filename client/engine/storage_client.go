// This file was auto-generated by Fern from our API Definition.

package engine

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	io "io"
	http "net/http"

	core "github.com/synqly/go-sdk/client/engine/core"
)

type StorageClient interface {
	ListStorage(ctx context.Context, path string) (*ListStorageResponse, error)
	UploadStorage(ctx context.Context, path string, request any) error
	DownloadStorage(ctx context.Context, path string) ([]byte, error)
	DeleteStorage(ctx context.Context, path string) error
}

func NewStorageClient(opts ...core.ClientOption) StorageClient {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &storageClient{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type storageClient struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

// List storage
func (s *storageClient) ListStorage(ctx context.Context, path string) (*ListStorageResponse, error) {
	baseURL := ""
	if s.baseURL != "" {
		baseURL = s.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/storage/folder/list/%v", path)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(ListStorageResponse)
	if err := core.DoRequest(
		ctx,
		s.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		s.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Upload file to storage
func (s *storageClient) UploadStorage(ctx context.Context, path string, request any) error {
	baseURL := ""
	if s.baseURL != "" {
		baseURL = s.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/storage/folder/upload/%v", path)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	if err := core.DoRequest(
		ctx,
		s.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		nil,
		s.header,
		errorDecoder,
	); err != nil {
		return err
	}
	return nil
}

// Download file from storage
func (s *storageClient) DownloadStorage(ctx context.Context, path string) ([]byte, error) {
	baseURL := ""
	if s.baseURL != "" {
		baseURL = s.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/storage/folder/download/%v", path)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	var response []byte
	if err := core.DoRequest(
		ctx,
		s.httpClient,
		endpointURL,
		http.MethodPost,
		nil,
		&response,
		s.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Delete file from storage
func (s *storageClient) DeleteStorage(ctx context.Context, path string) error {
	baseURL := ""
	if s.baseURL != "" {
		baseURL = s.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/storage/folder/delete/%v", path)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	if err := core.DoRequest(
		ctx,
		s.httpClient,
		endpointURL,
		http.MethodPost,
		nil,
		nil,
		s.header,
		errorDecoder,
	); err != nil {
		return err
	}
	return nil
}
