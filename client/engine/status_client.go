// This file was auto-generated by Fern from our API Definition.

package engine

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	io "io"
	http "net/http"

	core "github.com/synqly/go-sdk/client/engine/core"
)

type StatusClient interface {
	GetStatus(ctx context.Context) (*GetStatusResponse, error)
	DeleteStatus(ctx context.Context) error
}

func NewStatusClient(opts ...core.ClientOption) StatusClient {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &statusClient{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type statusClient struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

// Get integration status
func (s *statusClient) GetStatus(ctx context.Context) (*GetStatusResponse, error) {
	baseURL := ""
	if s.baseURL != "" {
		baseURL = s.baseURL
	}
	endpointURL := baseURL + "/" + "v1/status/integration"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(GetStatusResponse)
	if err := core.DoRequest(
		ctx,
		s.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		s.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Delete integration status
func (s *statusClient) DeleteStatus(ctx context.Context) error {
	baseURL := ""
	if s.baseURL != "" {
		baseURL = s.baseURL
	}
	endpointURL := baseURL + "/" + "v1/status/delete"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	if err := core.DoRequest(
		ctx,
		s.httpClient,
		endpointURL,
		http.MethodDelete,
		nil,
		nil,
		s.header,
		errorDecoder,
	); err != nil {
		return err
	}
	return nil
}
