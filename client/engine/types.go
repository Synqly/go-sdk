// This file was auto-generated by Fern from our API Definition.

package engine

import (
	json "encoding/json"
	fmt "fmt"
	accountchange "github.com/synqly/go-sdk/client/engine/ocsf/v110/accountchange"
	apiactivity "github.com/synqly/go-sdk/client/engine/ocsf/v110/apiactivity"
	authentication "github.com/synqly/go-sdk/client/engine/ocsf/v110/authentication"
	compliancefinding "github.com/synqly/go-sdk/client/engine/ocsf/v110/compliancefinding"
	detectionfinding "github.com/synqly/go-sdk/client/engine/ocsf/v110/detectionfinding"
	fileactivity "github.com/synqly/go-sdk/client/engine/ocsf/v110/fileactivity"
	groupmanagement "github.com/synqly/go-sdk/client/engine/ocsf/v110/groupmanagement"
	incidentfinding "github.com/synqly/go-sdk/client/engine/ocsf/v110/incidentfinding"
	inventoryinfo "github.com/synqly/go-sdk/client/engine/ocsf/v110/inventoryinfo"
	moduleactivity "github.com/synqly/go-sdk/client/engine/ocsf/v110/moduleactivity"
	networkactivity "github.com/synqly/go-sdk/client/engine/ocsf/v110/networkactivity"
	processactivity "github.com/synqly/go-sdk/client/engine/ocsf/v110/processactivity"
	scheduledjobactivity "github.com/synqly/go-sdk/client/engine/ocsf/v110/scheduledjobactivity"
	securityfinding "github.com/synqly/go-sdk/client/engine/ocsf/v110/securityfinding"
	softwareinfo "github.com/synqly/go-sdk/client/engine/ocsf/v110/softwareinfo"
	vulnerabilityfinding "github.com/synqly/go-sdk/client/engine/ocsf/v110/vulnerabilityfinding"
	webresourceaccessactivity "github.com/synqly/go-sdk/client/engine/ocsf/v110/webresourceaccessactivity"
	time "time"
)

// Device inventory information. Represented by OCSF Device Inventory Info class (class_uid 5001).
type Device = *inventoryinfo.InventoryInfo

type Base struct {
	// Human-readable name for this resource
	Name string `json:"name"`
	// Time object was originally created
	CreatedAt time.Time `json:"created_at"`
	// Last time object was updated
	UpdatedAt time.Time `json:"updated_at"`
}

type BaseResourceRequest struct {
	// Human-readable name for this resource
	Name string `json:"name"`
}

type ErrorBody struct {
	Status     int           `json:"status"`
	Message    *string       `json:"message,omitempty"`
	Errors     []string      `json:"errors,omitempty"`
	Parameters []*ErrorParam `json:"parameters,omitempty"`
}

type ErrorParam struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type Id = string

type OrderOptions string

const (
	OrderOptionsAsc  OrderOptions = "asc"
	OrderOptionsDesc OrderOptions = "desc"
)

func NewOrderOptionsFromString(s string) (OrderOptions, error) {
	switch s {
	case "asc":
		return OrderOptionsAsc, nil
	case "desc":
		return OrderOptionsDesc, nil
	}
	var t OrderOptions
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OrderOptions) Ptr() *OrderOptions {
	return &o
}

// Application information represented by the extended OCSF Software Info event. The Product object describes characteristics of a software product.
type Application = *softwareinfo.SoftwareInfo

type ConnectionState string

const (
	ConnectionStateConnect    ConnectionState = "Connect"
	ConnectionStateDisconnect ConnectionState = "Disconnect"
)

func NewConnectionStateFromString(s string) (ConnectionState, error) {
	switch s {
	case "Connect":
		return ConnectionStateConnect, nil
	case "Disconnect":
		return ConnectionStateDisconnect, nil
	}
	var t ConnectionState
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ConnectionState) Ptr() *ConnectionState {
	return &c
}

type Event struct {
	ClassName                 string
	AccountChange             *accountchange.AccountChange
	ApiActivity               *apiactivity.ApiActivity
	Authentication            *authentication.Authentication
	ComplianceFinding         *compliancefinding.ComplianceFinding
	DetectionFinding          *detectionfinding.DetectionFinding
	FileActivity              *fileactivity.FileActivity
	GroupManagement           *groupmanagement.GroupManagement
	IncidentFinding           *incidentfinding.IncidentFinding
	InventoryInfo             *inventoryinfo.InventoryInfo
	ModuleActivity            *moduleactivity.ModuleActivity
	NetworkActivity           *networkactivity.NetworkActivity
	ProcessActivity           *processactivity.ProcessActivity
	ScheduledJobActivity      *scheduledjobactivity.ScheduledJobActivity
	SecurityFinding           *securityfinding.SecurityFinding
	VulnerabilityFinding      *vulnerabilityfinding.VulnerabilityFinding
	WebResourceAccessActivity *webresourceaccessactivity.WebResourceAccessActivity
}

func NewEventFromAccountChange(value *accountchange.AccountChange) *Event {
	return &Event{ClassName: "Account Change", AccountChange: value}
}

func NewEventFromApiActivity(value *apiactivity.ApiActivity) *Event {
	return &Event{ClassName: "API Activity", ApiActivity: value}
}

func NewEventFromAuthentication(value *authentication.Authentication) *Event {
	return &Event{ClassName: "Authentication", Authentication: value}
}

func NewEventFromComplianceFinding(value *compliancefinding.ComplianceFinding) *Event {
	return &Event{ClassName: "Compliance Finding", ComplianceFinding: value}
}

func NewEventFromDetectionFinding(value *detectionfinding.DetectionFinding) *Event {
	return &Event{ClassName: "Detection Finding", DetectionFinding: value}
}

func NewEventFromFileActivity(value *fileactivity.FileActivity) *Event {
	return &Event{ClassName: "File Activity", FileActivity: value}
}

func NewEventFromGroupManagement(value *groupmanagement.GroupManagement) *Event {
	return &Event{ClassName: "Group Management", GroupManagement: value}
}

func NewEventFromIncidentFinding(value *incidentfinding.IncidentFinding) *Event {
	return &Event{ClassName: "Incident Finding", IncidentFinding: value}
}

func NewEventFromInventoryInfo(value *inventoryinfo.InventoryInfo) *Event {
	return &Event{ClassName: "Inventory Info", InventoryInfo: value}
}

func NewEventFromModuleActivity(value *moduleactivity.ModuleActivity) *Event {
	return &Event{ClassName: "Module Activity", ModuleActivity: value}
}

func NewEventFromNetworkActivity(value *networkactivity.NetworkActivity) *Event {
	return &Event{ClassName: "Network Activity", NetworkActivity: value}
}

func NewEventFromProcessActivity(value *processactivity.ProcessActivity) *Event {
	return &Event{ClassName: "Process Activity", ProcessActivity: value}
}

func NewEventFromScheduledJobActivity(value *scheduledjobactivity.ScheduledJobActivity) *Event {
	return &Event{ClassName: "Scheduled Job Activity", ScheduledJobActivity: value}
}

func NewEventFromSecurityFinding(value *securityfinding.SecurityFinding) *Event {
	return &Event{ClassName: "Security Finding", SecurityFinding: value}
}

func NewEventFromVulnerabilityFinding(value *vulnerabilityfinding.VulnerabilityFinding) *Event {
	return &Event{ClassName: "Vulnerability Finding", VulnerabilityFinding: value}
}

func NewEventFromWebResourceAccessActivity(value *webresourceaccessactivity.WebResourceAccessActivity) *Event {
	return &Event{ClassName: "Web Resource Access Activity", WebResourceAccessActivity: value}
}

func (e *Event) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		ClassName string `json:"class_name"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.ClassName = unmarshaler.ClassName
	switch unmarshaler.ClassName {
	case "Account Change":
		value := new(accountchange.AccountChange)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.AccountChange = value
	case "API Activity":
		value := new(apiactivity.ApiActivity)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.ApiActivity = value
	case "Authentication":
		value := new(authentication.Authentication)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Authentication = value
	case "Compliance Finding":
		value := new(compliancefinding.ComplianceFinding)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.ComplianceFinding = value
	case "Detection Finding":
		value := new(detectionfinding.DetectionFinding)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.DetectionFinding = value
	case "File Activity":
		value := new(fileactivity.FileActivity)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.FileActivity = value
	case "Group Management":
		value := new(groupmanagement.GroupManagement)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.GroupManagement = value
	case "Incident Finding":
		value := new(incidentfinding.IncidentFinding)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.IncidentFinding = value
	case "Inventory Info":
		value := new(inventoryinfo.InventoryInfo)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.InventoryInfo = value
	case "Module Activity":
		value := new(moduleactivity.ModuleActivity)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.ModuleActivity = value
	case "Network Activity":
		value := new(networkactivity.NetworkActivity)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.NetworkActivity = value
	case "Process Activity":
		value := new(processactivity.ProcessActivity)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.ProcessActivity = value
	case "Scheduled Job Activity":
		value := new(scheduledjobactivity.ScheduledJobActivity)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.ScheduledJobActivity = value
	case "Security Finding":
		value := new(securityfinding.SecurityFinding)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.SecurityFinding = value
	case "Vulnerability Finding":
		value := new(vulnerabilityfinding.VulnerabilityFinding)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.VulnerabilityFinding = value
	case "Web Resource Access Activity":
		value := new(webresourceaccessactivity.WebResourceAccessActivity)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.WebResourceAccessActivity = value
	}
	return nil
}

func (e Event) MarshalJSON() ([]byte, error) {
	switch e.ClassName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.ClassName, e)
	case "Account Change":
		var marshaler = struct {
			ClassName string `json:"class_name"`
			*accountchange.AccountChange
		}{
			ClassName:     e.ClassName,
			AccountChange: e.AccountChange,
		}
		return json.Marshal(marshaler)
	case "API Activity":
		var marshaler = struct {
			ClassName string `json:"class_name"`
			*apiactivity.ApiActivity
		}{
			ClassName:   e.ClassName,
			ApiActivity: e.ApiActivity,
		}
		return json.Marshal(marshaler)
	case "Authentication":
		var marshaler = struct {
			ClassName string `json:"class_name"`
			*authentication.Authentication
		}{
			ClassName:      e.ClassName,
			Authentication: e.Authentication,
		}
		return json.Marshal(marshaler)
	case "Compliance Finding":
		var marshaler = struct {
			ClassName string `json:"class_name"`
			*compliancefinding.ComplianceFinding
		}{
			ClassName:         e.ClassName,
			ComplianceFinding: e.ComplianceFinding,
		}
		return json.Marshal(marshaler)
	case "Detection Finding":
		var marshaler = struct {
			ClassName string `json:"class_name"`
			*detectionfinding.DetectionFinding
		}{
			ClassName:        e.ClassName,
			DetectionFinding: e.DetectionFinding,
		}
		return json.Marshal(marshaler)
	case "File Activity":
		var marshaler = struct {
			ClassName string `json:"class_name"`
			*fileactivity.FileActivity
		}{
			ClassName:    e.ClassName,
			FileActivity: e.FileActivity,
		}
		return json.Marshal(marshaler)
	case "Group Management":
		var marshaler = struct {
			ClassName string `json:"class_name"`
			*groupmanagement.GroupManagement
		}{
			ClassName:       e.ClassName,
			GroupManagement: e.GroupManagement,
		}
		return json.Marshal(marshaler)
	case "Incident Finding":
		var marshaler = struct {
			ClassName string `json:"class_name"`
			*incidentfinding.IncidentFinding
		}{
			ClassName:       e.ClassName,
			IncidentFinding: e.IncidentFinding,
		}
		return json.Marshal(marshaler)
	case "Inventory Info":
		var marshaler = struct {
			ClassName string `json:"class_name"`
			*inventoryinfo.InventoryInfo
		}{
			ClassName:     e.ClassName,
			InventoryInfo: e.InventoryInfo,
		}
		return json.Marshal(marshaler)
	case "Module Activity":
		var marshaler = struct {
			ClassName string `json:"class_name"`
			*moduleactivity.ModuleActivity
		}{
			ClassName:      e.ClassName,
			ModuleActivity: e.ModuleActivity,
		}
		return json.Marshal(marshaler)
	case "Network Activity":
		var marshaler = struct {
			ClassName string `json:"class_name"`
			*networkactivity.NetworkActivity
		}{
			ClassName:       e.ClassName,
			NetworkActivity: e.NetworkActivity,
		}
		return json.Marshal(marshaler)
	case "Process Activity":
		var marshaler = struct {
			ClassName string `json:"class_name"`
			*processactivity.ProcessActivity
		}{
			ClassName:       e.ClassName,
			ProcessActivity: e.ProcessActivity,
		}
		return json.Marshal(marshaler)
	case "Scheduled Job Activity":
		var marshaler = struct {
			ClassName string `json:"class_name"`
			*scheduledjobactivity.ScheduledJobActivity
		}{
			ClassName:            e.ClassName,
			ScheduledJobActivity: e.ScheduledJobActivity,
		}
		return json.Marshal(marshaler)
	case "Security Finding":
		var marshaler = struct {
			ClassName string `json:"class_name"`
			*securityfinding.SecurityFinding
		}{
			ClassName:       e.ClassName,
			SecurityFinding: e.SecurityFinding,
		}
		return json.Marshal(marshaler)
	case "Vulnerability Finding":
		var marshaler = struct {
			ClassName string `json:"class_name"`
			*vulnerabilityfinding.VulnerabilityFinding
		}{
			ClassName:            e.ClassName,
			VulnerabilityFinding: e.VulnerabilityFinding,
		}
		return json.Marshal(marshaler)
	case "Web Resource Access Activity":
		var marshaler = struct {
			ClassName string `json:"class_name"`
			*webresourceaccessactivity.WebResourceAccessActivity
		}{
			ClassName:                 e.ClassName,
			WebResourceAccessActivity: e.WebResourceAccessActivity,
		}
		return json.Marshal(marshaler)
	}
}

type EventVisitor interface {
	VisitAccountChange(*accountchange.AccountChange) error
	VisitApiActivity(*apiactivity.ApiActivity) error
	VisitAuthentication(*authentication.Authentication) error
	VisitComplianceFinding(*compliancefinding.ComplianceFinding) error
	VisitDetectionFinding(*detectionfinding.DetectionFinding) error
	VisitFileActivity(*fileactivity.FileActivity) error
	VisitGroupManagement(*groupmanagement.GroupManagement) error
	VisitIncidentFinding(*incidentfinding.IncidentFinding) error
	VisitInventoryInfo(*inventoryinfo.InventoryInfo) error
	VisitModuleActivity(*moduleactivity.ModuleActivity) error
	VisitNetworkActivity(*networkactivity.NetworkActivity) error
	VisitProcessActivity(*processactivity.ProcessActivity) error
	VisitScheduledJobActivity(*scheduledjobactivity.ScheduledJobActivity) error
	VisitSecurityFinding(*securityfinding.SecurityFinding) error
	VisitVulnerabilityFinding(*vulnerabilityfinding.VulnerabilityFinding) error
	VisitWebResourceAccessActivity(*webresourceaccessactivity.WebResourceAccessActivity) error
}

func (e *Event) Accept(visitor EventVisitor) error {
	switch e.ClassName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.ClassName, e)
	case "Account Change":
		return visitor.VisitAccountChange(e.AccountChange)
	case "API Activity":
		return visitor.VisitApiActivity(e.ApiActivity)
	case "Authentication":
		return visitor.VisitAuthentication(e.Authentication)
	case "Compliance Finding":
		return visitor.VisitComplianceFinding(e.ComplianceFinding)
	case "Detection Finding":
		return visitor.VisitDetectionFinding(e.DetectionFinding)
	case "File Activity":
		return visitor.VisitFileActivity(e.FileActivity)
	case "Group Management":
		return visitor.VisitGroupManagement(e.GroupManagement)
	case "Incident Finding":
		return visitor.VisitIncidentFinding(e.IncidentFinding)
	case "Inventory Info":
		return visitor.VisitInventoryInfo(e.InventoryInfo)
	case "Module Activity":
		return visitor.VisitModuleActivity(e.ModuleActivity)
	case "Network Activity":
		return visitor.VisitNetworkActivity(e.NetworkActivity)
	case "Process Activity":
		return visitor.VisitProcessActivity(e.ProcessActivity)
	case "Scheduled Job Activity":
		return visitor.VisitScheduledJobActivity(e.ScheduledJobActivity)
	case "Security Finding":
		return visitor.VisitSecurityFinding(e.SecurityFinding)
	case "Vulnerability Finding":
		return visitor.VisitVulnerabilityFinding(e.VulnerabilityFinding)
	case "Web Resource Access Activity":
		return visitor.VisitWebResourceAccessActivity(e.WebResourceAccessActivity)
	}
}

// Notification object
type Notification struct {
	// Human-readable name for this resource
	Name string `json:"name"`
	// Time object was originally created
	CreatedAt time.Time `json:"created_at"`
	// Last time object was updated
	UpdatedAt time.Time      `json:"updated_at"`
	Id        NotificationId `json:"id,omitempty"`
	// Notification priority
	Priority Priority `json:"priority,omitempty"`
	// Notification status
	NotificationStatus NotificationStatus `json:"notification_status,omitempty"`
	// Notification project
	Project string `json:"project"`
	// The current status of the notification.
	Status string `json:"status"`
	// Notification description.
	Description string `json:"description"`
	// Notification summary.
	Summary string `json:"summary"`
	// The notification's type.
	IssueType string `json:"issue_type"`
	// The user who created this notification.
	Creator string `json:"creator"`
	// Who notification is assigned to.
	Assignee string `json:"assignee"`
	// The notification contact information.
	Contact string `json:"contact"`
	// Associate tags with Notification
	Tags []string `json:"tags,omitempty"`
	// External URL reference
	Reference string `json:"reference"`
}

type NotificationStatus string

const (
	NotificationStatusOpen   NotificationStatus = "OPEN"
	NotificationStatusClosed NotificationStatus = "CLOSED"
)

func NewNotificationStatusFromString(s string) (NotificationStatus, error) {
	switch s {
	case "OPEN":
		return NotificationStatusOpen, nil
	case "CLOSED":
		return NotificationStatusClosed, nil
	}
	var t NotificationStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (n NotificationStatus) Ptr() *NotificationStatus {
	return &n
}

type Evidence struct {
	// Unique identifier for the investigation associated with the evidence
	InvestigationId string `json:"investigation_id"`
	// Original response from the SIEM
	RawData string `json:"raw_data"`
}

type Investigation struct {
	// Unique identifier for the investigation
	Id string `json:"id"`
	// Original response from the SIEM
	RawData string `json:"raw_data"`
}

type StoragePath struct {
	Path string `json:"path"`
}

type Attachment struct {
	// The name of the file.
	FileName string `json:"file_name"`
	// The type of the file.
	FileType string `json:"file_type"`
	// File contents
	Content []byte `json:"content"`
}

// Attachment in a ticketing system
type AttachmentMetadata struct {
	// Unique identifier for this attachment.
	Id AttachmentId `json:"id,omitempty"`
	// The ticket this attachment is associated with.
	TicketId TicketId `json:"ticket_id,omitempty"`
	// The name of the file.
	FileName string `json:"file_name"`
	// The type of the file.
	FileType string `json:"file_type"`
	// The size of the file in bytes.
	FileSize *int `json:"file_size,omitempty"`
	// The date the attachment was created.
	CreatedDate time.Time `json:"created_date"`
	// The user who created the attachment.
	Creator string `json:"creator"`
}

type Priority string

const (
	PriorityUrgent Priority = "URGENT"
	PriorityHigh   Priority = "HIGH"
	PriorityMedium Priority = "MEDIUM"
	PriorityLow    Priority = "LOW"
)

func NewPriorityFromString(s string) (Priority, error) {
	switch s {
	case "URGENT":
		return PriorityUrgent, nil
	case "HIGH":
		return PriorityHigh, nil
	case "MEDIUM":
		return PriorityMedium, nil
	case "LOW":
		return PriorityLow, nil
	}
	var t Priority
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p Priority) Ptr() *Priority {
	return &p
}

// Project in a ticketing system
type Project struct {
	// Unique identifier for this project. Use this id in the `project` field of a `Ticket`.
	Id string `json:"id"`
	// Name of the project
	Name string `json:"name"`
}

// Ticketing ticket
type Ticket struct {
	// Human-readable name for this resource
	Name string `json:"name"`
	// Time object was originally created
	CreatedAt time.Time `json:"created_at"`
	// Last time object was updated
	UpdatedAt time.Time `json:"updated_at"`
	Id        TicketId  `json:"id,omitempty"`
	// Ticket summary.
	Summary string `json:"summary"`
	// User who created this ticket.
	Creator *string `json:"creator,omitempty"`
	// Who ticket is assigned to.
	Assignee *string `json:"assignee,omitempty"`
	// Ticket contact information.
	Contact *string `json:"contact,omitempty"`
	// Ticket description.
	Description *string `json:"description,omitempty"`
	// The priority of the Ticket
	Priority *Priority `json:"priority,omitempty"`
	// The ticket's due date.
	DueDate *time.Time `json:"due_date,omitempty"`
	// The ticket's complete date.
	CompletionDate *time.Time `json:"completion_date,omitempty"`
	// The current status of the ticket.
	Status *string `json:"status,omitempty"`
	// The ticket project.
	Project *string `json:"project,omitempty"`
	// The ticket's type.
	IssueType *string `json:"issue_type,omitempty"`
	// Associate tags with Ticket
	Tags []string `json:"tags,omitempty"`
	// Metadata of attachments associated with the ticket
	Attachments []*AttachmentMetadata `json:"attachments,omitempty"`
}

// Asset in a vulnerability scanning system. Represented by OCSF Device Inventory Info class (class_uid 5001).
type Asset = *inventoryinfo.InventoryInfo

type EventId = Id

// Configuration options of a scan.
type ScanConfiguration struct {
	// ID of the scan.
	Uid string `json:"uid"`
	// Name of the scan.
	Name string `json:"name"`
	// Time when the scan was created.
	CreationTime int `json:"creation_time"`
	// Time when the scan was last modified.
	LastModifiedTime int `json:"last_modified_time"`
	// User that owns the scan.
	Owner *User `json:"owner,omitempty"`
	// Schedule of the scan if it is a recurring scan.
	Schedule *ScanSchedule `json:"schedule,omitempty"`
}

type ScanDayOption string

const (
	ScanDayOptionMonday    ScanDayOption = "Monday"
	ScanDayOptionTuesday   ScanDayOption = "Tuesday"
	ScanDayOptionWednesday ScanDayOption = "Wednesday"
	ScanDayOptionThursday  ScanDayOption = "Thursday"
	ScanDayOptionFriday    ScanDayOption = "Friday"
	ScanDayOptionSaturday  ScanDayOption = "Saturday"
	ScanDayOptionSunday    ScanDayOption = "Sunday"
)

func NewScanDayOptionFromString(s string) (ScanDayOption, error) {
	switch s {
	case "Monday":
		return ScanDayOptionMonday, nil
	case "Tuesday":
		return ScanDayOptionTuesday, nil
	case "Wednesday":
		return ScanDayOptionWednesday, nil
	case "Thursday":
		return ScanDayOptionThursday, nil
	case "Friday":
		return ScanDayOptionFriday, nil
	case "Saturday":
		return ScanDayOptionSaturday, nil
	case "Sunday":
		return ScanDayOptionSunday, nil
	}
	var t ScanDayOption
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s ScanDayOption) Ptr() *ScanDayOption {
	return &s
}

type ScanFrequencyOption string

const (
	ScanFrequencyOptionOnce    ScanFrequencyOption = "once"
	ScanFrequencyOptionDaily   ScanFrequencyOption = "daily"
	ScanFrequencyOptionWeekly  ScanFrequencyOption = "weekly"
	ScanFrequencyOptionMonthly ScanFrequencyOption = "monthly"
	ScanFrequencyOptionYearly  ScanFrequencyOption = "yearly"
	ScanFrequencyOptionUnknown ScanFrequencyOption = "unknown"
)

func NewScanFrequencyOptionFromString(s string) (ScanFrequencyOption, error) {
	switch s {
	case "once":
		return ScanFrequencyOptionOnce, nil
	case "daily":
		return ScanFrequencyOptionDaily, nil
	case "weekly":
		return ScanFrequencyOptionWeekly, nil
	case "monthly":
		return ScanFrequencyOptionMonthly, nil
	case "yearly":
		return ScanFrequencyOptionYearly, nil
	case "unknown":
		return ScanFrequencyOptionUnknown, nil
	}
	var t ScanFrequencyOption
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s ScanFrequencyOption) Ptr() *ScanFrequencyOption {
	return &s
}

type ScanSchedule struct {
	// Time of the day when the scan are repeated. For scans that are executed once, this is the time when the scan was started. This is formatted as `HH:MM:SS`.
	Time string `json:"time"`
	// Periodicity of the scan; for example, weekly, means that the scan will be repeated every `repeat_interval` weeks.
	Frequency ScanFrequencyOption `json:"frequency,omitempty"`
	// Number of days, weeks, months, or years between scans. For example, `1` means that the scan will be repeated once every `frequency` period.
	RepeatInterval int `json:"repeat_interval"`
	// Days of the week when the scan will be repeated. For example, `["monday", "friday"]`
	// means that the scan will be repeated on Monday and Friday on the schedule defined by
	// `frequency` and `repeat_interval`.
	Days []string `json:"days,omitempty"`
}

// Result of a vulnerability scan. Represented by OCSF Security Finding class (class_uid 2001).
type SecurityFinding = *securityfinding.SecurityFinding

type User struct {
	// ID of the user.
	Uid string `json:"uid"`
}

// Values supported by using severity as a filter. Supports `[eq]` and `[in]` operators.
// For example, `severity[eq]critical` or `severity[in]critical, high`.
type VulnerabilitySeverityFilterValue string

const (
	VulnerabilitySeverityFilterValueCritical VulnerabilitySeverityFilterValue = "critical"
	VulnerabilitySeverityFilterValueHigh     VulnerabilitySeverityFilterValue = "high"
	VulnerabilitySeverityFilterValueMedium   VulnerabilitySeverityFilterValue = "medium"
	VulnerabilitySeverityFilterValueLow      VulnerabilitySeverityFilterValue = "low"
	VulnerabilitySeverityFilterValueInfo     VulnerabilitySeverityFilterValue = "info"
)

func NewVulnerabilitySeverityFilterValueFromString(s string) (VulnerabilitySeverityFilterValue, error) {
	switch s {
	case "critical":
		return VulnerabilitySeverityFilterValueCritical, nil
	case "high":
		return VulnerabilitySeverityFilterValueHigh, nil
	case "medium":
		return VulnerabilitySeverityFilterValueMedium, nil
	case "low":
		return VulnerabilitySeverityFilterValueLow, nil
	case "info":
		return VulnerabilitySeverityFilterValueInfo, nil
	}
	var t VulnerabilitySeverityFilterValue
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VulnerabilitySeverityFilterValue) Ptr() *VulnerabilitySeverityFilterValue {
	return &v
}
