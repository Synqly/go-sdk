// This file was auto-generated by Fern from our API Definition.

package engine

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/synqly/go-sdk/client/engine/core"
	stix "github.com/synqly/go-sdk/client/engine/stix"
)

type DeleteIocsRequest struct {
	// list of ids to delete
	Ids *string `json:"-" url:"ids,omitempty"`
}

type QueryAlertsRequest struct {
	// Number of threats to return. Defaults to 50.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Start search from cursor position.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Select a field to order the results by. Defaults to `name`. To control the direction of the sorting, append
	// `[asc]` or `[desc]` to the field name. For example, `name[asc]` will sort the results by `name` in ascending order.
	// The ordering defaults to `asc` if not specified.
	Order []*string `json:"-" url:"order,omitempty"`
	// Filter results by this query. For more information on filtering, refer to our Filtering Guide. Defaults to no filter.
	// If used more than once, the queries are ANDed together.
	Filter []*string `json:"-" url:"filter,omitempty"`
	// Include the raw data from the EDR in the response. Defaults to `false`.
	IncludeRawData *bool `json:"-" url:"include_raw_data,omitempty"`
}

type QueryApplicationsRequest struct {
	// Number of applications to return. Defaults to 50.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Start search from cursor position.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Select a field to order the results by. Defaults to `name`. To control the direction of the sorting, append
	// `[asc]` or `[desc]` to the field name. For example, `name[asc]` will sort the results by `name` in ascending order.
	// The ordering defaults to `asc` if not specified.
	Order []*string `json:"-" url:"order,omitempty"`
	// Filter results by this query. For more information on filtering, refer to our Filtering Guide. Defaults to no filter.
	// If used more than once, the queries are ANDed together.
	Filter []*string `json:"-" url:"filter,omitempty"`
}

type QueryEndpointsRequest struct {
	// Number of endpoint assets to return. Defaults to 50.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Start search from cursor position.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Select a field to order the results by. Defaults to `name`. To control the direction of the sorting, append
	// `[asc]` or `[desc]` to the field name. For example, `name[asc]` will sort the results by `name` in ascending order.
	// The ordering defaults to `asc` if not specified.
	Order []*string `json:"-" url:"order,omitempty"`
	// Filter results by this query. For more information on filtering, refer to our Filtering Guide. Defaults to no filter.
	// If used more than once, the queries are ANDed together.
	Filter []*string `json:"-" url:"filter,omitempty"`
}

type QueryIocsRequest struct {
	// Number of threats to return. Defaults to 50.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Start search from cursor position.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Select a field to order the results by. Defaults to `name`. To control the direction of the sorting, append
	// `[asc]` or `[desc]` to the field name. For example, `name[asc]` will sort the results by `name` in ascending order.
	// The ordering defaults to `asc` if not specified.
	Order []*string `json:"-" url:"order,omitempty"`
	// Filter results by this query. For more information on filtering, refer to our Filtering Guide. Defaults to no filter.
	// If used more than once, the queries are ANDed together.
	Filter []*string `json:"-" url:"filter,omitempty"`
	// Include the raw data from the EDR in the response. Defaults to `false`.
	IncludeRawData *bool `json:"-" url:"include_raw_data,omitempty"`
}

type QueryPostureScoreRequest struct {
	// Number of scores for endpoints to return. Defaults to 50.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Start search from cursor position.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Select a field to order the results by. Defaults to `name`. To control the direction of the sorting, append
	// `[asc]` or `[desc]` to the field name. For example, `name[asc]` will sort the results by `name` in ascending order.
	// The ordering defaults to `asc` if not specified.
	Order []*string `json:"-" url:"order,omitempty"`
	// Filter results by this query. For more information on filtering, refer to our Filtering Guide. Defaults to no filter.
	// If used more than once, the queries are ANDed together.
	Filter []*string `json:"-" url:"filter,omitempty"`
	// Include the raw data from the EDR in the response. Defaults to `false`.
	IncludeRawData *bool `json:"-" url:"include_raw_data,omitempty"`
}

type QueryThreatsRequest struct {
	// Number of threats to return. Defaults to 50.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Start search from cursor position.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Select a field to order the results by. Defaults to `name`. To control the direction of the sorting, append
	// `[asc]` or `[desc]` to the field name. For example, `name[asc]` will sort the results by `name` in ascending order.
	// The ordering defaults to `asc` if not specified.
	Order []*string `json:"-" url:"order,omitempty"`
	// Filter results by this query. For more information on filtering, refer to our Filtering Guide. Defaults to no filter.
	// If used more than once, the queries are ANDed together.
	Filter []*string `json:"-" url:"filter,omitempty"`
	// Include the raw data from the EDR in the response. Defaults to `false`.
	IncludeRawData *bool `json:"-" url:"include_raw_data,omitempty"`
}

type Id = string

type CreateIocsRequest struct {
	// The list of iocs to create
	Indicators []*stix.Indicator `json:"indicators" url:"indicators"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateIocsRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateIocsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateIocsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateIocsRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = nil
	return nil
}

func (c *CreateIocsRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateIocsResponse struct {
	// A list of the indicators that were created
	Result []*stix.Indicator `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateIocsResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateIocsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateIocsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateIocsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = nil
	return nil
}

func (c *CreateIocsResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteIocsResponse struct {
	// A list of ids of the iocs that were deleted.
	Result []string `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeleteIocsResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteIocsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteIocsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteIocsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = nil
	return nil
}

func (d *DeleteIocsResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetEndpointResponse struct {
	// A single endpoint assets that match the Id.
	Result Device `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetEndpointResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetEndpointResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetEndpointResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetEndpointResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = nil
	return nil
}

func (g *GetEndpointResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type NetworkQuarantineRequest struct {
	// The connection state (Connect or Disconnect) to enforce for the provided endpoint IDs.
	State ConnectionState `json:"state" url:"state"`
	// The list of endpoint IDs to enforce the connection state on.
	EndpointIds []string `json:"endpoint_ids" url:"endpoint_ids"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NetworkQuarantineRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NetworkQuarantineRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NetworkQuarantineRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NetworkQuarantineRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = nil
	return nil
}

func (n *NetworkQuarantineRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NetworkQuarantineResponse struct {
	// The list of endpoint IDs or action IDs that were successfully quarantined or unquarantined.
	Result []string `json:"result" url:"result"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NetworkQuarantineResponse) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NetworkQuarantineResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler NetworkQuarantineResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NetworkQuarantineResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = nil
	return nil
}

func (n *NetworkQuarantineResponse) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type QueryAlertsResponse struct {
	// List of alerts that match the query.
	Result []*Event `json:"result" url:"result"`
	// Cursor to use to retrieve the next page of results.
	Cursor string `json:"cursor" url:"cursor"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (q *QueryAlertsResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryAlertsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryAlertsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryAlertsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties

	q._rawJSON = nil
	return nil
}

func (q *QueryAlertsResponse) String() string {
	if len(q._rawJSON) > 0 {
		if value, err := core.StringifyJSON(q._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryApplicationsResponse struct {
	// List of applications that match the query.
	Result []Application `json:"result" url:"result"`
	// Cursor to use to retrieve the next page of results.
	Cursor string `json:"cursor" url:"cursor"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (q *QueryApplicationsResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryApplicationsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryApplicationsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryApplicationsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties

	q._rawJSON = nil
	return nil
}

func (q *QueryApplicationsResponse) String() string {
	if len(q._rawJSON) > 0 {
		if value, err := core.StringifyJSON(q._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryEndpointsResponse struct {
	// List of endpoint assets that match the query.
	Result []Device `json:"result" url:"result"`
	// Cursor to use to retrieve the next page of results.
	Cursor string `json:"cursor" url:"cursor"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (q *QueryEndpointsResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryEndpointsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryEndpointsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryEndpointsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties

	q._rawJSON = nil
	return nil
}

func (q *QueryEndpointsResponse) String() string {
	if len(q._rawJSON) > 0 {
		if value, err := core.StringifyJSON(q._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryIocsResponse struct {
	// List of iocs that match the query.
	Result []*stix.Indicator `json:"result" url:"result"`
	// Cursor to use to retrieve the next page of results.
	Cursor string `json:"cursor" url:"cursor"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (q *QueryIocsResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryIocsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryIocsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryIocsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties

	q._rawJSON = nil
	return nil
}

func (q *QueryIocsResponse) String() string {
	if len(q._rawJSON) > 0 {
		if value, err := core.StringifyJSON(q._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryPostureScoreResponse struct {
	// List of posture scores that match the query.
	Result []PostureScore `json:"result" url:"result"`
	// Cursor to use to retrieve the next page of results.
	Cursor string `json:"cursor" url:"cursor"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (q *QueryPostureScoreResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryPostureScoreResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryPostureScoreResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryPostureScoreResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties

	q._rawJSON = nil
	return nil
}

func (q *QueryPostureScoreResponse) String() string {
	if len(q._rawJSON) > 0 {
		if value, err := core.StringifyJSON(q._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryThreatsResponse struct {
	// List of threats that match the query.
	Result []ThreatEvent `json:"result" url:"result"`
	// Cursor to use to retrieve the next page of results.
	Cursor string `json:"cursor" url:"cursor"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (q *QueryThreatsResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryThreatsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryThreatsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryThreatsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties

	q._rawJSON = nil
	return nil
}

func (q *QueryThreatsResponse) String() string {
	if len(q._rawJSON) > 0 {
		if value, err := core.StringifyJSON(q._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}
