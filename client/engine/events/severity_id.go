// This file was auto-generated by Fern from our API Definition.

package events

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Severity ID. <p>The normalized identifier of the event severity.</p>The normalized severity is a measurement the effort and expense required to manage and resolve an event or incident. Smaller numerical values represent lower impact events, and larger numerical values represent higher impact events.
type SeverityId uint8

const (
	// The event severity is not known.
	SeverityIdUnknown SeverityId = iota + 1
	// Informational message. No action required.
	SeverityIdInformational
	// The user decides if action is needed.
	SeverityIdLow
	// Action is required but the situation is not serious at this time.
	SeverityIdMedium
	// Action is required immediately.
	SeverityIdHigh
	// Action is required immediately and the scope is broad.
	SeverityIdCritical
	// An error occurred but it is too late to take remedial action.
	SeverityIdFatal
	// The event severity is not mapped. See the <code>severity</code> attribute, which contains a data source specific value.
	SeverityIdOther
)

func (s SeverityId) String() string {
	switch s {
	default:
		return strconv.Itoa(int(s))
	case SeverityIdUnknown:
		return "0"
	case SeverityIdInformational:
		return "1"
	case SeverityIdLow:
		return "2"
	case SeverityIdMedium:
		return "3"
	case SeverityIdHigh:
		return "4"
	case SeverityIdCritical:
		return "5"
	case SeverityIdFatal:
		return "6"
	case SeverityIdOther:
		return "99"
	}
}

func (s SeverityId) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", s.String())), nil
}

func (s *SeverityId) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "0":
		value := SeverityIdUnknown
		*s = value
	case "1":
		value := SeverityIdInformational
		*s = value
	case "2":
		value := SeverityIdLow
		*s = value
	case "3":
		value := SeverityIdMedium
		*s = value
	case "4":
		value := SeverityIdHigh
		*s = value
	case "5":
		value := SeverityIdCritical
		*s = value
	case "6":
		value := SeverityIdFatal
		*s = value
	case "99":
		value := SeverityIdOther
		*s = value
	}
	return nil
}
