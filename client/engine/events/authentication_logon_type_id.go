// This file was auto-generated by Fern from our API Definition.

package events

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Logon Type ID. The normalized logon type identifier.
type AuthenticationLogonTypeId uint8

const (
	// Used only by the System account, for example at system startup.
	AuthenticationLogonTypeIdSystem AuthenticationLogonTypeId = iota + 1
	// A local logon to device console.
	AuthenticationLogonTypeIdInteractive
	// A user or device logged onto this device from the network.
	AuthenticationLogonTypeIdNetwork
	// A batch server logon, where processes may be executing on behalf of a user without their direct intervention.
	AuthenticationLogonTypeIdBatch
	// A logon by a service or daemon that was started by the OS.
	AuthenticationLogonTypeIdOsService
	// A user unlocked the device.
	AuthenticationLogonTypeIdUnlock
	// A user logged on to this device from the network. The user's password in the authentication package was not hashed.
	AuthenticationLogonTypeIdNetworkCleartext
	// A caller cloned its current token and specified new credentials for outbound connections. The new logon session has the same local identity, but uses different credentials for other network connections.
	AuthenticationLogonTypeIdNewCredentials
	// A remote logon using Terminal Services or remote desktop application.
	AuthenticationLogonTypeIdRemoteInteractive
	// A user logged on to this device with network credentials that were stored locally on the device and the domain controller was not contacted to verify the credentials.
	AuthenticationLogonTypeIdCachedInteractive
	// Same as Remote Interactive. This is used for internal auditing.
	AuthenticationLogonTypeIdCachedRemoteInteractive
	// Workstation logon.
	AuthenticationLogonTypeIdCachedUnlock
	// Other logon type.
	AuthenticationLogonTypeIdOther
)

func (a AuthenticationLogonTypeId) String() string {
	switch a {
	default:
		return strconv.Itoa(int(a))
	case AuthenticationLogonTypeIdSystem:
		return "0"
	case AuthenticationLogonTypeIdInteractive:
		return "2"
	case AuthenticationLogonTypeIdNetwork:
		return "3"
	case AuthenticationLogonTypeIdBatch:
		return "4"
	case AuthenticationLogonTypeIdOsService:
		return "5"
	case AuthenticationLogonTypeIdUnlock:
		return "7"
	case AuthenticationLogonTypeIdNetworkCleartext:
		return "8"
	case AuthenticationLogonTypeIdNewCredentials:
		return "9"
	case AuthenticationLogonTypeIdRemoteInteractive:
		return "10"
	case AuthenticationLogonTypeIdCachedInteractive:
		return "11"
	case AuthenticationLogonTypeIdCachedRemoteInteractive:
		return "12"
	case AuthenticationLogonTypeIdCachedUnlock:
		return "13"
	case AuthenticationLogonTypeIdOther:
		return "99"
	}
}

func (a AuthenticationLogonTypeId) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", a.String())), nil
}

func (a *AuthenticationLogonTypeId) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "0":
		value := AuthenticationLogonTypeIdSystem
		*a = value
	case "2":
		value := AuthenticationLogonTypeIdInteractive
		*a = value
	case "3":
		value := AuthenticationLogonTypeIdNetwork
		*a = value
	case "4":
		value := AuthenticationLogonTypeIdBatch
		*a = value
	case "5":
		value := AuthenticationLogonTypeIdOsService
		*a = value
	case "7":
		value := AuthenticationLogonTypeIdUnlock
		*a = value
	case "8":
		value := AuthenticationLogonTypeIdNetworkCleartext
		*a = value
	case "9":
		value := AuthenticationLogonTypeIdNewCredentials
		*a = value
	case "10":
		value := AuthenticationLogonTypeIdRemoteInteractive
		*a = value
	case "11":
		value := AuthenticationLogonTypeIdCachedInteractive
		*a = value
	case "12":
		value := AuthenticationLogonTypeIdCachedRemoteInteractive
		*a = value
	case "13":
		value := AuthenticationLogonTypeIdCachedUnlock
		*a = value
	case "99":
		value := AuthenticationLogonTypeIdOther
		*a = value
	}
	return nil
}
