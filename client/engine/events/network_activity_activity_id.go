// This file was auto-generated by Fern from our API Definition.

package events

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Activity ID. The normalized identifier of the activity that triggered the event.
type NetworkActivityActivityId uint8

const (
	// The event activity is unknown.
	NetworkActivityActivityIdUnknown NetworkActivityActivityId = iota + 1
	// A new network connection was opened.
	NetworkActivityActivityIdOpen
	// The network connection was closed.
	NetworkActivityActivityIdClose
	// The network connection was abnormally terminated or closed by a middle device like firewalls.
	NetworkActivityActivityIdReset
	// The network connection failed. For example a connection timeout or no route to host.
	NetworkActivityActivityIdFail
	// The network connection was refused. For example an attempt to connect to a server port which is not open.
	NetworkActivityActivityIdRefuse
	// Network traffic report.
	NetworkActivityActivityIdTraffic
	// The event activity is not mapped.
	NetworkActivityActivityIdOther
)

func (n NetworkActivityActivityId) String() string {
	switch n {
	default:
		return strconv.Itoa(int(n))
	case NetworkActivityActivityIdUnknown:
		return "0"
	case NetworkActivityActivityIdOpen:
		return "1"
	case NetworkActivityActivityIdClose:
		return "2"
	case NetworkActivityActivityIdReset:
		return "3"
	case NetworkActivityActivityIdFail:
		return "4"
	case NetworkActivityActivityIdRefuse:
		return "5"
	case NetworkActivityActivityIdTraffic:
		return "6"
	case NetworkActivityActivityIdOther:
		return "99"
	}
}

func (n NetworkActivityActivityId) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", n.String())), nil
}

func (n *NetworkActivityActivityId) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "0":
		value := NetworkActivityActivityIdUnknown
		*n = value
	case "1":
		value := NetworkActivityActivityIdOpen
		*n = value
	case "2":
		value := NetworkActivityActivityIdClose
		*n = value
	case "3":
		value := NetworkActivityActivityIdReset
		*n = value
	case "4":
		value := NetworkActivityActivityIdFail
		*n = value
	case "5":
		value := NetworkActivityActivityIdRefuse
		*n = value
	case "6":
		value := NetworkActivityActivityIdTraffic
		*n = value
	case "99":
		value := NetworkActivityActivityIdOther
		*n = value
	}
	return nil
}
