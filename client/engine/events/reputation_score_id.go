// This file was auto-generated by Fern from our API Definition.

package events

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Reputation Score ID. The normalized reputation score identifier.
type ReputationScoreId uint8

const (
	// The reputation score is unknown.
	ReputationScoreIdUnknown ReputationScoreId = iota + 1
	// Long history of good behavior.
	ReputationScoreIdVerySafe
	// Consistently good behavior.
	ReputationScoreIdSafe
	// Reasonable history of good behavior.
	ReputationScoreIdProbablySafe
	// Starting to establish a history of normal behavior.
	ReputationScoreIdLeansSafe
	// No established history of normal behavior.
	ReputationScoreIdMaynotbeSafe
	// Starting to establish a history of suspicious or risky behavior.
	ReputationScoreIdExerciseCaution
	// A site with a history of suspicious or risky behavior. (spam, scam, potentially unwanted software, potentially malicious).
	ReputationScoreIdSuspiciousRisky
	// Strong possibility of maliciousness.
	ReputationScoreIdPossiblyMalicious
	// Indicators of maliciousness.
	ReputationScoreIdProbablyMalicious
	// Proven evidence of maliciousness.
	ReputationScoreIdMalicious
	// The reputation score is not mapped. See the <code>rep_score</code> attribute, which contains a data source specific value.
	ReputationScoreIdOther
)

func (r ReputationScoreId) String() string {
	switch r {
	default:
		return strconv.Itoa(int(r))
	case ReputationScoreIdUnknown:
		return "0"
	case ReputationScoreIdVerySafe:
		return "1"
	case ReputationScoreIdSafe:
		return "2"
	case ReputationScoreIdProbablySafe:
		return "3"
	case ReputationScoreIdLeansSafe:
		return "4"
	case ReputationScoreIdMaynotbeSafe:
		return "5"
	case ReputationScoreIdExerciseCaution:
		return "6"
	case ReputationScoreIdSuspiciousRisky:
		return "7"
	case ReputationScoreIdPossiblyMalicious:
		return "8"
	case ReputationScoreIdProbablyMalicious:
		return "9"
	case ReputationScoreIdMalicious:
		return "10"
	case ReputationScoreIdOther:
		return "99"
	}
}

func (r ReputationScoreId) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", r.String())), nil
}

func (r *ReputationScoreId) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "0":
		value := ReputationScoreIdUnknown
		*r = value
	case "1":
		value := ReputationScoreIdVerySafe
		*r = value
	case "2":
		value := ReputationScoreIdSafe
		*r = value
	case "3":
		value := ReputationScoreIdProbablySafe
		*r = value
	case "4":
		value := ReputationScoreIdLeansSafe
		*r = value
	case "5":
		value := ReputationScoreIdMaynotbeSafe
		*r = value
	case "6":
		value := ReputationScoreIdExerciseCaution
		*r = value
	case "7":
		value := ReputationScoreIdSuspiciousRisky
		*r = value
	case "8":
		value := ReputationScoreIdPossiblyMalicious
		*r = value
	case "9":
		value := ReputationScoreIdProbablyMalicious
		*r = value
	case "10":
		value := ReputationScoreIdMalicious
		*r = value
	case "99":
		value := ReputationScoreIdOther
		*r = value
	}
	return nil
}
