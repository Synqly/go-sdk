// This file was auto-generated by Fern from our API Definition.

package events

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Type ID. The analytic type ID.
type AnalyticTypeId uint8

const (
	// The type is unknown.
	AnalyticTypeIdUnknown AnalyticTypeId = iota + 1
	AnalyticTypeIdRule
	AnalyticTypeIdBehavioral
	AnalyticTypeIdStatistical
	AnalyticTypeIdLearningMlDl
	// The type is not mapped. See the <code>type</code> attribute, which may contain a data source specific value.
	AnalyticTypeIdOther
)

func (a AnalyticTypeId) String() string {
	switch a {
	default:
		return strconv.Itoa(int(a))
	case AnalyticTypeIdUnknown:
		return "0"
	case AnalyticTypeIdRule:
		return "1"
	case AnalyticTypeIdBehavioral:
		return "2"
	case AnalyticTypeIdStatistical:
		return "3"
	case AnalyticTypeIdLearningMlDl:
		return "4"
	case AnalyticTypeIdOther:
		return "99"
	}
}

func (a AnalyticTypeId) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", a.String())), nil
}

func (a *AnalyticTypeId) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "0":
		value := AnalyticTypeIdUnknown
		*a = value
	case "1":
		value := AnalyticTypeIdRule
		*a = value
	case "2":
		value := AnalyticTypeIdBehavioral
		*a = value
	case "3":
		value := AnalyticTypeIdStatistical
		*a = value
	case "4":
		value := AnalyticTypeIdLearningMlDl
		*a = value
	case "99":
		value := AnalyticTypeIdOther
		*a = value
	}
	return nil
}
