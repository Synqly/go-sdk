// This file was auto-generated by Fern from our API Definition.

package events

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Confidence Id. The normalized confidence refers to the accuracy of the rule that created the finding. A rule with a low confidence means that the finding scope is wide and may create finding reports that may not be malicious in nature.
type SecurityFindingConfidenceId uint8

const (
	// No confidence is assigned.
	SecurityFindingConfidenceIdUnknown SecurityFindingConfidenceId = iota + 1
	SecurityFindingConfidenceIdLow
	SecurityFindingConfidenceIdMedium
	SecurityFindingConfidenceIdHigh
	// The confidence is not mapped to the defined enum values. See the <code>confidence</code> attribute, which contains a data source specific value.
	SecurityFindingConfidenceIdOther
)

func (s SecurityFindingConfidenceId) String() string {
	switch s {
	default:
		return strconv.Itoa(int(s))
	case SecurityFindingConfidenceIdUnknown:
		return "0"
	case SecurityFindingConfidenceIdLow:
		return "1"
	case SecurityFindingConfidenceIdMedium:
		return "2"
	case SecurityFindingConfidenceIdHigh:
		return "3"
	case SecurityFindingConfidenceIdOther:
		return "99"
	}
}

func (s SecurityFindingConfidenceId) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", s.String())), nil
}

func (s *SecurityFindingConfidenceId) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "0":
		value := SecurityFindingConfidenceIdUnknown
		*s = value
	case "1":
		value := SecurityFindingConfidenceIdLow
		*s = value
	case "2":
		value := SecurityFindingConfidenceIdMedium
		*s = value
	case "3":
		value := SecurityFindingConfidenceIdHigh
		*s = value
	case "99":
		value := SecurityFindingConfidenceIdOther
		*s = value
	}
	return nil
}
