// This file was auto-generated by Fern from our API Definition.

package events

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Type ID. The file type ID.
type FileTypeId uint8

const (
	// The type is unknown.
	FileTypeIdUnknown FileTypeId = iota + 1
	FileTypeIdRegularFile
	FileTypeIdFolder
	FileTypeIdCharacterDevice
	FileTypeIdBlockDevice
	FileTypeIdLocalSocket
	FileTypeIdNamedPipe
	FileTypeIdSymbolicLink
	// The type is not mapped. See the <code>type</code> attribute, which may contain a data source specific value.
	FileTypeIdOther
)

func (f FileTypeId) String() string {
	switch f {
	default:
		return strconv.Itoa(int(f))
	case FileTypeIdUnknown:
		return "0"
	case FileTypeIdRegularFile:
		return "1"
	case FileTypeIdFolder:
		return "2"
	case FileTypeIdCharacterDevice:
		return "3"
	case FileTypeIdBlockDevice:
		return "4"
	case FileTypeIdLocalSocket:
		return "5"
	case FileTypeIdNamedPipe:
		return "6"
	case FileTypeIdSymbolicLink:
		return "7"
	case FileTypeIdOther:
		return "99"
	}
}

func (f FileTypeId) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", f.String())), nil
}

func (f *FileTypeId) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "0":
		value := FileTypeIdUnknown
		*f = value
	case "1":
		value := FileTypeIdRegularFile
		*f = value
	case "2":
		value := FileTypeIdFolder
		*f = value
	case "3":
		value := FileTypeIdCharacterDevice
		*f = value
	case "4":
		value := FileTypeIdBlockDevice
		*f = value
	case "5":
		value := FileTypeIdLocalSocket
		*f = value
	case "6":
		value := FileTypeIdNamedPipe
		*f = value
	case "7":
		value := FileTypeIdSymbolicLink
		*f = value
	case "99":
		value := FileTypeIdOther
		*f = value
	}
	return nil
}
