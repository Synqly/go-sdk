// This file was auto-generated by Fern from our API Definition.

package events

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// DNS Opcode ID. The DNS opcode ID specifies the normalized query message type.
type DnsQueryOpcodeId uint8

const (
	// Standard query
	DnsQueryOpcodeIdQuery DnsQueryOpcodeId = iota + 1
	// Inverse query, obsolete
	DnsQueryOpcodeIdInverseQuery
	// Server status request
	DnsQueryOpcodeIdStatus
	// Reserved, not used
	DnsQueryOpcodeIdReserved
	// Zone change notification
	DnsQueryOpcodeIdNotify
	// Dynamic DNS update
	DnsQueryOpcodeIdUpdate
	// DNS Stateful Operations (DSO)
	DnsQueryOpcodeIdDsoMessage
)

func (d DnsQueryOpcodeId) String() string {
	switch d {
	default:
		return strconv.Itoa(int(d))
	case DnsQueryOpcodeIdQuery:
		return "0"
	case DnsQueryOpcodeIdInverseQuery:
		return "1"
	case DnsQueryOpcodeIdStatus:
		return "2"
	case DnsQueryOpcodeIdReserved:
		return "3"
	case DnsQueryOpcodeIdNotify:
		return "4"
	case DnsQueryOpcodeIdUpdate:
		return "5"
	case DnsQueryOpcodeIdDsoMessage:
		return "6"
	}
}

func (d DnsQueryOpcodeId) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", d.String())), nil
}

func (d *DnsQueryOpcodeId) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "0":
		value := DnsQueryOpcodeIdQuery
		*d = value
	case "1":
		value := DnsQueryOpcodeIdInverseQuery
		*d = value
	case "2":
		value := DnsQueryOpcodeIdStatus
		*d = value
	case "3":
		value := DnsQueryOpcodeIdReserved
		*d = value
	case "4":
		value := DnsQueryOpcodeIdNotify
		*d = value
	case "5":
		value := DnsQueryOpcodeIdUpdate
		*d = value
	case "6":
		value := DnsQueryOpcodeIdDsoMessage
		*d = value
	}
	return nil
}
