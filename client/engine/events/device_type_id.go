// This file was auto-generated by Fern from our API Definition.

package events

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Type ID. The device type ID.
type DeviceTypeId uint8

const (
	// The type is unknown.
	DeviceTypeIdUnknown DeviceTypeId = iota + 1
	DeviceTypeIdServer
	DeviceTypeIdDesktop
	DeviceTypeIdLaptop
	DeviceTypeIdTablet
	DeviceTypeIdMobile
	DeviceTypeIdVirtual
	DeviceTypeIdIot
	DeviceTypeIdBrowser
	// The type is not mapped. See the <code>type</code> attribute, which may contain a data source specific value.
	DeviceTypeIdOther
)

func (d DeviceTypeId) String() string {
	switch d {
	default:
		return strconv.Itoa(int(d))
	case DeviceTypeIdUnknown:
		return "0"
	case DeviceTypeIdServer:
		return "1"
	case DeviceTypeIdDesktop:
		return "2"
	case DeviceTypeIdLaptop:
		return "3"
	case DeviceTypeIdTablet:
		return "4"
	case DeviceTypeIdMobile:
		return "5"
	case DeviceTypeIdVirtual:
		return "6"
	case DeviceTypeIdIot:
		return "7"
	case DeviceTypeIdBrowser:
		return "8"
	case DeviceTypeIdOther:
		return "99"
	}
}

func (d DeviceTypeId) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", d.String())), nil
}

func (d *DeviceTypeId) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "0":
		value := DeviceTypeIdUnknown
		*d = value
	case "1":
		value := DeviceTypeIdServer
		*d = value
	case "2":
		value := DeviceTypeIdDesktop
		*d = value
	case "3":
		value := DeviceTypeIdLaptop
		*d = value
	case "4":
		value := DeviceTypeIdTablet
		*d = value
	case "5":
		value := DeviceTypeIdMobile
		*d = value
	case "6":
		value := DeviceTypeIdVirtual
		*d = value
	case "7":
		value := DeviceTypeIdIot
		*d = value
	case "8":
		value := DeviceTypeIdBrowser
		*d = value
	case "99":
		value := DeviceTypeIdOther
		*d = value
	}
	return nil
}
