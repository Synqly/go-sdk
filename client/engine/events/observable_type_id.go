// This file was auto-generated by Fern from our API Definition.

package events

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Type ID. The observable value type identifier.
type ObservableTypeId uint8

const (
	// Unknown observable data type.
	ObservableTypeIdUnknown ObservableTypeId = iota + 1
	// Unique name assigned to a device connected to a computer network. A domain name in general is an Internet address that can be resolved through the Domain Name System (DNS). For example: <code>r2-d2.example.com</code>.
	ObservableTypeIdHostname
	// Internet Protocol address (IP address), in either IPv4 or IPv6 format.
	ObservableTypeIdIpAddress
	// Media Access Control (MAC) address. For example: <code>18:36:F3:98:4F:9A</code>.
	ObservableTypeIdMacAddress
	// User name. For example: <code>john_doe</code>.
	ObservableTypeIdUserName
	// Email address. For example: <code>john_doe@example.com</code>.
	ObservableTypeIdEmailAddress
	// Uniform Resource Locator (URL) string. For example: <code>http://www.example.com/download/trouble.exe</code>.
	ObservableTypeIdUrlString
	// File name. For example: <code>text-file.txt</code>.
	ObservableTypeIdFileName
	// File hash. A unique value that corresponds to the content of the file.
	ObservableTypeIdFileHash
	// Process name. For example: <code>Notepad</code>.
	ObservableTypeIdProcessName
	// Resource unique identifier. For example, S3 Bucket name or EC2 Instance ID.
	ObservableTypeIdResourceUid
	// The Endpoint object describes a physical or virtual device that connects to and exchanges information with a computer network. Some examples of endpoints are mobile devices, desktop computers, virtual machines, embedded devices, and servers. Internet-of-Things devices—like cameras, lighting, refrigerators, security systems, smart speakers, and thermostats—are also endpoints.
	ObservableTypeIdEndpoint
	// The User object describes the characteristics of a user/person or a security principal. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:UserAccount/'>d3f:UserAccount</a>.
	ObservableTypeIdUser
	// The Email object describes the email metadata such as sender, recipients, and direction. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Email/'>d3f:Email</a>.
	ObservableTypeIdEmail
	// The Uniform Resource Locator(URL) object describes the characteristics of a URL. Defined in <a target='_blank' href='https://datatracker.ietf.org/doc/html/rfc1738'>RFC 1738</a> and by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:URL/'>d3f:URL</a>.
	ObservableTypeIdUniformResourceLocator
	// The File object represents the metadata associated with a file stored in a computer system. It encompasses information about the file itself, including its attributes, properties, and organizational details. Defined by D3FEND <a target='_blank' href='https://next.d3fend.mitre.org/dao/artifact/d3f:File/'>d3f:File</a>.
	ObservableTypeIdFile
	// The Process object describes a running instance of a launched program. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:Process/'>d3f:Process</a>.
	ObservableTypeIdProcess
	// The Geo Location object describes a geographical location, usually associated with an IP address. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:PhysicalLocation/'>d3f:PhysicalLocation</a>.
	ObservableTypeIdGeoLocation
	// The Container object describes an instance of a specific container. A container is a prepackaged, portable system image that runs isolated on an existing system using a container runtime like containerd.
	ObservableTypeIdContainer
	// The registry key object describes a Windows registry key. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:WindowsRegistryKey/'>d3f:WindowsRegistryKey</a>.
	ObservableTypeIdRegistryKey
	// The registry value object describes a Windows registry value.
	ObservableTypeIdRegistryValue
	// The Fingerprint object provides detailed information about a digital fingerprint, which is a compact representation of data used to identify a longer piece of information, such as a public key or file content. It contains the algorithm and value of the fingerprint, enabling efficient and reliable identification of the associated data.
	ObservableTypeIdFingerprint
	// The observable data type is not mapped. See the <code>type</code> attribute, which may contain data source specific value.
	ObservableTypeIdOther
)

func (o ObservableTypeId) String() string {
	switch o {
	default:
		return strconv.Itoa(int(o))
	case ObservableTypeIdUnknown:
		return "0"
	case ObservableTypeIdHostname:
		return "1"
	case ObservableTypeIdIpAddress:
		return "2"
	case ObservableTypeIdMacAddress:
		return "3"
	case ObservableTypeIdUserName:
		return "4"
	case ObservableTypeIdEmailAddress:
		return "5"
	case ObservableTypeIdUrlString:
		return "6"
	case ObservableTypeIdFileName:
		return "7"
	case ObservableTypeIdFileHash:
		return "8"
	case ObservableTypeIdProcessName:
		return "9"
	case ObservableTypeIdResourceUid:
		return "10"
	case ObservableTypeIdEndpoint:
		return "20"
	case ObservableTypeIdUser:
		return "21"
	case ObservableTypeIdEmail:
		return "22"
	case ObservableTypeIdUniformResourceLocator:
		return "23"
	case ObservableTypeIdFile:
		return "24"
	case ObservableTypeIdProcess:
		return "25"
	case ObservableTypeIdGeoLocation:
		return "26"
	case ObservableTypeIdContainer:
		return "27"
	case ObservableTypeIdRegistryKey:
		return "28"
	case ObservableTypeIdRegistryValue:
		return "29"
	case ObservableTypeIdFingerprint:
		return "30"
	case ObservableTypeIdOther:
		return "99"
	}
}

func (o ObservableTypeId) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", o.String())), nil
}

func (o *ObservableTypeId) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "0":
		value := ObservableTypeIdUnknown
		*o = value
	case "1":
		value := ObservableTypeIdHostname
		*o = value
	case "2":
		value := ObservableTypeIdIpAddress
		*o = value
	case "3":
		value := ObservableTypeIdMacAddress
		*o = value
	case "4":
		value := ObservableTypeIdUserName
		*o = value
	case "5":
		value := ObservableTypeIdEmailAddress
		*o = value
	case "6":
		value := ObservableTypeIdUrlString
		*o = value
	case "7":
		value := ObservableTypeIdFileName
		*o = value
	case "8":
		value := ObservableTypeIdFileHash
		*o = value
	case "9":
		value := ObservableTypeIdProcessName
		*o = value
	case "10":
		value := ObservableTypeIdResourceUid
		*o = value
	case "20":
		value := ObservableTypeIdEndpoint
		*o = value
	case "21":
		value := ObservableTypeIdUser
		*o = value
	case "22":
		value := ObservableTypeIdEmail
		*o = value
	case "23":
		value := ObservableTypeIdUniformResourceLocator
		*o = value
	case "24":
		value := ObservableTypeIdFile
		*o = value
	case "25":
		value := ObservableTypeIdProcess
		*o = value
	case "26":
		value := ObservableTypeIdGeoLocation
		*o = value
	case "27":
		value := ObservableTypeIdContainer
		*o = value
	case "28":
		value := ObservableTypeIdRegistryKey
		*o = value
	case "29":
		value := ObservableTypeIdRegistryValue
		*o = value
	case "30":
		value := ObservableTypeIdFingerprint
		*o = value
	case "99":
		value := ObservableTypeIdOther
		*o = value
	}
	return nil
}
