// This file was auto-generated by Fern from our API Definition.

package events

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Type ID. The event type ID. It identifies the event's semantics and structure. The value is calculated by the logging system as: <code>class_uid * 100 + activity_id</code>.
type SecurityFindingTypeUid uint8

const (
	SecurityFindingTypeUidSecurityFindingUnknown SecurityFindingTypeUid = iota + 1
	// A security finding is created.
	SecurityFindingTypeUidSecurityFindingCreate
	// A security finding is updated.
	SecurityFindingTypeUidSecurityFindingUpdate
	SecurityFindingTypeUidSecurityFindingOther
)

func (s SecurityFindingTypeUid) String() string {
	switch s {
	default:
		return strconv.Itoa(int(s))
	case SecurityFindingTypeUidSecurityFindingUnknown:
		return "200100"
	case SecurityFindingTypeUidSecurityFindingCreate:
		return "200101"
	case SecurityFindingTypeUidSecurityFindingUpdate:
		return "200102"
	case SecurityFindingTypeUidSecurityFindingOther:
		return "200199"
	}
}

func (s SecurityFindingTypeUid) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", s.String())), nil
}

func (s *SecurityFindingTypeUid) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "200100":
		value := SecurityFindingTypeUidSecurityFindingUnknown
		*s = value
	case "200101":
		value := SecurityFindingTypeUidSecurityFindingCreate
		*s = value
	case "200102":
		value := SecurityFindingTypeUidSecurityFindingUpdate
		*s = value
	case "200199":
		value := SecurityFindingTypeUidSecurityFindingOther
		*s = value
	}
	return nil
}
