// This file was auto-generated by Fern from our API Definition.

package events

// The Transport Layer Security (TLS) object describes the negotiated TLS protocol used for secure communications over an establish network connection.
type Tls struct {
	// The integer value of TLS alert if present. The alerts are defined in the TLS specification in <a target='_blank' href='https://datatracker.ietf.org/doc/html/rfc2246'>RFC-2246</a>.
	Alert *int `json:"alert,omitempty"`
	// The certificate object containing information about the digital certificate.
	Certificate *Certificate `json:"certificate,omitempty"`
	// The Chain of Certificate Serial Numbers field provides a chain of Certificate Issuer Serial Numbers leading to the Root Certificate Issuer.
	CertificateChain *[]string `json:"certificate_chain,omitempty"`
	// The negotiated cipher suite.
	Cipher *string `json:"cipher,omitempty"`
	// The client cipher suites that were exchanged during the TLS handshake negotiation.
	ClientCiphers *[]string `json:"client_ciphers,omitempty"`
	// The list of TLS extensions.
	ExtensionList *[]*TlsExtension `json:"extension_list,omitempty"`
	// The amount of total time for the TLS handshake to complete after the TCP connection is established, including client-side delays, in milliseconds.
	HandshakeDur *int `json:"handshake_dur,omitempty"`
	// The MD5 hash of a JA3 string.
	Ja3Hash *Fingerprint `json:"ja3_hash,omitempty"`
	// The MD5 hash of a JA3S string.
	Ja3SHash *Fingerprint `json:"ja3s_hash,omitempty"`
	// The length of the encryption key.
	KeyLength *int `json:"key_length,omitempty"`
	// The list of subject alternative names that are secured by a specific certificate.
	Sans *[]*San `json:"sans,omitempty"`
	// The server cipher suites that were exchanged during the TLS handshake negotiation.
	ServerCiphers *[]string `json:"server_ciphers,omitempty"`
	// The Server Name Indication (SNI) extension sent by the client.
	Sni *string `json:"sni,omitempty"`
	// The TLS protocol version.
	Version string `json:"version"`
}
