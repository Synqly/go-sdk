// This file was auto-generated by Fern from our API Definition.

package events

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Load Type ID. The normalized identifier of the load type. It identifies how the module was loaded in memory.
type ModuleLoadTypeId uint8

const (
	ModuleLoadTypeIdUnknown ModuleLoadTypeId = iota + 1
	// A normal module loaded by the normal windows loading mechanism i.e. LoadLibrary.
	ModuleLoadTypeIdStandard
	// A module loaded in a way avoidant of normal windows procedures. i.e. Bootstrapped Loading/Manual Dll Loading.
	ModuleLoadTypeIdNonStandard
	// A raw module in process memory that is READWRITE_EXECUTE and had a thread started in its range.
	ModuleLoadTypeIdShellCode
	// A memory mapped file, typically created with CreatefileMapping/MapViewOfFile.
	ModuleLoadTypeIdMapped
	// A module loaded in a non standard way. However, GetModuleFileName succeeds on this allocation.
	ModuleLoadTypeIdNonStandardBacked
	ModuleLoadTypeIdOther
)

func (m ModuleLoadTypeId) String() string {
	switch m {
	default:
		return strconv.Itoa(int(m))
	case ModuleLoadTypeIdUnknown:
		return "0"
	case ModuleLoadTypeIdStandard:
		return "1"
	case ModuleLoadTypeIdNonStandard:
		return "2"
	case ModuleLoadTypeIdShellCode:
		return "3"
	case ModuleLoadTypeIdMapped:
		return "4"
	case ModuleLoadTypeIdNonStandardBacked:
		return "5"
	case ModuleLoadTypeIdOther:
		return "99"
	}
}

func (m ModuleLoadTypeId) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", m.String())), nil
}

func (m *ModuleLoadTypeId) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "0":
		value := ModuleLoadTypeIdUnknown
		*m = value
	case "1":
		value := ModuleLoadTypeIdStandard
		*m = value
	case "2":
		value := ModuleLoadTypeIdNonStandard
		*m = value
	case "3":
		value := ModuleLoadTypeIdShellCode
		*m = value
	case "4":
		value := ModuleLoadTypeIdMapped
		*m = value
	case "5":
		value := ModuleLoadTypeIdNonStandardBacked
		*m = value
	case "99":
		value := ModuleLoadTypeIdOther
		*m = value
	}
	return nil
}
