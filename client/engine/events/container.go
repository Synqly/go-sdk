// This file was auto-generated by Fern from our API Definition.

package events

import (
	uuid "github.com/google/uuid"
)

// The Container object describes an instance of a specific container. A container is a prepackaged, portable system image that runs isolated on an existing system using a container runtime like containerd.
type Container struct {
	// Commit hash of image created for docker or the SHA256 hash of the container. For example: <code>13550340a8681c84c861aac2e5b440161c2b33a3e4f302ac680ca5b686de48de</code>.
	Hash *Fingerprint `json:"hash,omitempty"`
	// The container image used as a template to run the container.
	Image *Image `json:"image,omitempty"`
	// The container name.
	Name *string `json:"name,omitempty"`
	// The network driver used by the container. For example, bridge, overlay, host, none, etc.
	NetworkDriver *string `json:"network_driver,omitempty"`
	// The orchestrator managing the container, such as ECS, EKS, K8s, or OpenShift.
	Orchestrator *string `json:"orchestrator,omitempty"`
	// The unique identifier of the pod (or equivalent) that the container is executing on.
	PodUuid *uuid.UUID `json:"pod_uuid,omitempty"`
	// The backend running the container, such as containerd or cri-o.
	Runtime *string `json:"runtime,omitempty"`
	// The size of the container image.
	Size *int `json:"size,omitempty"`
	// The tag used by the container. It can indicate version, format, OS.
	Tag *string `json:"tag,omitempty"`
	// The full container unique identifier for this instantiation of the container. For example: <code>ac2ea168264a08f9aaca0dfc82ff3551418dfd22d02b713142a6843caa2f61bf</code>.
	Uid string `json:"uid"`
}
