// This file was auto-generated by Fern from our API Definition.

package events

import (
	time "time"
)

// Security Finding events describe findings, detections, anomalies, alerts and/or actions performed by security products
type SecurityFinding struct {
	// The normalized identifier of the activity that triggered the event.
	ActivityId SecurityFindingActivityId `json:"activity_id,omitempty"`
	// The event activity name, as defined by the activity_id.
	ActivityName *string `json:"activity_name,omitempty"`
	// The analytic technique used to create the finding or detection
	Analytic *Analytic `json:"analytic,omitempty"`
	// Describes details about a typical API (Application Programming Interface) call.
	Api *Api `json:"api,omitempty"`
	// The attack object describes the technique and associated tactics as defined by <a target='_blank' href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK Matrix<sup>TM</sup></a>.
	Attacks *[]*Attack `json:"attacks,omitempty"`
	// The event category name, as defined by category_uid value: <code>Findings</code>.
	CategoryName *string `json:"category_name,omitempty"`
	// The category unique identifier of the event.
	CategoryUid SecurityFindingCategoryUid `json:"category_uid,omitempty"`
	// The CIS Critical Security Controls is a list of top 20 actions and practices an organization’s security team can take on such that cyber attacks or malware, are minimized and prevented.
	CisCsc *[]*CisControl `json:"cis_csc,omitempty"`
	// The event class name, as defined by class_uid value: <code>Security Finding</code>.
	ClassName *string `json:"class_name,omitempty"`
	// Describes details about the Cloud environment where the event was originally created or logged.
	Cloud *Cloud `json:"cloud,omitempty"`
	// The compliance object provides context to compliance findings (e.g., a check against a specific regulatory or best practice framework such as CIS or NIST) and contains compliance related details.
	Compliance *Compliance `json:"compliance,omitempty"`
	// The confidence, normalized to the caption of the confidence_id value. In the case of 'Other', it is defined by the event source.
	Confidence *string `json:"confidence,omitempty"`
	// The normalized confidence refers to the accuracy of the rule that created the finding. A rule with a low confidence means that the finding scope is wide and may create finding reports that may not be malicious in nature.
	ConfidenceId *SecurityFindingConfidenceId `json:"confidence_id,omitempty"`
	// The confidence score as reported by the event source.
	ConfidenceScore *int `json:"confidence_score,omitempty"`
	// The number of times that events in the same logical group occurred during the event <strong>Start Time</strong> to <strong>End Time</strong> period.
	Count *int `json:"count,omitempty"`
	// The data sources for the finding.
	DataSources *[]string `json:"data_sources,omitempty"`
	// The event duration or aggregate time, the amount of time the event covers from <code>start_time</code> to <code>end_time</code> in milliseconds.
	Duration *int `json:"duration,omitempty"`
	// The end time of a time period, or the time of the most recent event included in the aggregate event.
	EndTime *Timestamp `json:"end_time,omitempty"`
	// The end time of a time period, or the time of the most recent event included in the aggregate event.
	EndTimeDt *time.Time `json:"end_time_dt,omitempty"`
	// The additional information from an external data source, which is associated with the event. For example add location information for the IP address in the DNS answers:</p><code>[{"name": "answers.ip", "value": "92.24.47.250", "type": "location", "data": {"city": "Socotra", "continent": "Asia", "coordinates": [-25.4153, 17.0743], "country": "YE", "desc": "Yemen"}}]</code>
	Enrichments *[]*Enrichment `json:"enrichments,omitempty"`
	// The data the finding exposes to the analyst.
	Evidence *any `json:"evidence,omitempty"`
	// Finding object provides details related to a finding generated by security tool
	Finding *Finding `json:"finding,omitempty"`
	// The impact , normalized to the caption of the impact_id value. In the case of 'Other', it is defined by the event source.
	Impact *string `json:"impact,omitempty"`
	// The normalized impact of the finding.
	ImpactId *SecurityFindingImpactId `json:"impact_id,omitempty"`
	// The impact of the finding, valid range 0-100.
	ImpactScore *int `json:"impact_score,omitempty"`
	// The <a target='_blank' href='https://www.lockheedmartin.com/en-us/capabilities/cyber/cyber-kill-chain.html'>Cyber Kill Chain®</a>.
	KillChain *[]*KillChain `json:"kill_chain,omitempty"`
	// The list of malware identified by a finding.
	Malware *[]*Malware `json:"malware,omitempty"`
	// The description of the event, as defined by the event source.
	Message *string `json:"message,omitempty"`
	// The metadata associated with the event.
	Metadata *Metadata `json:"metadata,omitempty"`
	// The NIST Cybersecurity Framework recommendations for managing the cybersecurity risk.
	Nist *[]string `json:"nist,omitempty"`
	// The observables associated with the event.
	Observables *[]*Observable `json:"observables,omitempty"`
	// The process object.
	Process *Process `json:"process,omitempty"`
	// The event data as received from the event source.
	RawData *string `json:"raw_data,omitempty"`
	// Describes details about resources that were affected by the activity/event.
	Resources *[]*ResourceDetails `json:"resources,omitempty"`
	// The risk level, normalized to the caption of the risk_level_id value. In the case of 'Other', it is defined by the event source.
	RiskLevel *string `json:"risk_level,omitempty"`
	// The normalized risk level id.
	RiskLevelId *SecurityFindingRiskLevelId `json:"risk_level_id,omitempty"`
	// The risk score as reported by the event source.
	RiskScore *int `json:"risk_score,omitempty"`
	// The event severity, normalized to the caption of the severity_id value. In the case of 'Other', it is defined by the event source.
	Severity *string `json:"severity,omitempty"`
	// <p>The normalized identifier of the event severity.</p>The normalized severity is a measurement the effort and expense required to manage and resolve an event or incident. Smaller numerical values represent lower impact events, and larger numerical values represent higher impact events.
	SeverityId SeverityId `json:"severity_id,omitempty"`
	// The start time of a time period, or the time of the least recent event included in the aggregate event.
	StartTime *Timestamp `json:"start_time,omitempty"`
	// The start time of a time period, or the time of the least recent event included in the aggregate event.
	StartTimeDt *time.Time `json:"start_time_dt,omitempty"`
	// The normalized state of a security finding.
	State *string `json:"state,omitempty"`
	// The normalized state identifier of a security finding.
	StateId SecurityFindingStateId `json:"state_id,omitempty"`
	// The event status, normalized to the caption of the status_id value. In the case of 'Other', it is defined by the event source.
	Status *string `json:"status,omitempty"`
	// The event status code, as reported by the event source.<br /><br />For example, in a Windows Failed Authentication event, this would be the value of 'Failure Code', e.g. 0x18.
	StatusCode *string `json:"status_code,omitempty"`
	// The status details contains additional information about the event outcome.
	StatusDetail *string `json:"status_detail,omitempty"`
	// The normalized identifier of the event status.
	StatusId *StatusId `json:"status_id,omitempty"`
	// The normalized event occurrence time.
	Time Timestamp `json:"time"`
	// The normalized event occurrence time.
	TimeDt *time.Time `json:"time_dt,omitempty"`
	// The number of minutes that the reported event <code>time</code> is ahead or behind UTC, in the range -1,080 to +1,080.
	TimezoneOffset *int `json:"timezone_offset,omitempty"`
	// The event type name, as defined by the type_uid.
	TypeName *string `json:"type_name,omitempty"`
	// The event type ID. It identifies the event's semantics and structure. The value is calculated by the logging system as: <code>class_uid * 100 + activity_id</code>.
	TypeUid SecurityFindingTypeUid `json:"type_uid,omitempty"`
	// The attributes that are not mapped to the event schema. The names and values of those attributes are specific to the event source.
	Unmapped *Object `json:"unmapped,omitempty"`
	// This object describes vulnerabilities reported in a security finding.
	Vulnerabilities *[]*Vulnerability `json:"vulnerabilities,omitempty"`
}
