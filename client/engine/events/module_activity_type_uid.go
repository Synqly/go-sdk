// This file was auto-generated by Fern from our API Definition.

package events

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Type ID. The event type ID. It identifies the event's semantics and structure. The value is calculated by the logging system as: <code>class_uid * 100 + activity_id</code>.
type ModuleActivityTypeUid uint8

const (
	ModuleActivityTypeUidModuleActivityUnknown ModuleActivityTypeUid = iota + 1
	ModuleActivityTypeUidModuleActivityLoad
	ModuleActivityTypeUidModuleActivityUnload
	ModuleActivityTypeUidModuleActivityOther
)

func (m ModuleActivityTypeUid) String() string {
	switch m {
	default:
		return strconv.Itoa(int(m))
	case ModuleActivityTypeUidModuleActivityUnknown:
		return "100500"
	case ModuleActivityTypeUidModuleActivityLoad:
		return "100501"
	case ModuleActivityTypeUidModuleActivityUnload:
		return "100502"
	case ModuleActivityTypeUidModuleActivityOther:
		return "100599"
	}
}

func (m ModuleActivityTypeUid) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", m.String())), nil
}

func (m *ModuleActivityTypeUid) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "100500":
		value := ModuleActivityTypeUidModuleActivityUnknown
		*m = value
	case "100501":
		value := ModuleActivityTypeUidModuleActivityLoad
		*m = value
	case "100502":
		value := ModuleActivityTypeUidModuleActivityUnload
		*m = value
	case "100599":
		value := ModuleActivityTypeUidModuleActivityOther
		*m = value
	}
	return nil
}
