// This file was auto-generated by Fern from our API Definition.

package events

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Type ID. The network interface type identifier.
type NetworkInterfaceTypeId uint8

const (
	// The type is unknown.
	NetworkInterfaceTypeIdUnknown NetworkInterfaceTypeId = iota + 1
	NetworkInterfaceTypeIdWired
	NetworkInterfaceTypeIdWireless
	NetworkInterfaceTypeIdMobile
	// The type is not mapped. See the <code>type</code> attribute, which may contain a data source specific value.
	NetworkInterfaceTypeIdOther
)

func (n NetworkInterfaceTypeId) String() string {
	switch n {
	default:
		return strconv.Itoa(int(n))
	case NetworkInterfaceTypeIdUnknown:
		return "0"
	case NetworkInterfaceTypeIdWired:
		return "1"
	case NetworkInterfaceTypeIdWireless:
		return "2"
	case NetworkInterfaceTypeIdMobile:
		return "3"
	case NetworkInterfaceTypeIdOther:
		return "99"
	}
}

func (n NetworkInterfaceTypeId) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", n.String())), nil
}

func (n *NetworkInterfaceTypeId) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "0":
		value := NetworkInterfaceTypeIdUnknown
		*n = value
	case "1":
		value := NetworkInterfaceTypeIdWired
		*n = value
	case "2":
		value := NetworkInterfaceTypeIdWireless
		*n = value
	case "3":
		value := NetworkInterfaceTypeIdMobile
		*n = value
	case "99":
		value := NetworkInterfaceTypeIdOther
		*n = value
	}
	return nil
}
