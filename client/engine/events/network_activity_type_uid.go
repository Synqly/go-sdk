// This file was auto-generated by Fern from our API Definition.

package events

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Type ID. The event type ID. It identifies the event's semantics and structure. The value is calculated by the logging system as: <code>class_uid * 100 + activity_id</code>.
type NetworkActivityTypeUid uint8

const (
	NetworkActivityTypeUidNetworkActivityUnknown NetworkActivityTypeUid = iota + 1
	// A new network connection was opened.
	NetworkActivityTypeUidNetworkActivityOpen
	// The network connection was closed.
	NetworkActivityTypeUidNetworkActivityClose
	// The network connection was abnormally terminated or closed by a middle device like firewalls.
	NetworkActivityTypeUidNetworkActivityReset
	// The network connection failed. For example a connection timeout or no route to host.
	NetworkActivityTypeUidNetworkActivityFail
	// The network connection was refused. For example an attempt to connect to a server port which is not open.
	NetworkActivityTypeUidNetworkActivityRefuse
	// Network traffic report.
	NetworkActivityTypeUidNetworkActivityTraffic
	NetworkActivityTypeUidNetworkActivityOther
)

func (n NetworkActivityTypeUid) String() string {
	switch n {
	default:
		return strconv.Itoa(int(n))
	case NetworkActivityTypeUidNetworkActivityUnknown:
		return "400100"
	case NetworkActivityTypeUidNetworkActivityOpen:
		return "400101"
	case NetworkActivityTypeUidNetworkActivityClose:
		return "400102"
	case NetworkActivityTypeUidNetworkActivityReset:
		return "400103"
	case NetworkActivityTypeUidNetworkActivityFail:
		return "400104"
	case NetworkActivityTypeUidNetworkActivityRefuse:
		return "400105"
	case NetworkActivityTypeUidNetworkActivityTraffic:
		return "400106"
	case NetworkActivityTypeUidNetworkActivityOther:
		return "400199"
	}
}

func (n NetworkActivityTypeUid) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", n.String())), nil
}

func (n *NetworkActivityTypeUid) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "400100":
		value := NetworkActivityTypeUidNetworkActivityUnknown
		*n = value
	case "400101":
		value := NetworkActivityTypeUidNetworkActivityOpen
		*n = value
	case "400102":
		value := NetworkActivityTypeUidNetworkActivityClose
		*n = value
	case "400103":
		value := NetworkActivityTypeUidNetworkActivityReset
		*n = value
	case "400104":
		value := NetworkActivityTypeUidNetworkActivityFail
		*n = value
	case "400105":
		value := NetworkActivityTypeUidNetworkActivityRefuse
		*n = value
	case "400106":
		value := NetworkActivityTypeUidNetworkActivityTraffic
		*n = value
	case "400199":
		value := NetworkActivityTypeUidNetworkActivityOther
		*n = value
	}
	return nil
}
