// This file was auto-generated by Fern from our API Definition.

package events

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Type ID. The TLS extension type identifier. See <a target='_blank' href='https://datatracker.ietf.org/doc/html/rfc8446#page-35'>The Transport Layer Security (TLS) extension page</a>.
type TlsExtensionTypeId uint8

const (
	// The Server Name Indication extension.
	TlsExtensionTypeIdServerName TlsExtensionTypeId = iota + 1
	// The Maximum Fragment Length Negotiation extension.
	TlsExtensionTypeIdMaximumFragmentLength
	// The Certificate Status Request extension.
	TlsExtensionTypeIdStatusRequest
	// The Supported Groups extension.
	TlsExtensionTypeIdSupportedGroups
	// The Signature Algorithms extension.
	TlsExtensionTypeIdSignatureAlgorithms
	// The Use SRTP data protection extension.
	TlsExtensionTypeIdUseSrtp
	// The Heartbeat extension.
	TlsExtensionTypeIdHeartbeat
	// The Application-Layer Protocol Negotiation extension.
	TlsExtensionTypeIdApplicationLayerProtocolNegotiation
	// The Signed Certificate Timestamp extension.
	TlsExtensionTypeIdSignedCertificateTimestamp
	// The Client Certificate Type extension.
	TlsExtensionTypeIdClientCertificateType
	// The Server Certificate Type extension.
	TlsExtensionTypeIdServerCertificateType
	// The Padding extension.
	TlsExtensionTypeIdPadding
	// The Pre Shared Key extension.
	TlsExtensionTypeIdPreSharedKey
	// The Early Data extension.
	TlsExtensionTypeIdEarlyData
	// The Supported Versions extension.
	TlsExtensionTypeIdSupportedVersions
	// The Cookie extension.
	TlsExtensionTypeIdCookie
	// The Pre-Shared Key Exchange Modes extension.
	TlsExtensionTypeIdPskKeyExchangeModes
	// The Certificate Authorities extension.
	TlsExtensionTypeIdCertificateAuthorities
	// The OID Filters extension.
	TlsExtensionTypeIdOidFilters
	// The Post-Handshake Client Authentication extension.
	TlsExtensionTypeIdPostHandshakeAuth
	// The Signature Algorithms extension.
	TlsExtensionTypeIdSignatureAlgorithmsCert
	// The Key Share extension.
	TlsExtensionTypeIdKeyShare
	// The type is not mapped. See the <code>type</code> attribute, which may contain a data source specific value.
	TlsExtensionTypeIdOther
)

func (t TlsExtensionTypeId) String() string {
	switch t {
	default:
		return strconv.Itoa(int(t))
	case TlsExtensionTypeIdServerName:
		return "0"
	case TlsExtensionTypeIdMaximumFragmentLength:
		return "1"
	case TlsExtensionTypeIdStatusRequest:
		return "5"
	case TlsExtensionTypeIdSupportedGroups:
		return "10"
	case TlsExtensionTypeIdSignatureAlgorithms:
		return "13"
	case TlsExtensionTypeIdUseSrtp:
		return "14"
	case TlsExtensionTypeIdHeartbeat:
		return "15"
	case TlsExtensionTypeIdApplicationLayerProtocolNegotiation:
		return "16"
	case TlsExtensionTypeIdSignedCertificateTimestamp:
		return "18"
	case TlsExtensionTypeIdClientCertificateType:
		return "19"
	case TlsExtensionTypeIdServerCertificateType:
		return "20"
	case TlsExtensionTypeIdPadding:
		return "21"
	case TlsExtensionTypeIdPreSharedKey:
		return "41"
	case TlsExtensionTypeIdEarlyData:
		return "42"
	case TlsExtensionTypeIdSupportedVersions:
		return "43"
	case TlsExtensionTypeIdCookie:
		return "44"
	case TlsExtensionTypeIdPskKeyExchangeModes:
		return "45"
	case TlsExtensionTypeIdCertificateAuthorities:
		return "47"
	case TlsExtensionTypeIdOidFilters:
		return "48"
	case TlsExtensionTypeIdPostHandshakeAuth:
		return "49"
	case TlsExtensionTypeIdSignatureAlgorithmsCert:
		return "50"
	case TlsExtensionTypeIdKeyShare:
		return "51"
	case TlsExtensionTypeIdOther:
		return "99"
	}
}

func (t TlsExtensionTypeId) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", t.String())), nil
}

func (t *TlsExtensionTypeId) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "0":
		value := TlsExtensionTypeIdServerName
		*t = value
	case "1":
		value := TlsExtensionTypeIdMaximumFragmentLength
		*t = value
	case "5":
		value := TlsExtensionTypeIdStatusRequest
		*t = value
	case "10":
		value := TlsExtensionTypeIdSupportedGroups
		*t = value
	case "13":
		value := TlsExtensionTypeIdSignatureAlgorithms
		*t = value
	case "14":
		value := TlsExtensionTypeIdUseSrtp
		*t = value
	case "15":
		value := TlsExtensionTypeIdHeartbeat
		*t = value
	case "16":
		value := TlsExtensionTypeIdApplicationLayerProtocolNegotiation
		*t = value
	case "18":
		value := TlsExtensionTypeIdSignedCertificateTimestamp
		*t = value
	case "19":
		value := TlsExtensionTypeIdClientCertificateType
		*t = value
	case "20":
		value := TlsExtensionTypeIdServerCertificateType
		*t = value
	case "21":
		value := TlsExtensionTypeIdPadding
		*t = value
	case "41":
		value := TlsExtensionTypeIdPreSharedKey
		*t = value
	case "42":
		value := TlsExtensionTypeIdEarlyData
		*t = value
	case "43":
		value := TlsExtensionTypeIdSupportedVersions
		*t = value
	case "44":
		value := TlsExtensionTypeIdCookie
		*t = value
	case "45":
		value := TlsExtensionTypeIdPskKeyExchangeModes
		*t = value
	case "47":
		value := TlsExtensionTypeIdCertificateAuthorities
		*t = value
	case "48":
		value := TlsExtensionTypeIdOidFilters
		*t = value
	case "49":
		value := TlsExtensionTypeIdPostHandshakeAuth
		*t = value
	case "50":
		value := TlsExtensionTypeIdSignatureAlgorithmsCert
		*t = value
	case "51":
		value := TlsExtensionTypeIdKeyShare
		*t = value
	case "99":
		value := TlsExtensionTypeIdOther
		*t = value
	}
	return nil
}
