// This file was auto-generated by Fern from our API Definition.

package events

import (
	time "time"
)

// Process Activity events report when a process launches, injects, opens or terminates another process, successful or otherwise.
type ProcessActivity struct {
	// The normalized identifier of the activity that triggered the event.
	ActivityId ProcessActivityActivityId `json:"activity_id,omitempty"`
	// The event activity name, as defined by the activity_id.
	ActivityName *string `json:"activity_name,omitempty"`
	// The actor that performed the activity on the target <code>process</code>. For example, the process that started a new process or injected code into another process.
	Actor *Actor `json:"actor,omitempty"`
	// The permissions that were granted to the in a platform-native format.
	ActualPermissions *int `json:"actual_permissions,omitempty"`
	// Describes details about a typical API (Application Programming Interface) call.
	Api *Api `json:"api,omitempty"`
	// An array of attacks associated with an event.
	Attacks *[]*Attack `json:"attacks,omitempty"`
	// The event category name, as defined by category_uid value: <code>System Activity</code>.
	CategoryName *string `json:"category_name,omitempty"`
	// The category unique identifier of the event.
	CategoryUid ProcessActivityCategoryUid `json:"category_uid,omitempty"`
	// The event class name, as defined by class_uid value: <code>Process Activity</code>.
	ClassName *string `json:"class_name,omitempty"`
	// Describes details about the Cloud environment where the event was originally created or logged.
	Cloud *Cloud `json:"cloud,omitempty"`
	// The number of times that events in the same logical group occurred during the event <strong>Start Time</strong> to <strong>End Time</strong> period.
	Count *int `json:"count,omitempty"`
	// An addressable device, computer system or host.
	Device *Device `json:"device,omitempty"`
	// The event disposition name, normalized to the caption of the disposition_id value. In the case of 'Other', it is defined by the event source.
	Disposition *string `json:"disposition,omitempty"`
	// When security issues, such as malware or policy violations, are detected and possibly corrected, then <code>disposition_id</code> describes the action taken by the security product.
	DispositionId ProcessActivityDispositionId `json:"disposition_id,omitempty"`
	// The event duration or aggregate time, the amount of time the event covers from <code>start_time</code> to <code>end_time</code> in milliseconds.
	Duration *int `json:"duration,omitempty"`
	// The end time of a time period, or the time of the most recent event included in the aggregate event.
	EndTime *Timestamp `json:"end_time,omitempty"`
	// The end time of a time period, or the time of the most recent event included in the aggregate event.
	EndTimeDt *time.Time `json:"end_time_dt,omitempty"`
	// The additional information from an external data source, which is associated with the event. For example add location information for the IP address in the DNS answers:</p><code>[{"name": "answers.ip", "value": "92.24.47.250", "type": "location", "data": {"city": "Socotra", "continent": "Asia", "coordinates": [-25.4153, 17.0743], "country": "YE", "desc": "Yemen"}}]</code>
	Enrichments *[]*Enrichment `json:"enrichments,omitempty"`
	// The exit code reported by a process when it terminates. The convention is that zero indicates success and any non-zero exit code indicates that some error occurred.
	ExitCode *int `json:"exit_code,omitempty"`
	// The process injection method, normalized to the caption of the injection_type_id value. In the case of 'Other', it is defined by the event source.
	InjectionType *string `json:"injection_type,omitempty"`
	// The normalized identifier of the process injection method.
	InjectionTypeId *ProcessActivityInjectionTypeId `json:"injection_type_id,omitempty"`
	// The list of malware identified by a finding.
	Malware *[]*Malware `json:"malware,omitempty"`
	// The description of the event, as defined by the event source.
	Message *string `json:"message,omitempty"`
	// The metadata associated with the event.
	Metadata *Metadata `json:"metadata,omitempty"`
	// The module that was injected by the actor process.
	Module *Module `json:"module,omitempty"`
	// The observables associated with the event.
	Observables *[]*Observable `json:"observables,omitempty"`
	// The process that was launched, injected into, opened, or terminated.
	Process *Process `json:"process,omitempty"`
	// The event data as received from the event source.
	RawData *string `json:"raw_data,omitempty"`
	// The permissions mask that were requested by the process.
	RequestedPermissions *int `json:"requested_permissions,omitempty"`
	// The event severity, normalized to the caption of the severity_id value. In the case of 'Other', it is defined by the event source.
	Severity *string `json:"severity,omitempty"`
	// <p>The normalized identifier of the event severity.</p>The normalized severity is a measurement the effort and expense required to manage and resolve an event or incident. Smaller numerical values represent lower impact events, and larger numerical values represent higher impact events.
	SeverityId SeverityId `json:"severity_id,omitempty"`
	// The start time of a time period, or the time of the least recent event included in the aggregate event.
	StartTime *Timestamp `json:"start_time,omitempty"`
	// The start time of a time period, or the time of the least recent event included in the aggregate event.
	StartTimeDt *time.Time `json:"start_time_dt,omitempty"`
	// The event status, normalized to the caption of the status_id value. In the case of 'Other', it is defined by the event source.
	Status *string `json:"status,omitempty"`
	// The event status code, as reported by the event source.<br /><br />For example, in a Windows Failed Authentication event, this would be the value of 'Failure Code', e.g. 0x18.
	StatusCode *string `json:"status_code,omitempty"`
	// The status details contains additional information about the event outcome.
	StatusDetail *string `json:"status_detail,omitempty"`
	// The normalized identifier of the event status.
	StatusId *StatusId `json:"status_id,omitempty"`
	// The normalized event occurrence time.
	Time Timestamp `json:"time"`
	// The normalized event occurrence time.
	TimeDt *time.Time `json:"time_dt,omitempty"`
	// The number of minutes that the reported event <code>time</code> is ahead or behind UTC, in the range -1,080 to +1,080.
	TimezoneOffset *int `json:"timezone_offset,omitempty"`
	// The event type name, as defined by the type_uid.
	TypeName *string `json:"type_name,omitempty"`
	// The event type ID. It identifies the event's semantics and structure. The value is calculated by the logging system as: <code>class_uid * 100 + activity_id</code>.
	TypeUid ProcessActivityTypeUid `json:"type_uid,omitempty"`
	// The attributes that are not mapped to the event schema. The names and values of those attributes are specific to the event source.
	Unmapped *Object `json:"unmapped,omitempty"`
}
