// This file was auto-generated by Fern from our API Definition.

package events

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// DNS Header Flags. The list of DNS answer header flag IDs.
type DnsAnswerFlagIds uint8

const (
	DnsAnswerFlagIdsUnknown DnsAnswerFlagIds = iota + 1
	DnsAnswerFlagIdsAuthoritativeAnswer
	DnsAnswerFlagIdsTruncatedResponse
	DnsAnswerFlagIdsRecursionDesired
	DnsAnswerFlagIdsRecursionAvailable
	DnsAnswerFlagIdsAuthenticData
	DnsAnswerFlagIdsCheckingDisabled
	// The event DNS header flag is not mapped.
	DnsAnswerFlagIdsOther
)

func (d DnsAnswerFlagIds) String() string {
	switch d {
	default:
		return strconv.Itoa(int(d))
	case DnsAnswerFlagIdsUnknown:
		return "0"
	case DnsAnswerFlagIdsAuthoritativeAnswer:
		return "1"
	case DnsAnswerFlagIdsTruncatedResponse:
		return "2"
	case DnsAnswerFlagIdsRecursionDesired:
		return "3"
	case DnsAnswerFlagIdsRecursionAvailable:
		return "4"
	case DnsAnswerFlagIdsAuthenticData:
		return "5"
	case DnsAnswerFlagIdsCheckingDisabled:
		return "6"
	case DnsAnswerFlagIdsOther:
		return "99"
	}
}

func (d DnsAnswerFlagIds) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", d.String())), nil
}

func (d *DnsAnswerFlagIds) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "0":
		value := DnsAnswerFlagIdsUnknown
		*d = value
	case "1":
		value := DnsAnswerFlagIdsAuthoritativeAnswer
		*d = value
	case "2":
		value := DnsAnswerFlagIdsTruncatedResponse
		*d = value
	case "3":
		value := DnsAnswerFlagIdsRecursionDesired
		*d = value
	case "4":
		value := DnsAnswerFlagIdsRecursionAvailable
		*d = value
	case "5":
		value := DnsAnswerFlagIdsAuthenticData
		*d = value
	case "6":
		value := DnsAnswerFlagIdsCheckingDisabled
		*d = value
	case "99":
		value := DnsAnswerFlagIdsOther
		*d = value
	}
	return nil
}
