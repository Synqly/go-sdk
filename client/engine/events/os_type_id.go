// This file was auto-generated by Fern from our API Definition.

package events

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Type ID. The type identifier of the operating system.
type OsTypeId uint8

const (
	// The type is unknown.
	OsTypeIdUnknown OsTypeId = iota + 1
	// The type is not mapped. See the <code>type</code> attribute, which may contain a data source specific value.
	OsTypeIdOther
	OsTypeIdWindows
	OsTypeIdWindowsMobile
	OsTypeIdLinux
	OsTypeIdAndroid
	OsTypeIdMacOs
	OsTypeIdIOs
	OsTypeIdIPadOs
	OsTypeIdSolaris
	OsTypeIdAix
	OsTypeIdHpUx
)

func (o OsTypeId) String() string {
	switch o {
	default:
		return strconv.Itoa(int(o))
	case OsTypeIdUnknown:
		return "0"
	case OsTypeIdOther:
		return "99"
	case OsTypeIdWindows:
		return "100"
	case OsTypeIdWindowsMobile:
		return "101"
	case OsTypeIdLinux:
		return "200"
	case OsTypeIdAndroid:
		return "201"
	case OsTypeIdMacOs:
		return "300"
	case OsTypeIdIOs:
		return "301"
	case OsTypeIdIPadOs:
		return "302"
	case OsTypeIdSolaris:
		return "400"
	case OsTypeIdAix:
		return "401"
	case OsTypeIdHpUx:
		return "402"
	}
}

func (o OsTypeId) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", o.String())), nil
}

func (o *OsTypeId) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "0":
		value := OsTypeIdUnknown
		*o = value
	case "99":
		value := OsTypeIdOther
		*o = value
	case "100":
		value := OsTypeIdWindows
		*o = value
	case "101":
		value := OsTypeIdWindowsMobile
		*o = value
	case "200":
		value := OsTypeIdLinux
		*o = value
	case "201":
		value := OsTypeIdAndroid
		*o = value
	case "300":
		value := OsTypeIdMacOs
		*o = value
	case "301":
		value := OsTypeIdIOs
		*o = value
	case "302":
		value := OsTypeIdIPadOs
		*o = value
	case "400":
		value := OsTypeIdSolaris
		*o = value
	case "401":
		value := OsTypeIdAix
		*o = value
	case "402":
		value := OsTypeIdHpUx
		*o = value
	}
	return nil
}
