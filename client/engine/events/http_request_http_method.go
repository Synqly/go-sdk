// This file was auto-generated by Fern from our API Definition.

package events

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// HTTP Method. The <a target='_blank' href='https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods'>HTTP request method</a> indicates the desired action to be performed for a given resource.
type HttpRequestHttpMethod uint8

const (
	// The CONNECT method establishes a tunnel to the server identified by the target resource.
	HttpRequestHttpMethodConnect HttpRequestHttpMethod = iota + 1
	// The DELETE method deletes the specified resource.
	HttpRequestHttpMethodDelete
	// The GET method requests a representation of the specified resource. Requests using GET should only retrieve data.
	HttpRequestHttpMethodGet
	// The HEAD method asks for a response identical to a GET request, but without the response body.
	HttpRequestHttpMethodHead
	// The OPTIONS method describes the communication options for the target resource.
	HttpRequestHttpMethodOptions
	// The POST method submits an entity to the specified resource, often causing a change in state or side effects on the server.
	HttpRequestHttpMethodPost
	// The PUT method replaces all current representations of the target resource with the request payload.
	HttpRequestHttpMethodPut
	// The TRACE method performs a message loop-back test along the path to the target resource.
	HttpRequestHttpMethodTrace
)

func (h HttpRequestHttpMethod) String() string {
	switch h {
	default:
		return strconv.Itoa(int(h))
	case HttpRequestHttpMethodConnect:
		return "CONNECT"
	case HttpRequestHttpMethodDelete:
		return "DELETE"
	case HttpRequestHttpMethodGet:
		return "GET"
	case HttpRequestHttpMethodHead:
		return "HEAD"
	case HttpRequestHttpMethodOptions:
		return "OPTIONS"
	case HttpRequestHttpMethodPost:
		return "POST"
	case HttpRequestHttpMethodPut:
		return "PUT"
	case HttpRequestHttpMethodTrace:
		return "TRACE"
	}
}

func (h HttpRequestHttpMethod) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", h.String())), nil
}

func (h *HttpRequestHttpMethod) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "CONNECT":
		value := HttpRequestHttpMethodConnect
		*h = value
	case "DELETE":
		value := HttpRequestHttpMethodDelete
		*h = value
	case "GET":
		value := HttpRequestHttpMethodGet
		*h = value
	case "HEAD":
		value := HttpRequestHttpMethodHead
		*h = value
	case "OPTIONS":
		value := HttpRequestHttpMethodOptions
		*h = value
	case "POST":
		value := HttpRequestHttpMethodPost
		*h = value
	case "PUT":
		value := HttpRequestHttpMethodPut
		*h = value
	case "TRACE":
		value := HttpRequestHttpMethodTrace
		*h = value
	}
	return nil
}
