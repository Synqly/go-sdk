// This file was auto-generated by Fern from our API Definition.

package events

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Type ID. The value type ID.
type WinRegistryValueTypeId uint8

const (
	// The type is unknown.
	WinRegistryValueTypeIdUnknown WinRegistryValueTypeId = iota + 1
	WinRegistryValueTypeIdRegBinary
	WinRegistryValueTypeIdRegDword
	WinRegistryValueTypeIdRegDwordBigEndian
	WinRegistryValueTypeIdRegExpandSz
	WinRegistryValueTypeIdRegLink
	WinRegistryValueTypeIdRegMultiSz
	WinRegistryValueTypeIdRegNone
	WinRegistryValueTypeIdRegQword
	WinRegistryValueTypeIdRegQwordLittleEndian
	WinRegistryValueTypeIdRegSz
	// The type is not mapped. See the <code>type</code> attribute, which may contain a data source specific value.
	WinRegistryValueTypeIdOther
)

func (w WinRegistryValueTypeId) String() string {
	switch w {
	default:
		return strconv.Itoa(int(w))
	case WinRegistryValueTypeIdUnknown:
		return "0"
	case WinRegistryValueTypeIdRegBinary:
		return "1"
	case WinRegistryValueTypeIdRegDword:
		return "2"
	case WinRegistryValueTypeIdRegDwordBigEndian:
		return "3"
	case WinRegistryValueTypeIdRegExpandSz:
		return "4"
	case WinRegistryValueTypeIdRegLink:
		return "5"
	case WinRegistryValueTypeIdRegMultiSz:
		return "6"
	case WinRegistryValueTypeIdRegNone:
		return "7"
	case WinRegistryValueTypeIdRegQword:
		return "8"
	case WinRegistryValueTypeIdRegQwordLittleEndian:
		return "9"
	case WinRegistryValueTypeIdRegSz:
		return "10"
	case WinRegistryValueTypeIdOther:
		return "99"
	}
}

func (w WinRegistryValueTypeId) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", w.String())), nil
}

func (w *WinRegistryValueTypeId) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "0":
		value := WinRegistryValueTypeIdUnknown
		*w = value
	case "1":
		value := WinRegistryValueTypeIdRegBinary
		*w = value
	case "2":
		value := WinRegistryValueTypeIdRegDword
		*w = value
	case "3":
		value := WinRegistryValueTypeIdRegDwordBigEndian
		*w = value
	case "4":
		value := WinRegistryValueTypeIdRegExpandSz
		*w = value
	case "5":
		value := WinRegistryValueTypeIdRegLink
		*w = value
	case "6":
		value := WinRegistryValueTypeIdRegMultiSz
		*w = value
	case "7":
		value := WinRegistryValueTypeIdRegNone
		*w = value
	case "8":
		value := WinRegistryValueTypeIdRegQword
		*w = value
	case "9":
		value := WinRegistryValueTypeIdRegQwordLittleEndian
		*w = value
	case "10":
		value := WinRegistryValueTypeIdRegSz
		*w = value
	case "99":
		value := WinRegistryValueTypeIdOther
		*w = value
	}
	return nil
}
