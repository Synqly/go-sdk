// This file was auto-generated by Fern from our API Definition.

package engine

import (
	json "encoding/json"
	core "github.com/synqly/go-sdk/client/engine/core"
)

type BadGatewayError struct {
	*core.APIError
	Body *Problem
}

func (b *BadGatewayError) UnmarshalJSON(data []byte) error {
	var body *Problem
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	b.StatusCode = 502
	b.Body = body
	return nil
}

func (b *BadGatewayError) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.Body)
}

func (b *BadGatewayError) Unwrap() error {
	return b.APIError
}

type BadRequestError struct {
	*core.APIError
	Body *Problem
}

func (b *BadRequestError) UnmarshalJSON(data []byte) error {
	var body *Problem
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	b.StatusCode = 400
	b.Body = body
	return nil
}

func (b *BadRequestError) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.Body)
}

func (b *BadRequestError) Unwrap() error {
	return b.APIError
}

type ConflictError struct {
	*core.APIError
	Body *Problem
}

func (c *ConflictError) UnmarshalJSON(data []byte) error {
	var body *Problem
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	c.StatusCode = 409
	c.Body = body
	return nil
}

func (c *ConflictError) MarshalJSON() ([]byte, error) {
	return json.Marshal(c.Body)
}

func (c *ConflictError) Unwrap() error {
	return c.APIError
}

type ForbiddenError struct {
	*core.APIError
	Body *Problem
}

func (f *ForbiddenError) UnmarshalJSON(data []byte) error {
	var body *Problem
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	f.StatusCode = 403
	f.Body = body
	return nil
}

func (f *ForbiddenError) MarshalJSON() ([]byte, error) {
	return json.Marshal(f.Body)
}

func (f *ForbiddenError) Unwrap() error {
	return f.APIError
}

type GatewayTimeoutError struct {
	*core.APIError
	Body *Problem
}

func (g *GatewayTimeoutError) UnmarshalJSON(data []byte) error {
	var body *Problem
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	g.StatusCode = 504
	g.Body = body
	return nil
}

func (g *GatewayTimeoutError) MarshalJSON() ([]byte, error) {
	return json.Marshal(g.Body)
}

func (g *GatewayTimeoutError) Unwrap() error {
	return g.APIError
}

type InternalServerError struct {
	*core.APIError
	Body *Problem
}

func (i *InternalServerError) UnmarshalJSON(data []byte) error {
	var body *Problem
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	i.StatusCode = 500
	i.Body = body
	return nil
}

func (i *InternalServerError) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.Body)
}

func (i *InternalServerError) Unwrap() error {
	return i.APIError
}

type MethodNotAllowedError struct {
	*core.APIError
	Body *Problem
}

func (m *MethodNotAllowedError) UnmarshalJSON(data []byte) error {
	var body *Problem
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	m.StatusCode = 405
	m.Body = body
	return nil
}

func (m *MethodNotAllowedError) MarshalJSON() ([]byte, error) {
	return json.Marshal(m.Body)
}

func (m *MethodNotAllowedError) Unwrap() error {
	return m.APIError
}

type NotFoundError struct {
	*core.APIError
	Body *Problem
}

func (n *NotFoundError) UnmarshalJSON(data []byte) error {
	var body *Problem
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	n.StatusCode = 404
	n.Body = body
	return nil
}

func (n *NotFoundError) MarshalJSON() ([]byte, error) {
	return json.Marshal(n.Body)
}

func (n *NotFoundError) Unwrap() error {
	return n.APIError
}

type NotImplementedError struct {
	*core.APIError
	Body *Problem
}

func (n *NotImplementedError) UnmarshalJSON(data []byte) error {
	var body *Problem
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	n.StatusCode = 501
	n.Body = body
	return nil
}

func (n *NotImplementedError) MarshalJSON() ([]byte, error) {
	return json.Marshal(n.Body)
}

func (n *NotImplementedError) Unwrap() error {
	return n.APIError
}

type ServiceUnavailableError struct {
	*core.APIError
	Body *Problem
}

func (s *ServiceUnavailableError) UnmarshalJSON(data []byte) error {
	var body *Problem
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	s.StatusCode = 503
	s.Body = body
	return nil
}

func (s *ServiceUnavailableError) MarshalJSON() ([]byte, error) {
	return json.Marshal(s.Body)
}

func (s *ServiceUnavailableError) Unwrap() error {
	return s.APIError
}

type TooManyRequestsError struct {
	*core.APIError
	Body *Problem
}

func (t *TooManyRequestsError) UnmarshalJSON(data []byte) error {
	var body *Problem
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	t.StatusCode = 429
	t.Body = body
	return nil
}

func (t *TooManyRequestsError) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

func (t *TooManyRequestsError) Unwrap() error {
	return t.APIError
}

type UnauthorizedError struct {
	*core.APIError
	Body *Problem
}

func (u *UnauthorizedError) UnmarshalJSON(data []byte) error {
	var body *Problem
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	u.StatusCode = 401
	u.Body = body
	return nil
}

func (u *UnauthorizedError) MarshalJSON() ([]byte, error) {
	return json.Marshal(u.Body)
}

func (u *UnauthorizedError) Unwrap() error {
	return u.APIError
}

type UnsupportedMediaTypeError struct {
	*core.APIError
	Body *Problem
}

func (u *UnsupportedMediaTypeError) UnmarshalJSON(data []byte) error {
	var body *Problem
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	u.StatusCode = 415
	u.Body = body
	return nil
}

func (u *UnsupportedMediaTypeError) MarshalJSON() ([]byte, error) {
	return json.Marshal(u.Body)
}

func (u *UnsupportedMediaTypeError) Unwrap() error {
	return u.APIError
}
